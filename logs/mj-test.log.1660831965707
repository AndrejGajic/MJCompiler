INFO  16:11:55,734 - Compiling source file: C:\Users\Andrej\eclipse-workspace\MJCompiler\test\lexerTest1.mj
INFO  16:11:55,741 - #2 program
INFO  16:11:55,741 - #48 MJLexerTest1
INFO  16:11:55,742 - #46 {
INFO  16:11:55,742 - #7 const
INFO  16:11:55,742 - #48 int
INFO  16:11:55,742 - #48 MAX
INFO  16:11:55,742 - #35 =
INFO  16:11:55,742 - #49 50
INFO  16:11:55,742 - #38 ;
INFO  16:11:55,742 - #48 int
INFO  16:11:55,742 - #48 x
INFO  16:11:55,742 - #35 =
INFO  16:11:55,742 - #49 5
INFO  16:11:55,742 - #40 ,
INFO  16:11:55,743 - #48 y
INFO  16:11:55,743 - #35 =
INFO  16:11:55,743 - #49 10
INFO  16:11:55,743 - #38 ;
INFO  16:11:55,743 - #48 boolean
INFO  16:11:55,743 - #48 b
INFO  16:11:55,743 - #38 ;
INFO  16:11:55,747 - #48 char
INFO  16:11:55,747 - #48 c
INFO  16:11:55,747 - #38 ;
INFO  16:11:55,747 - #48 int
INFO  16:11:55,747 - #48 array
INFO  16:11:55,747 - #44 [
INFO  16:11:55,747 - #48 MAX
INFO  16:11:55,747 - #45 ]
INFO  16:11:55,747 - #38 ;
INFO  16:11:55,747 - #48 int
INFO  16:11:55,747 - #48 sumOfArray
INFO  16:11:55,747 - #42 (
INFO  16:11:55,747 - #48 int
INFO  16:11:55,748 - #44 [
INFO  16:11:55,748 - #45 ]
INFO  16:11:55,748 - #48 array
INFO  16:11:55,748 - #43 )
INFO  16:11:55,748 - #46 {
INFO  16:11:55,748 - #48 int
INFO  16:11:55,748 - #48 sum
INFO  16:11:55,748 - #35 =
INFO  16:11:55,748 - #49 0
INFO  16:11:55,748 - #38 ;
INFO  16:11:55,748 - #48 for
INFO  16:11:55,748 - #42 (
INFO  16:11:55,748 - #48 int
INFO  16:11:55,748 - #48 i
INFO  16:11:55,748 - #35 =
INFO  16:11:55,748 - #49 0
INFO  16:11:55,749 - #38 ;
INFO  16:11:55,749 - #48 i
INFO  16:11:55,749 - #31 <
INFO  16:11:55,749 - #48 array
INFO  16:11:55,749 - #41 .
INFO  16:11:55,749 - #48 length
INFO  16:11:55,749 - #38 ;
INFO  16:11:55,749 - #48 i
INFO  16:11:55,749 - #36 ++
INFO  16:11:55,749 - #43 )
INFO  16:11:55,749 - #46 {
INFO  16:11:55,749 - #48 sum
INFO  16:11:55,749 - #35 =
INFO  16:11:55,749 - #48 sum
INFO  16:11:55,750 - #22 +
INFO  16:11:55,750 - #48 array
INFO  16:11:55,750 - #44 [
INFO  16:11:55,750 - #48 i
INFO  16:11:55,756 - #45 ]
INFO  16:11:55,756 - #38 ;
INFO  16:11:55,756 - #47 }
INFO  16:11:55,756 - #14 return
INFO  16:11:55,756 - #48 sum
INFO  16:11:55,756 - #38 ;
INFO  16:11:55,756 - #47 }
INFO  16:11:55,757 - #48 int
INFO  16:11:55,757 - #48 main
INFO  16:11:55,757 - #42 (
INFO  16:11:55,757 - #43 )
INFO  16:11:55,757 - #46 {
INFO  16:11:55,757 - #48 b
INFO  16:11:55,757 - #35 =
INFO  16:11:55,758 - #51 false
INFO  16:11:55,758 - #38 ;
INFO  16:11:55,758 - #48 int
INFO  16:11:55,758 - #48 cnt
INFO  16:11:55,758 - #35 =
INFO  16:11:55,758 - #49 0
INFO  16:11:55,759 - #38 ;
INFO  16:11:55,759 - #9 do
INFO  16:11:55,759 - #46 {
INFO  16:11:55,759 - #8 if
INFO  16:11:55,759 - #42 (
INFO  16:11:55,759 - #48 cnt
INFO  16:11:55,759 - #26 %
INFO  16:11:55,759 - #49 2
INFO  16:11:55,759 - #27 ==
INFO  16:11:55,760 - #49 0
INFO  16:11:55,760 - #43 )
INFO  16:11:55,760 - #46 {
INFO  16:11:55,760 - #48 array
INFO  16:11:55,760 - #44 [
INFO  16:11:55,760 - #48 cnt
INFO  16:11:55,760 - #45 ]
INFO  16:11:55,760 - #35 =
INFO  16:11:55,760 - #48 x
INFO  16:11:55,761 - #36 ++
INFO  16:11:55,761 - #38 ;
INFO  16:11:55,761 - #47 }
INFO  16:11:55,761 - #6 else
INFO  16:11:55,761 - #46 {
INFO  16:11:55,761 - #48 array
INFO  16:11:55,762 - #44 [
INFO  16:11:55,762 - #48 cnt
INFO  16:11:55,762 - #45 ]
INFO  16:11:55,762 - #35 =
INFO  16:11:55,762 - #48 y
INFO  16:11:55,762 - #36 ++
INFO  16:11:55,762 - #38 ;
INFO  16:11:55,763 - #47 }
INFO  16:11:55,763 - #48 int
INFO  16:11:55,763 - #48 sum
INFO  16:11:55,763 - #35 =
INFO  16:11:55,763 - #48 sumOfArray
INFO  16:11:55,763 - #42 (
INFO  16:11:55,763 - #48 array
INFO  16:11:55,764 - #43 )
INFO  16:11:55,764 - #38 ;
INFO  16:11:55,764 - #8 if
INFO  16:11:55,764 - #42 (
INFO  16:11:55,764 - #48 sum
INFO  16:11:55,764 - #29 >
INFO  16:11:55,764 - #49 100
INFO  16:11:55,764 - #43 )
INFO  16:11:55,764 - #46 {
INFO  16:11:55,764 - #48 b
INFO  16:11:55,765 - #35 =
INFO  16:11:55,765 - #51 true
INFO  16:11:55,765 - #38 ;
INFO  16:11:55,765 - #47 }
INFO  16:11:55,765 - #48 cnt
INFO  16:11:55,765 - #36 ++
INFO  16:11:55,765 - #38 ;
INFO  16:11:55,765 - #8 if
INFO  16:11:55,765 - #42 (
INFO  16:11:55,766 - #48 cnt
INFO  16:11:55,766 - #27 ==
INFO  16:11:55,766 - #48 MAX
INFO  16:11:55,766 - #43 )
INFO  16:11:55,766 - #46 {
INFO  16:11:55,766 - #12 print
INFO  16:11:55,766 - #42 (
INFO  16:11:55,767 - #48 Exceeded
INFO  16:11:55,767 - #48 limit
INFO  16:11:55,767 - #43 )
INFO  16:11:55,767 - #38 ;
INFO  16:11:55,767 - #48 b
INFO  16:11:55,768 - #35 =
INFO  16:11:55,768 - #51 true
INFO  16:11:55,768 - #38 ;
INFO  16:11:55,768 - #47 }
INFO  16:11:55,768 - #47 }
INFO  16:11:55,769 - #10 while
INFO  16:11:55,769 - #42 (
INFO  16:11:55,769 - #48 b
INFO  16:11:55,769 - #27 ==
INFO  16:11:55,769 - #51 false
INFO  16:11:55,769 - #43 )
INFO  16:11:55,769 - #38 ;
INFO  16:11:55,770 - #14 return
INFO  16:11:55,770 - #49 0
INFO  16:11:55,770 - #38 ;
INFO  16:11:55,770 - #47 }
INFO  16:11:55,770 - #47 }
