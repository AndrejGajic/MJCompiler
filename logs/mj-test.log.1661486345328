INFO  04:29:48,422 - Starting compilation of a file test/test4.mj
INFO  04:29:48,422 - Starting lexical analysis....
INFO  04:29:48,430 - Lexical analysis finished successfully!
INFO  04:29:48,430 - =========================================
INFO  04:29:48,430 - Starting syntax analysis....
INFO  04:29:48,716 - #2 program
INFO  04:29:48,720 - #48 Test4
INFO  04:29:48,720 - #7 const
INFO  04:29:48,722 - #48 int
INFO  04:29:48,723 - #48 N
INFO  04:29:48,726 - #35 =
INFO  04:29:48,726 - #49 50
INFO  04:29:48,726 - #38 ;
INFO  04:29:48,728 - #48 int
INFO  04:29:48,729 - #48 x
INFO  04:29:48,729 - #40 ,
INFO  04:29:48,733 - #48 y
INFO  04:29:48,734 - #40 ,
INFO  04:29:48,734 - #48 arr
INFO  04:29:48,734 - #44 [
INFO  04:29:48,739 - #45 ]
INFO  04:29:48,739 - #38 ;
INFO  04:29:48,740 - #46 {
INFO  04:29:48,740 - #48 int
INFO  04:29:48,742 - #48 sum
INFO  04:29:48,742 - #42 (
INFO  04:29:48,744 - #48 int
INFO  04:29:48,744 - #48 a
INFO  04:29:48,744 - #35 =
INFO  04:29:48,744 - #49 5
INFO  04:29:48,744 - #40 ,
INFO  04:29:48,745 - #48 int
INFO  04:29:48,745 - #48 b
INFO  04:29:48,745 - #35 =
INFO  04:29:48,745 - #49 10
INFO  04:29:48,745 - #43 )
INFO  04:29:48,745 - #46 {
INFO  04:29:48,747 - #14 return
INFO  04:29:48,749 - #48 a
INFO  04:29:48,752 - #22 +
INFO  04:29:48,753 - #48 b
INFO  04:29:48,756 - #38 ;
INFO  04:29:48,758 - #47 }
INFO  04:29:48,759 - #15 void
INFO  04:29:48,760 - #48 main
INFO  04:29:48,761 - #42 (
INFO  04:29:48,761 - #43 )
INFO  04:29:48,763 - #46 {
INFO  04:29:48,763 - #48 x
INFO  04:29:48,763 - #35 =
INFO  04:29:48,763 - #48 sum
INFO  04:29:48,766 - #42 (
INFO  04:29:48,766 - #49 1
INFO  04:29:48,767 - #43 )
INFO  04:29:48,769 - #38 ;
INFO  04:29:48,769 - #12 print
INFO  04:29:48,769 - #42 (
INFO  04:29:48,769 - #48 x
INFO  04:29:48,769 - #43 )
INFO  04:29:48,771 - #38 ;
INFO  04:29:48,771 - #47 }
INFO  04:29:48,771 - #47 }
INFO  04:29:48,784 - Syntax analysis finished successfully!
INFO  04:29:48,788 - Syntax tree: 
INFO  04:29:48,790 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               a
                NumConstClass(
                  NumberConstant(
                   5
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         1
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [SingleActualParameter]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:29:48,799 - =========================================
INFO  04:29:48,799 - Starting semantic analysis....
INFO  04:29:48,841 - Constant N declared  at line 2
INFO  04:29:48,841 - Global variable x declared at line 3
INFO  04:29:48,841 - Global variable y declared at line 3
INFO  04:29:48,841 - Global array arr[] declared at line 3
INFO  04:29:48,842 - Function sum is being parsed  at line 6
INFO  04:29:48,859 - Default parameter a declared at line 6
INFO  04:29:48,859 - Default parameter b declared at line 6
INFO  04:29:48,859 - Function parameter a accessed at line 7
INFO  04:29:48,859 - Function parameter b accessed at line 7
INFO  04:29:48,859 - Function main is being parsed  at line 10
INFO  04:29:48,860 - Global variable x accessed at line 11
INFO  04:29:48,860 - Function sum is called at line 11
INFO  04:29:48,860 - Global variable x accessed at line 12
INFO  04:29:48,860 - Semantic analysis completed.
INFO  04:29:48,860 - Semantic analysis finished successfully!
INFO  04:29:48,860 - Symbol table: 
INFO  04:29:48,861 - =========================================
INFO  04:29:48,861 - Started generating code....
INFO  04:30:54,378 - Starting compilation of a file test/test4.mj
INFO  04:30:54,379 - Starting lexical analysis....
INFO  04:30:54,398 - Lexical analysis finished successfully!
INFO  04:30:54,398 - =========================================
INFO  04:30:54,398 - Starting syntax analysis....
INFO  04:30:54,583 - #2 program
INFO  04:30:54,583 - #48 Test4
INFO  04:30:54,583 - #7 const
INFO  04:30:54,584 - #48 int
INFO  04:30:54,584 - #48 N
INFO  04:30:54,586 - #35 =
INFO  04:30:54,586 - #49 50
INFO  04:30:54,586 - #38 ;
INFO  04:30:54,587 - #48 int
INFO  04:30:54,588 - #48 x
INFO  04:30:54,588 - #40 ,
INFO  04:30:54,590 - #48 y
INFO  04:30:54,591 - #40 ,
INFO  04:30:54,591 - #48 arr
INFO  04:30:54,591 - #44 [
INFO  04:30:54,591 - #45 ]
INFO  04:30:54,591 - #38 ;
INFO  04:30:54,593 - #46 {
INFO  04:30:54,594 - #48 int
INFO  04:30:54,595 - #48 sum
INFO  04:30:54,595 - #42 (
INFO  04:30:54,597 - #48 int
INFO  04:30:54,597 - #48 a
INFO  04:30:54,597 - #35 =
INFO  04:30:54,598 - #49 5
INFO  04:30:54,598 - #40 ,
INFO  04:30:54,598 - #48 int
INFO  04:30:54,598 - #48 b
INFO  04:30:54,598 - #35 =
INFO  04:30:54,599 - #49 10
INFO  04:30:54,599 - #43 )
INFO  04:30:54,599 - #46 {
INFO  04:30:54,600 - #14 return
INFO  04:30:54,601 - #48 a
INFO  04:30:54,604 - #22 +
INFO  04:30:54,606 - #48 b
INFO  04:30:54,609 - #38 ;
INFO  04:30:54,611 - #47 }
INFO  04:30:54,612 - #15 void
INFO  04:30:54,613 - #48 main
INFO  04:30:54,614 - #42 (
INFO  04:30:54,615 - #43 )
INFO  04:30:54,616 - #46 {
INFO  04:30:54,616 - #48 x
INFO  04:30:54,616 - #35 =
INFO  04:30:54,616 - #48 sum
INFO  04:30:54,620 - #42 (
INFO  04:30:54,620 - #49 1
INFO  04:30:54,620 - #43 )
INFO  04:30:54,621 - #38 ;
INFO  04:30:54,622 - #12 print
INFO  04:30:54,622 - #42 (
INFO  04:30:54,622 - #48 x
INFO  04:30:54,623 - #43 )
INFO  04:30:54,624 - #38 ;
INFO  04:30:54,624 - #47 }
INFO  04:30:54,625 - #47 }
INFO  04:30:54,628 - Syntax analysis finished successfully!
INFO  04:30:54,628 - Syntax tree: 
INFO  04:30:54,633 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               a
                NumConstClass(
                  NumberConstant(
                   5
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         1
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [SingleActualParameter]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:30:54,633 - =========================================
INFO  04:30:54,633 - Starting semantic analysis....
INFO  04:30:54,666 - Constant N declared  at line 2
INFO  04:30:54,667 - Global variable x declared at line 3
INFO  04:30:54,667 - Global variable y declared at line 3
INFO  04:30:54,667 - Global array arr[] declared at line 3
INFO  04:30:54,667 - Function sum is being parsed  at line 6
INFO  04:30:54,669 - Default parameter a declared at line 6
INFO  04:30:54,669 - Default parameter b declared at line 6
INFO  04:30:54,669 - Function parameter a accessed at line 7
INFO  04:30:54,669 - Function parameter b accessed at line 7
INFO  04:30:54,670 - Function main is being parsed  at line 10
INFO  04:30:54,670 - Global variable x accessed at line 11
INFO  04:30:54,670 - Function sum is called at line 11
INFO  04:30:54,671 - Global variable x accessed at line 12
INFO  04:30:54,671 - Semantic analysis completed.
INFO  04:30:54,671 - Semantic analysis finished successfully!
INFO  04:30:54,671 - Symbol table: 
INFO  04:30:54,673 - =========================================
INFO  04:30:54,673 - Started generating code....
INFO  04:30:54,692 - Code generated successfully!
INFO  04:30:54,692 - Compiling file successfully completed!
INFO  04:31:09,475 - Starting compilation of a file test/test4.mj
INFO  04:31:09,475 - Starting lexical analysis....
INFO  04:31:09,479 - Lexical analysis finished successfully!
INFO  04:31:09,480 - =========================================
INFO  04:31:09,480 - Starting syntax analysis....
INFO  04:31:09,594 - #2 program
INFO  04:31:09,595 - #48 Test4
INFO  04:31:09,595 - #7 const
INFO  04:31:09,597 - #48 int
INFO  04:31:09,597 - #48 N
INFO  04:31:09,599 - #35 =
INFO  04:31:09,600 - #49 50
INFO  04:31:09,600 - #38 ;
INFO  04:31:09,601 - #48 int
INFO  04:31:09,602 - #48 x
INFO  04:31:09,602 - #40 ,
INFO  04:31:09,603 - #48 y
INFO  04:31:09,604 - #40 ,
INFO  04:31:09,604 - #48 arr
INFO  04:31:09,604 - #44 [
INFO  04:31:09,604 - #45 ]
INFO  04:31:09,604 - #38 ;
INFO  04:31:09,605 - #46 {
INFO  04:31:09,606 - #48 int
INFO  04:31:09,607 - #48 sum
INFO  04:31:09,607 - #42 (
INFO  04:31:09,608 - #48 int
INFO  04:31:09,608 - #48 a
INFO  04:31:09,608 - #35 =
INFO  04:31:09,609 - #49 5
INFO  04:31:09,609 - #40 ,
INFO  04:31:09,609 - #48 int
INFO  04:31:09,609 - #48 b
INFO  04:31:09,609 - #35 =
INFO  04:31:09,609 - #49 10
INFO  04:31:09,609 - #43 )
INFO  04:31:09,610 - #46 {
INFO  04:31:09,610 - #14 return
INFO  04:31:09,612 - #48 a
INFO  04:31:09,614 - #22 +
INFO  04:31:09,615 - #48 b
INFO  04:31:09,617 - #38 ;
INFO  04:31:09,619 - #47 }
INFO  04:31:09,620 - #15 void
INFO  04:31:09,621 - #48 main
INFO  04:31:09,622 - #42 (
INFO  04:31:09,622 - #43 )
INFO  04:31:09,623 - #46 {
INFO  04:31:09,623 - #48 x
INFO  04:31:09,623 - #35 =
INFO  04:31:09,623 - #48 sum
INFO  04:31:09,624 - #42 (
INFO  04:31:09,625 - #43 )
INFO  04:31:09,626 - #38 ;
INFO  04:31:09,626 - #12 print
INFO  04:31:09,626 - #42 (
INFO  04:31:09,626 - #48 x
INFO  04:31:09,626 - #43 )
INFO  04:31:09,628 - #38 ;
INFO  04:31:09,628 - #47 }
INFO  04:31:09,628 - #47 }
INFO  04:31:09,630 - Syntax analysis finished successfully!
INFO  04:31:09,630 - Syntax tree: 
INFO  04:31:09,631 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               a
                NumConstClass(
                  NumberConstant(
                   5
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallNoArguments(
                            ) [FunctionCallNoArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:31:09,633 - =========================================
INFO  04:31:09,633 - Starting semantic analysis....
INFO  04:31:09,658 - Constant N declared  at line 2
INFO  04:31:09,663 - Global variable x declared at line 3
INFO  04:31:09,663 - Global variable y declared at line 3
INFO  04:31:09,663 - Global array arr[] declared at line 3
INFO  04:31:09,663 - Function sum is being parsed  at line 6
INFO  04:31:09,665 - Default parameter a declared at line 6
INFO  04:31:09,665 - Default parameter b declared at line 6
INFO  04:31:09,665 - Function parameter a accessed at line 7
INFO  04:31:09,665 - Function parameter b accessed at line 7
INFO  04:31:09,666 - Function main is being parsed  at line 10
INFO  04:31:09,666 - Global variable x accessed at line 11
INFO  04:31:09,666 - Function sum is called at line 11
INFO  04:31:09,666 - Global variable x accessed at line 12
INFO  04:31:09,666 - Semantic analysis completed.
INFO  04:31:09,666 - Semantic analysis finished successfully!
INFO  04:31:09,667 - Symbol table: 
INFO  04:31:09,669 - =========================================
INFO  04:31:09,669 - Started generating code....
INFO  04:31:09,681 - Code generated successfully!
INFO  04:31:09,682 - Compiling file successfully completed!
INFO  04:31:24,260 - Starting compilation of a file test/test4.mj
INFO  04:31:24,261 - Starting lexical analysis....
INFO  04:31:24,267 - Lexical analysis finished successfully!
INFO  04:31:24,267 - =========================================
INFO  04:31:24,267 - Starting syntax analysis....
INFO  04:31:24,409 - #2 program
INFO  04:31:24,409 - #48 Test4
INFO  04:31:24,409 - #7 const
INFO  04:31:24,411 - #48 int
INFO  04:31:24,411 - #48 N
INFO  04:31:24,412 - #35 =
INFO  04:31:24,412 - #49 50
INFO  04:31:24,412 - #38 ;
INFO  04:31:24,413 - #48 int
INFO  04:31:24,413 - #48 x
INFO  04:31:24,413 - #40 ,
INFO  04:31:24,415 - #48 y
INFO  04:31:24,415 - #40 ,
INFO  04:31:24,416 - #48 arr
INFO  04:31:24,416 - #44 [
INFO  04:31:24,416 - #45 ]
INFO  04:31:24,416 - #38 ;
INFO  04:31:24,418 - #46 {
INFO  04:31:24,418 - #48 int
INFO  04:31:24,420 - #48 sum
INFO  04:31:24,420 - #42 (
INFO  04:31:24,421 - #48 int
INFO  04:31:24,421 - #48 a
INFO  04:31:24,421 - #35 =
INFO  04:31:24,422 - #49 5
INFO  04:31:24,422 - #40 ,
INFO  04:31:24,422 - #48 int
INFO  04:31:24,422 - #48 b
INFO  04:31:24,422 - #35 =
INFO  04:31:24,422 - #49 10
INFO  04:31:24,422 - #43 )
INFO  04:31:24,423 - #46 {
INFO  04:31:24,424 - #14 return
INFO  04:31:24,425 - #48 a
INFO  04:31:24,427 - #22 +
INFO  04:31:24,428 - #48 b
INFO  04:31:24,430 - #38 ;
INFO  04:31:24,431 - #47 }
INFO  04:31:24,432 - #15 void
INFO  04:31:24,432 - #48 main
INFO  04:31:24,433 - #42 (
INFO  04:31:24,433 - #43 )
INFO  04:31:24,434 - #46 {
INFO  04:31:24,435 - #48 x
INFO  04:31:24,435 - #35 =
INFO  04:31:24,435 - #48 sum
INFO  04:31:24,439 - #42 (
INFO  04:31:24,439 - #49 30
INFO  04:31:24,440 - #40 ,
INFO  04:31:24,440 - #49 50
INFO  04:31:24,440 - #43 )
INFO  04:31:24,441 - #38 ;
INFO  04:31:24,441 - #12 print
INFO  04:31:24,442 - #42 (
INFO  04:31:24,442 - #48 x
INFO  04:31:24,442 - #43 )
INFO  04:31:24,443 - #38 ;
INFO  04:31:24,443 - #47 }
INFO  04:31:24,444 - #47 }
INFO  04:31:24,446 - Syntax analysis finished successfully!
INFO  04:31:24,447 - Syntax tree: 
INFO  04:31:24,448 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               a
                NumConstClass(
                  NumberConstant(
                   5
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              MultipleActualParameters(
                                SingleActualParameter(
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           30
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                  ) [Expr]
                                ) [SingleActualParameter]
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         50
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [MultipleActualParameters]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:31:24,449 - =========================================
INFO  04:31:24,454 - Starting semantic analysis....
INFO  04:31:24,489 - Constant N declared  at line 2
INFO  04:31:24,489 - Global variable x declared at line 3
INFO  04:31:24,489 - Global variable y declared at line 3
INFO  04:31:24,489 - Global array arr[] declared at line 3
INFO  04:31:24,489 - Function sum is being parsed  at line 6
INFO  04:31:24,490 - Default parameter a declared at line 6
INFO  04:31:24,490 - Default parameter b declared at line 6
INFO  04:31:24,490 - Function parameter a accessed at line 7
INFO  04:31:24,490 - Function parameter b accessed at line 7
INFO  04:31:24,491 - Function main is being parsed  at line 10
INFO  04:31:24,491 - Global variable x accessed at line 11
INFO  04:31:24,491 - Function sum is called at line 11
INFO  04:31:24,491 - Global variable x accessed at line 12
INFO  04:31:24,491 - Semantic analysis completed.
INFO  04:31:24,491 - Semantic analysis finished successfully!
INFO  04:31:24,491 - Symbol table: 
INFO  04:31:24,492 - =========================================
INFO  04:31:24,492 - Started generating code....
INFO  04:31:24,502 - Code generated successfully!
INFO  04:31:24,502 - Compiling file successfully completed!
INFO  04:31:40,515 - Starting compilation of a file test/test4.mj
INFO  04:31:40,515 - Starting lexical analysis....
INFO  04:31:40,520 - Lexical analysis finished successfully!
INFO  04:31:40,520 - =========================================
INFO  04:31:40,520 - Starting syntax analysis....
INFO  04:31:40,631 - #2 program
INFO  04:31:40,631 - #48 Test4
INFO  04:31:40,632 - #7 const
INFO  04:31:40,633 - #48 int
INFO  04:31:40,633 - #48 N
INFO  04:31:40,634 - #35 =
INFO  04:31:40,634 - #49 50
INFO  04:31:40,634 - #38 ;
INFO  04:31:40,634 - #48 int
INFO  04:31:40,635 - #48 x
INFO  04:31:40,635 - #40 ,
INFO  04:31:40,638 - #48 y
INFO  04:31:40,638 - #40 ,
INFO  04:31:40,638 - #48 arr
INFO  04:31:40,639 - #44 [
INFO  04:31:40,639 - #45 ]
INFO  04:31:40,639 - #38 ;
INFO  04:31:40,641 - #46 {
INFO  04:31:40,641 - #48 int
INFO  04:31:40,643 - #48 sum
INFO  04:31:40,643 - #42 (
INFO  04:31:40,644 - #48 int
INFO  04:31:40,644 - #48 a
INFO  04:31:40,644 - #40 ,
INFO  04:31:40,644 - #48 int
INFO  04:31:40,644 - #48 b
INFO  04:31:40,644 - #35 =
INFO  04:31:40,645 - #49 10
INFO  04:31:40,645 - #43 )
INFO  04:31:40,645 - #46 {
INFO  04:31:40,646 - #14 return
INFO  04:31:40,647 - #48 a
INFO  04:31:40,649 - #22 +
INFO  04:31:40,649 - #48 b
INFO  04:31:40,652 - #38 ;
INFO  04:31:40,654 - #47 }
INFO  04:31:40,655 - #15 void
INFO  04:31:40,656 - #48 main
INFO  04:31:40,657 - #42 (
INFO  04:31:40,658 - #43 )
INFO  04:31:40,659 - #46 {
INFO  04:31:40,659 - #48 x
INFO  04:31:40,659 - #35 =
INFO  04:31:40,659 - #48 sum
INFO  04:31:40,661 - #42 (
INFO  04:31:40,661 - #49 30
INFO  04:31:40,662 - #40 ,
INFO  04:31:40,662 - #49 50
INFO  04:31:40,662 - #43 )
INFO  04:31:40,663 - #38 ;
INFO  04:31:40,663 - #12 print
INFO  04:31:40,664 - #42 (
INFO  04:31:40,664 - #48 x
INFO  04:31:40,664 - #43 )
INFO  04:31:40,665 - #38 ;
INFO  04:31:40,666 - #47 }
INFO  04:31:40,666 - #47 }
INFO  04:31:40,668 - Syntax analysis finished successfully!
INFO  04:31:40,668 - Syntax tree: 
INFO  04:31:40,670 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          SingleOptionalArgument(
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [SingleOptionalArgument]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              MultipleActualParameters(
                                SingleActualParameter(
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           30
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                  ) [Expr]
                                ) [SingleActualParameter]
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         50
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [MultipleActualParameters]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:31:40,671 - =========================================
INFO  04:31:40,671 - Starting semantic analysis....
INFO  04:31:40,701 - Constant N declared  at line 2
INFO  04:31:40,702 - Global variable x declared at line 3
INFO  04:31:40,702 - Global variable y declared at line 3
INFO  04:31:40,702 - Global array arr[] declared at line 3
INFO  04:31:40,702 - Function sum is being parsed  at line 6
INFO  04:31:40,703 - Local parameter a declared at line 6
INFO  04:31:40,703 - Default parameter b declared at line 6
INFO  04:31:40,704 - Function parameter a accessed at line 7
INFO  04:31:40,704 - Function parameter b accessed at line 7
INFO  04:31:40,704 - Function main is being parsed  at line 10
INFO  04:31:40,704 - Global variable x accessed at line 11
INFO  04:31:40,704 - Function sum is called at line 11
INFO  04:31:40,704 - Global variable x accessed at line 12
INFO  04:31:40,704 - Semantic analysis completed.
INFO  04:31:40,704 - Semantic analysis finished successfully!
INFO  04:31:40,704 - Symbol table: 
INFO  04:31:40,705 - =========================================
INFO  04:31:40,705 - Started generating code....
INFO  04:31:40,712 - Code generated successfully!
INFO  04:31:40,712 - Compiling file successfully completed!
INFO  04:32:01,477 - Starting compilation of a file test/test4.mj
INFO  04:32:01,478 - Starting lexical analysis....
INFO  04:32:01,483 - Lexical analysis finished successfully!
INFO  04:32:01,483 - =========================================
INFO  04:32:01,483 - Starting syntax analysis....
INFO  04:32:01,601 - #2 program
INFO  04:32:01,601 - #48 Test4
INFO  04:32:01,601 - #7 const
INFO  04:32:01,603 - #48 int
INFO  04:32:01,603 - #48 N
INFO  04:32:01,604 - #35 =
INFO  04:32:01,604 - #49 50
INFO  04:32:01,604 - #38 ;
INFO  04:32:01,604 - #48 int
INFO  04:32:01,605 - #48 x
INFO  04:32:01,605 - #40 ,
INFO  04:32:01,606 - #48 y
INFO  04:32:01,607 - #40 ,
INFO  04:32:01,607 - #48 arr
INFO  04:32:01,607 - #44 [
INFO  04:32:01,607 - #45 ]
INFO  04:32:01,607 - #38 ;
INFO  04:32:01,608 - #46 {
INFO  04:32:01,609 - #48 int
INFO  04:32:01,611 - #48 sum
INFO  04:32:01,611 - #42 (
INFO  04:32:01,612 - #48 int
INFO  04:32:01,613 - #48 a
INFO  04:32:01,613 - #40 ,
INFO  04:32:01,613 - #48 int
INFO  04:32:01,613 - #48 b
INFO  04:32:01,613 - #35 =
INFO  04:32:01,613 - #49 10
INFO  04:32:01,613 - #43 )
INFO  04:32:01,614 - #46 {
INFO  04:32:01,615 - #14 return
INFO  04:32:01,616 - #48 a
INFO  04:32:01,621 - #22 +
INFO  04:32:01,622 - #48 b
INFO  04:32:01,624 - #38 ;
INFO  04:32:01,626 - #47 }
INFO  04:32:01,626 - #15 void
INFO  04:32:01,627 - #48 main
INFO  04:32:01,628 - #42 (
INFO  04:32:01,628 - #43 )
INFO  04:32:01,630 - #46 {
INFO  04:32:01,630 - #48 x
INFO  04:32:01,630 - #35 =
INFO  04:32:01,630 - #48 sum
INFO  04:32:01,632 - #42 (
INFO  04:32:01,632 - #49 30
INFO  04:32:01,632 - #43 )
INFO  04:32:01,633 - #38 ;
INFO  04:32:01,636 - #12 print
INFO  04:32:01,637 - #42 (
INFO  04:32:01,637 - #48 x
INFO  04:32:01,637 - #43 )
INFO  04:32:01,639 - #38 ;
INFO  04:32:01,639 - #47 }
INFO  04:32:01,639 - #47 }
INFO  04:32:01,641 - Syntax analysis finished successfully!
INFO  04:32:01,641 - Syntax tree: 
INFO  04:32:01,643 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          SingleOptionalArgument(
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [SingleOptionalArgument]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         30
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [SingleActualParameter]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:32:01,645 - =========================================
INFO  04:32:01,645 - Starting semantic analysis....
INFO  04:32:01,681 - Constant N declared  at line 2
INFO  04:32:01,681 - Global variable x declared at line 3
INFO  04:32:01,689 - Global variable y declared at line 3
INFO  04:32:01,689 - Global array arr[] declared at line 3
INFO  04:32:01,689 - Function sum is being parsed  at line 6
INFO  04:32:01,691 - Local parameter a declared at line 6
INFO  04:32:01,691 - Default parameter b declared at line 6
INFO  04:32:01,692 - Function parameter a accessed at line 7
INFO  04:32:01,692 - Function parameter b accessed at line 7
INFO  04:32:01,692 - Function main is being parsed  at line 10
INFO  04:32:01,692 - Global variable x accessed at line 11
INFO  04:32:01,692 - Function sum is called at line 11
INFO  04:32:01,692 - Global variable x accessed at line 12
INFO  04:32:01,693 - Semantic analysis completed.
INFO  04:32:01,693 - Semantic analysis finished successfully!
INFO  04:32:01,693 - Symbol table: 
INFO  04:32:01,694 - =========================================
INFO  04:32:01,694 - Started generating code....
INFO  04:32:01,706 - Code generated successfully!
INFO  04:32:01,706 - Compiling file successfully completed!
INFO  04:32:19,038 - Starting compilation of a file test/test4.mj
INFO  04:32:19,039 - Starting lexical analysis....
INFO  04:32:19,042 - Lexical analysis finished successfully!
INFO  04:32:19,042 - =========================================
INFO  04:32:19,042 - Starting syntax analysis....
INFO  04:32:19,163 - #2 program
INFO  04:32:19,164 - #48 Test4
INFO  04:32:19,164 - #7 const
INFO  04:32:19,165 - #48 int
INFO  04:32:19,165 - #48 N
INFO  04:32:19,166 - #35 =
INFO  04:32:19,166 - #49 50
INFO  04:32:19,166 - #38 ;
INFO  04:32:19,167 - #48 int
INFO  04:32:19,167 - #48 x
INFO  04:32:19,167 - #40 ,
INFO  04:32:19,170 - #48 y
INFO  04:32:19,170 - #40 ,
INFO  04:32:19,170 - #48 arr
INFO  04:32:19,170 - #44 [
INFO  04:32:19,170 - #45 ]
INFO  04:32:19,170 - #38 ;
INFO  04:32:19,171 - #46 {
INFO  04:32:19,172 - #48 int
INFO  04:32:19,173 - #48 sum
INFO  04:32:19,174 - #42 (
INFO  04:32:19,175 - #48 int
INFO  04:32:19,175 - #48 a
INFO  04:32:19,175 - #40 ,
INFO  04:32:19,175 - #48 int
INFO  04:32:19,175 - #48 b
INFO  04:32:19,176 - #35 =
INFO  04:32:19,176 - #49 10
INFO  04:32:19,176 - #43 )
INFO  04:32:19,176 - #46 {
INFO  04:32:19,177 - #14 return
INFO  04:32:19,178 - #48 a
INFO  04:32:19,180 - #22 +
INFO  04:32:19,181 - #48 b
INFO  04:32:19,182 - #38 ;
INFO  04:32:19,184 - #47 }
INFO  04:32:19,184 - #15 void
INFO  04:32:19,184 - #48 main
INFO  04:32:19,185 - #42 (
INFO  04:32:19,186 - #43 )
INFO  04:32:19,187 - #46 {
INFO  04:32:19,187 - #48 x
INFO  04:32:19,187 - #35 =
INFO  04:32:19,187 - #48 sum
INFO  04:32:19,189 - #42 (
INFO  04:32:19,189 - #43 )
INFO  04:32:19,190 - #38 ;
INFO  04:32:19,190 - #12 print
INFO  04:32:19,191 - #42 (
INFO  04:32:19,191 - #48 x
INFO  04:32:19,191 - #43 )
INFO  04:32:19,192 - #38 ;
INFO  04:32:19,192 - #47 }
INFO  04:32:19,192 - #47 }
INFO  04:32:19,193 - Syntax analysis finished successfully!
INFO  04:32:19,194 - Syntax tree: 
INFO  04:32:19,195 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          SingleOptionalArgument(
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [SingleOptionalArgument]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallNoArguments(
                            ) [FunctionCallNoArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:32:19,195 - =========================================
INFO  04:32:19,196 - Starting semantic analysis....
INFO  04:32:19,225 - Constant N declared  at line 2
INFO  04:32:19,226 - Global variable x declared at line 3
INFO  04:32:19,226 - Global variable y declared at line 3
INFO  04:32:19,231 - Global array arr[] declared at line 3
INFO  04:32:19,231 - Function sum is being parsed  at line 6
INFO  04:32:19,232 - Local parameter a declared at line 6
INFO  04:32:19,232 - Default parameter b declared at line 6
INFO  04:32:19,232 - Function parameter a accessed at line 7
INFO  04:32:19,232 - Function parameter b accessed at line 7
INFO  04:32:19,232 - Function main is being parsed  at line 10
INFO  04:32:19,232 - Global variable x accessed at line 11
INFO  04:32:19,232 - Error! Calling function sum with too few arguments at line 11
INFO  04:32:19,232 - Error! Assignment operation can be done between compatibile types only at line 11
INFO  04:32:19,233 - Global variable x accessed at line 12
INFO  04:32:19,233 - Semantic analysis completed.
ERROR 04:32:19,233 - An error occured in semantic analysis!
INFO  04:33:57,370 - Starting compilation of a file test/test4.mj
INFO  04:33:57,370 - Starting lexical analysis....
INFO  04:33:57,384 - Lexical analysis finished successfully!
INFO  04:33:57,384 - =========================================
INFO  04:33:57,385 - Starting syntax analysis....
INFO  04:33:57,508 - #2 program
INFO  04:33:57,508 - #48 Test4
INFO  04:33:57,509 - #7 const
INFO  04:33:57,510 - #48 int
INFO  04:33:57,510 - #48 N
INFO  04:33:57,511 - #35 =
INFO  04:33:57,511 - #49 50
INFO  04:33:57,511 - #38 ;
INFO  04:33:57,512 - #48 int
INFO  04:33:57,512 - #48 x
INFO  04:33:57,513 - #40 ,
INFO  04:33:57,514 - #48 y
INFO  04:33:57,514 - #40 ,
INFO  04:33:57,515 - #48 arr
INFO  04:33:57,515 - #44 [
INFO  04:33:57,515 - #45 ]
INFO  04:33:57,515 - #38 ;
INFO  04:33:57,516 - #46 {
INFO  04:33:57,516 - #48 int
INFO  04:33:57,518 - #48 sum
INFO  04:33:57,518 - #42 (
INFO  04:33:57,519 - #48 int
INFO  04:33:57,520 - #48 a
INFO  04:33:57,520 - #40 ,
INFO  04:33:57,520 - #48 int
INFO  04:33:57,520 - #48 b
INFO  04:33:57,520 - #35 =
INFO  04:33:57,520 - #49 10
INFO  04:33:57,520 - #43 )
INFO  04:33:57,521 - #46 {
INFO  04:33:57,521 - #14 return
INFO  04:33:57,522 - #48 a
INFO  04:33:57,525 - #22 +
INFO  04:33:57,526 - #48 b
INFO  04:33:57,529 - #38 ;
INFO  04:33:57,531 - #47 }
INFO  04:33:57,532 - #15 void
INFO  04:33:57,533 - #48 main
INFO  04:33:57,534 - #42 (
INFO  04:33:57,534 - #43 )
INFO  04:33:57,535 - #46 {
INFO  04:33:57,535 - #48 x
INFO  04:33:57,535 - #35 =
INFO  04:33:57,536 - #48 sum
INFO  04:33:57,538 - #42 (
INFO  04:33:57,538 - #49 1
INFO  04:33:57,539 - #43 )
INFO  04:33:57,539 - #38 ;
INFO  04:33:57,541 - #12 print
INFO  04:33:57,541 - #42 (
INFO  04:33:57,541 - #48 x
INFO  04:33:57,541 - #43 )
INFO  04:33:57,542 - #38 ;
INFO  04:33:57,543 - #47 }
INFO  04:33:57,543 - #47 }
INFO  04:33:57,545 - Syntax analysis finished successfully!
INFO  04:33:57,545 - Syntax tree: 
INFO  04:33:57,547 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          SingleOptionalArgument(
            OptionalArgument(
              Type(
               int
              ) [Type]
             b
              NumConstClass(
                NumberConstant(
                 10
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [SingleOptionalArgument]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         1
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [SingleActualParameter]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:33:57,548 - =========================================
INFO  04:33:57,548 - Starting semantic analysis....
INFO  04:33:57,574 - Constant N declared  at line 2
INFO  04:33:57,574 - Global variable x declared at line 3
INFO  04:33:57,578 - Global variable y declared at line 3
INFO  04:33:57,578 - Global array arr[] declared at line 3
INFO  04:33:57,578 - Function sum is being parsed  at line 6
INFO  04:33:57,579 - Local parameter a declared at line 6
INFO  04:33:57,579 - Default parameter b declared at line 6
INFO  04:33:57,579 - Function parameter a accessed at line 7
INFO  04:33:57,579 - Function parameter b accessed at line 7
INFO  04:33:57,579 - Function main is being parsed  at line 10
INFO  04:33:57,579 - Global variable x accessed at line 11
INFO  04:33:57,580 - Function sum is called at line 11
INFO  04:33:57,580 - Global variable x accessed at line 12
INFO  04:33:57,580 - Semantic analysis completed.
INFO  04:33:57,580 - Semantic analysis finished successfully!
INFO  04:33:57,580 - Symbol table: 
INFO  04:33:57,581 - =========================================
INFO  04:33:57,581 - Started generating code....
INFO  04:33:57,588 - Code generated successfully!
INFO  04:33:57,588 - Compiling file successfully completed!
INFO  04:34:30,583 - Starting compilation of a file test/test4.mj
INFO  04:34:30,583 - Starting lexical analysis....
INFO  04:34:30,586 - Lexical analysis finished successfully!
INFO  04:34:30,586 - =========================================
INFO  04:34:30,586 - Starting syntax analysis....
INFO  04:34:30,710 - #2 program
INFO  04:34:30,710 - #48 Test4
INFO  04:34:30,711 - #7 const
INFO  04:34:30,712 - #48 int
INFO  04:34:30,712 - #48 N
INFO  04:34:30,713 - #35 =
INFO  04:34:30,713 - #49 50
INFO  04:34:30,713 - #38 ;
INFO  04:34:30,714 - #48 int
INFO  04:34:30,714 - #48 x
INFO  04:34:30,714 - #40 ,
INFO  04:34:30,716 - #48 y
INFO  04:34:30,717 - #40 ,
INFO  04:34:30,717 - #48 arr
INFO  04:34:30,717 - #44 [
INFO  04:34:30,717 - #45 ]
INFO  04:34:30,717 - #38 ;
INFO  04:34:30,719 - #46 {
INFO  04:34:30,720 - #48 int
INFO  04:34:30,721 - #48 sum
INFO  04:34:30,721 - #42 (
INFO  04:34:30,722 - #48 int
INFO  04:34:30,723 - #48 a
INFO  04:34:30,723 - #40 ,
INFO  04:34:30,723 - #48 int
INFO  04:34:30,724 - #48 b
INFO  04:34:30,724 - #35 =
INFO  04:34:30,724 - #49 10
INFO  04:34:30,724 - #40 ,
INFO  04:34:30,724 - #48 char
INFO  04:34:30,724 - #48 c
INFO  04:34:30,724 - #35 =
INFO  04:34:30,725 - #50 a
INFO  04:34:30,725 - #43 )
INFO  04:34:30,726 - #46 {
INFO  04:34:30,728 - #12 print
INFO  04:34:30,729 - #42 (
INFO  04:34:30,729 - #48 c
INFO  04:34:30,732 - #43 )
INFO  04:34:30,734 - #38 ;
INFO  04:34:30,735 - #14 return
INFO  04:34:30,735 - #48 a
INFO  04:34:30,735 - #22 +
INFO  04:34:30,735 - #48 b
INFO  04:34:30,740 - #38 ;
INFO  04:34:30,740 - #47 }
INFO  04:34:30,741 - #15 void
INFO  04:34:30,741 - #48 main
INFO  04:34:30,742 - #42 (
INFO  04:34:30,742 - #43 )
INFO  04:34:30,743 - #46 {
INFO  04:34:30,743 - #48 x
INFO  04:34:30,744 - #35 =
INFO  04:34:30,744 - #48 sum
INFO  04:34:30,746 - #42 (
INFO  04:34:30,746 - #49 1
INFO  04:34:30,747 - #43 )
INFO  04:34:30,747 - #38 ;
INFO  04:34:30,748 - #12 print
INFO  04:34:30,748 - #42 (
INFO  04:34:30,748 - #48 x
INFO  04:34:30,748 - #43 )
INFO  04:34:30,748 - #38 ;
INFO  04:34:30,748 - #47 }
INFO  04:34:30,748 - #47 }
INFO  04:34:30,750 - Syntax analysis finished successfully!
INFO  04:34:30,750 - Syntax tree: 
INFO  04:34:30,751 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         1
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [SingleActualParameter]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:34:30,752 - =========================================
INFO  04:34:30,752 - Starting semantic analysis....
INFO  04:34:30,780 - Constant N declared  at line 2
INFO  04:34:30,780 - Global variable x declared at line 3
INFO  04:34:30,780 - Global variable y declared at line 3
INFO  04:34:30,780 - Global array arr[] declared at line 3
INFO  04:34:30,781 - Function sum is being parsed  at line 6
INFO  04:34:30,782 - Local parameter a declared at line 6
INFO  04:34:30,782 - Default parameter b declared at line 6
INFO  04:34:30,782 - Default parameter c declared at line 6
INFO  04:34:30,783 - Function parameter c accessed at line 7
INFO  04:34:30,783 - Function parameter a accessed at line 8
INFO  04:34:30,783 - Function parameter b accessed at line 8
INFO  04:34:30,784 - Function main is being parsed  at line 11
INFO  04:34:30,784 - Global variable x accessed at line 12
INFO  04:34:30,784 - Function sum is called at line 12
INFO  04:34:30,785 - Global variable x accessed at line 13
INFO  04:34:30,785 - Semantic analysis completed.
INFO  04:34:30,785 - Semantic analysis finished successfully!
INFO  04:34:30,786 - Symbol table: 
INFO  04:34:30,787 - =========================================
INFO  04:34:30,787 - Started generating code....
INFO  04:34:30,798 - Code generated successfully!
INFO  04:34:30,799 - Compiling file successfully completed!
INFO  04:34:48,737 - Starting compilation of a file test/test4.mj
INFO  04:34:48,738 - Starting lexical analysis....
INFO  04:34:48,744 - Lexical analysis finished successfully!
INFO  04:34:48,744 - =========================================
INFO  04:34:48,744 - Starting syntax analysis....
INFO  04:34:48,849 - #2 program
INFO  04:34:48,849 - #48 Test4
INFO  04:34:48,849 - #7 const
INFO  04:34:48,851 - #48 int
INFO  04:34:48,851 - #48 N
INFO  04:34:48,853 - #35 =
INFO  04:34:48,853 - #49 50
INFO  04:34:48,853 - #38 ;
INFO  04:34:48,854 - #48 int
INFO  04:34:48,854 - #48 x
INFO  04:34:48,854 - #40 ,
INFO  04:34:48,858 - #48 y
INFO  04:34:48,858 - #40 ,
INFO  04:34:48,858 - #48 arr
INFO  04:34:48,859 - #44 [
INFO  04:34:48,859 - #45 ]
INFO  04:34:48,859 - #38 ;
INFO  04:34:48,860 - #46 {
INFO  04:34:48,860 - #48 int
INFO  04:34:48,861 - #48 sum
INFO  04:34:48,862 - #42 (
INFO  04:34:48,863 - #48 int
INFO  04:34:48,863 - #48 a
INFO  04:34:48,863 - #40 ,
INFO  04:34:48,864 - #48 int
INFO  04:34:48,864 - #48 b
INFO  04:34:48,864 - #35 =
INFO  04:34:48,864 - #49 10
INFO  04:34:48,864 - #40 ,
INFO  04:34:48,865 - #48 char
INFO  04:34:48,865 - #48 c
INFO  04:34:48,865 - #35 =
INFO  04:34:48,865 - #50 a
INFO  04:34:48,865 - #43 )
INFO  04:34:48,866 - #46 {
INFO  04:34:48,873 - #12 print
INFO  04:34:48,875 - #42 (
INFO  04:34:48,875 - #48 c
INFO  04:34:48,877 - #43 )
INFO  04:34:48,879 - #38 ;
INFO  04:34:48,880 - #14 return
INFO  04:34:48,880 - #48 a
INFO  04:34:48,880 - #22 +
INFO  04:34:48,880 - #48 b
INFO  04:34:48,882 - #38 ;
INFO  04:34:48,882 - #47 }
INFO  04:34:48,883 - #15 void
INFO  04:34:48,883 - #48 main
INFO  04:34:48,884 - #42 (
INFO  04:34:48,884 - #43 )
INFO  04:34:48,885 - #46 {
INFO  04:34:48,885 - #48 x
INFO  04:34:48,885 - #35 =
INFO  04:34:48,885 - #48 sum
INFO  04:34:48,887 - #42 (
INFO  04:34:48,887 - #49 1
INFO  04:34:48,887 - #40 ,
INFO  04:34:48,887 - #49 40
INFO  04:34:48,888 - #40 ,
INFO  04:34:48,888 - #50 x
INFO  04:34:48,889 - #43 )
INFO  04:34:48,889 - #38 ;
INFO  04:34:48,890 - #12 print
INFO  04:34:48,890 - #42 (
INFO  04:34:48,890 - #48 x
INFO  04:34:48,890 - #43 )
INFO  04:34:48,890 - #38 ;
INFO  04:34:48,890 - #47 }
INFO  04:34:48,890 - #47 }
INFO  04:34:48,891 - Syntax analysis finished successfully!
INFO  04:34:48,891 - Syntax tree: 
INFO  04:34:48,893 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              MultipleActualParameters(
                                MultipleActualParameters(
                                  SingleActualParameter(
                                    Expr(
                                      ExpressionClass(
                                        ExpressionPositive(
                                        ) [ExpressionPositive]
                                        Terminal(
                                          FactorNumberConstant(
                                            NumberConstant(
                                             1
                                            ) [NumberConstant]
                                          ) [FactorNumberConstant]
                                        ) [Terminal]
                                      ) [ExpressionClass]
                                    ) [Expr]
                                  ) [SingleActualParameter]
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           40
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                  ) [Expr]
                                ) [MultipleActualParameters]
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorCharacterConstant(
                                        CharacterConstant(
                                         x
                                        ) [CharacterConstant]
                                      ) [FactorCharacterConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [MultipleActualParameters]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:34:48,893 - =========================================
INFO  04:34:48,893 - Starting semantic analysis....
INFO  04:34:48,920 - Constant N declared  at line 2
INFO  04:34:48,921 - Global variable x declared at line 3
INFO  04:34:48,921 - Global variable y declared at line 3
INFO  04:34:48,921 - Global array arr[] declared at line 3
INFO  04:34:48,921 - Function sum is being parsed  at line 6
INFO  04:34:48,923 - Local parameter a declared at line 6
INFO  04:34:48,923 - Default parameter b declared at line 6
INFO  04:34:48,923 - Default parameter c declared at line 6
INFO  04:34:48,923 - Function parameter c accessed at line 7
INFO  04:34:48,923 - Function parameter a accessed at line 8
INFO  04:34:48,923 - Function parameter b accessed at line 8
INFO  04:34:48,923 - Function main is being parsed  at line 11
INFO  04:34:48,924 - Global variable x accessed at line 12
INFO  04:34:48,924 - Function sum is called at line 12
INFO  04:34:48,924 - Global variable x accessed at line 13
INFO  04:34:48,924 - Semantic analysis completed.
INFO  04:34:48,924 - Semantic analysis finished successfully!
INFO  04:34:48,924 - Symbol table: 
INFO  04:34:48,925 - =========================================
INFO  04:34:48,925 - Started generating code....
INFO  04:34:48,936 - Code generated successfully!
INFO  04:34:48,937 - Compiling file successfully completed!
INFO  04:37:37,855 - Starting compilation of a file test/test4.mj
INFO  04:37:37,856 - Starting lexical analysis....
INFO  04:37:37,860 - Lexical analysis finished successfully!
INFO  04:37:37,861 - =========================================
INFO  04:37:37,861 - Starting syntax analysis....
INFO  04:37:38,020 - #2 program
INFO  04:37:38,020 - #48 Test4
INFO  04:37:38,020 - #7 const
INFO  04:37:38,021 - #48 int
INFO  04:37:38,022 - #48 N
INFO  04:37:38,023 - #35 =
INFO  04:37:38,023 - #49 50
INFO  04:37:38,023 - #38 ;
INFO  04:37:38,023 - #48 int
INFO  04:37:38,023 - #48 x
INFO  04:37:38,024 - #40 ,
INFO  04:37:38,026 - #48 y
INFO  04:37:38,026 - #40 ,
INFO  04:37:38,026 - #48 arr
INFO  04:37:38,026 - #44 [
INFO  04:37:38,026 - #45 ]
INFO  04:37:38,026 - #38 ;
INFO  04:37:38,027 - #46 {
INFO  04:37:38,028 - #48 int
INFO  04:37:38,029 - #48 sum
INFO  04:37:38,029 - #42 (
INFO  04:37:38,030 - #48 int
INFO  04:37:38,030 - #48 a
INFO  04:37:38,030 - #40 ,
INFO  04:37:38,031 - #48 int
INFO  04:37:38,031 - #48 b
INFO  04:37:38,031 - #35 =
INFO  04:37:38,031 - #49 10
INFO  04:37:38,031 - #40 ,
INFO  04:37:38,031 - #48 char
INFO  04:37:38,031 - #48 c
INFO  04:37:38,031 - #35 =
INFO  04:37:38,031 - #50 a
INFO  04:37:38,032 - #43 )
INFO  04:37:38,032 - #46 {
INFO  04:37:38,034 - #12 print
INFO  04:37:38,035 - #42 (
INFO  04:37:38,036 - #48 c
INFO  04:37:38,040 - #43 )
INFO  04:37:38,043 - #38 ;
INFO  04:37:38,043 - #14 return
INFO  04:37:38,044 - #48 a
INFO  04:37:38,044 - #22 +
INFO  04:37:38,044 - #48 b
INFO  04:37:38,046 - #38 ;
INFO  04:37:38,046 - #47 }
INFO  04:37:38,046 - #15 void
INFO  04:37:38,047 - #48 main
INFO  04:37:38,048 - #42 (
INFO  04:37:38,048 - #43 )
INFO  04:37:38,050 - #46 {
INFO  04:37:38,050 - #48 sum
INFO  04:37:38,050 - #42 (
INFO  04:37:38,050 - #49 1
INFO  04:37:38,050 - #40 ,
INFO  04:37:38,050 - #49 40
INFO  04:37:38,051 - #40 ,
INFO  04:37:38,051 - #50 x
INFO  04:37:38,051 - #43 )
INFO  04:37:38,052 - #38 ;
INFO  04:37:38,052 - #12 print
INFO  04:37:38,052 - #42 (
INFO  04:37:38,052 - #48 x
INFO  04:37:38,053 - #43 )
INFO  04:37:38,053 - #38 ;
INFO  04:37:38,053 - #47 }
INFO  04:37:38,053 - #47 }
INFO  04:37:38,054 - Syntax analysis finished successfully!
INFO  04:37:38,055 - Syntax tree: 
INFO  04:37:38,056 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 sum
                ) [DesignatorClass]
                DesignatorFunctionCall(
                  FunctionCallHasArguments(
                    MultipleActualParameters(
                      MultipleActualParameters(
                        SingleActualParameter(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorNumberConstant(
                                  NumberConstant(
                                   1
                                  ) [NumberConstant]
                                ) [FactorNumberConstant]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [SingleActualParameter]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 40
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [MultipleActualParameters]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorCharacterConstant(
                              CharacterConstant(
                               x
                              ) [CharacterConstant]
                            ) [FactorCharacterConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [MultipleActualParameters]
                  ) [FunctionCallHasArguments]
                ) [DesignatorFunctionCall]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:37:38,056 - =========================================
INFO  04:37:38,057 - Starting semantic analysis....
INFO  04:37:38,090 - Constant N declared  at line 2
INFO  04:37:38,090 - Global variable x declared at line 3
INFO  04:37:38,090 - Global variable y declared at line 3
INFO  04:37:38,090 - Global array arr[] declared at line 3
INFO  04:37:38,091 - Function sum is being parsed  at line 6
INFO  04:37:38,092 - Local parameter a declared at line 6
INFO  04:37:38,092 - Default parameter b declared at line 6
INFO  04:37:38,092 - Default parameter c declared at line 6
INFO  04:37:38,092 - Function parameter c accessed at line 7
INFO  04:37:38,093 - Function parameter a accessed at line 8
INFO  04:37:38,093 - Function parameter b accessed at line 8
INFO  04:37:38,093 - Function main is being parsed  at line 11
INFO  04:37:38,093 - Function sum is called at line 12
INFO  04:37:38,093 - Global variable x accessed at line 13
INFO  04:37:38,093 - Semantic analysis completed.
INFO  04:37:38,093 - Semantic analysis finished successfully!
INFO  04:37:38,093 - Symbol table: 
INFO  04:37:38,094 - =========================================
INFO  04:37:38,094 - Started generating code....
INFO  04:37:38,102 - Code generated successfully!
INFO  04:37:38,102 - Compiling file successfully completed!
INFO  04:38:30,042 - Starting compilation of a file test/test4.mj
INFO  04:38:30,043 - Starting lexical analysis....
INFO  04:38:30,047 - Lexical analysis finished successfully!
INFO  04:38:30,047 - =========================================
INFO  04:38:30,047 - Starting syntax analysis....
INFO  04:38:30,174 - #2 program
INFO  04:38:30,175 - #48 Test4
INFO  04:38:30,175 - #7 const
INFO  04:38:30,176 - #48 int
INFO  04:38:30,176 - #48 N
INFO  04:38:30,178 - #35 =
INFO  04:38:30,178 - #49 50
INFO  04:38:30,178 - #38 ;
INFO  04:38:30,179 - #48 int
INFO  04:38:30,180 - #48 x
INFO  04:38:30,180 - #40 ,
INFO  04:38:30,183 - #48 y
INFO  04:38:30,184 - #40 ,
INFO  04:38:30,184 - #48 arr
INFO  04:38:30,184 - #44 [
INFO  04:38:30,184 - #45 ]
INFO  04:38:30,184 - #38 ;
INFO  04:38:30,186 - #46 {
INFO  04:38:30,187 - #48 int
INFO  04:38:30,188 - #48 sum
INFO  04:38:30,188 - #42 (
INFO  04:38:30,190 - #48 int
INFO  04:38:30,190 - #48 a
INFO  04:38:30,190 - #40 ,
INFO  04:38:30,191 - #48 int
INFO  04:38:30,191 - #48 b
INFO  04:38:30,191 - #35 =
INFO  04:38:30,191 - #49 10
INFO  04:38:30,191 - #40 ,
INFO  04:38:30,192 - #48 char
INFO  04:38:30,192 - #48 c
INFO  04:38:30,192 - #35 =
INFO  04:38:30,192 - #50 a
INFO  04:38:30,192 - #43 )
INFO  04:38:30,195 - #46 {
INFO  04:38:30,199 - #12 print
INFO  04:38:30,200 - #42 (
INFO  04:38:30,201 - #48 c
INFO  04:38:30,203 - #43 )
INFO  04:38:30,206 - #38 ;
INFO  04:38:30,206 - #14 return
INFO  04:38:30,207 - #48 a
INFO  04:38:30,207 - #22 +
INFO  04:38:30,207 - #48 b
INFO  04:38:30,209 - #38 ;
INFO  04:38:30,209 - #47 }
INFO  04:38:30,209 - #15 void
INFO  04:38:30,210 - #48 main
INFO  04:38:30,211 - #42 (
INFO  04:38:30,212 - #43 )
INFO  04:38:30,214 - #46 {
INFO  04:38:30,214 - #48 sum
INFO  04:38:30,215 - #42 (
INFO  04:38:30,215 - #49 1
INFO  04:38:30,215 - #40 ,
INFO  04:38:30,215 - #49 40
INFO  04:38:30,216 - #40 ,
INFO  04:38:30,216 - #50 x
INFO  04:38:30,216 - #43 )
INFO  04:38:30,217 - #38 ;
INFO  04:38:30,218 - #12 print
INFO  04:38:30,219 - #42 (
INFO  04:38:30,219 - #48 x
INFO  04:38:30,223 - #43 )
INFO  04:38:30,223 - #38 ;
INFO  04:38:30,223 - #47 }
INFO  04:38:30,223 - #47 }
INFO  04:38:30,224 - Syntax analysis finished successfully!
INFO  04:38:30,225 - Syntax tree: 
INFO  04:38:30,226 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 sum
                ) [DesignatorClass]
                DesignatorFunctionCall(
                  FunctionCallHasArguments(
                    MultipleActualParameters(
                      MultipleActualParameters(
                        SingleActualParameter(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorNumberConstant(
                                  NumberConstant(
                                   1
                                  ) [NumberConstant]
                                ) [FactorNumberConstant]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [SingleActualParameter]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 40
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [MultipleActualParameters]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorCharacterConstant(
                              CharacterConstant(
                               x
                              ) [CharacterConstant]
                            ) [FactorCharacterConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [MultipleActualParameters]
                  ) [FunctionCallHasArguments]
                ) [DesignatorFunctionCall]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:38:30,226 - =========================================
INFO  04:38:30,226 - Starting semantic analysis....
INFO  04:38:30,255 - Constant N declared  at line 2
INFO  04:38:30,255 - Global variable x declared at line 3
INFO  04:38:30,255 - Global variable y declared at line 3
INFO  04:38:30,255 - Global array arr[] declared at line 3
INFO  04:38:30,256 - Function sum is being parsed  at line 6
INFO  04:38:30,257 - Local parameter a declared at line 6
INFO  04:38:30,257 - Default parameter b declared at line 6
INFO  04:38:30,258 - Default parameter c declared at line 6
INFO  04:38:30,258 - Function parameter c accessed at line 7
INFO  04:38:30,258 - Function parameter a accessed at line 8
INFO  04:38:30,259 - Function parameter b accessed at line 8
INFO  04:38:30,259 - Function main is being parsed  at line 11
INFO  04:38:30,259 - Function sum is called at line 12
INFO  04:38:30,259 - Global variable x accessed at line 13
INFO  04:38:30,259 - Semantic analysis completed.
INFO  04:38:30,259 - Semantic analysis finished successfully!
INFO  04:38:30,259 - Symbol table: 
INFO  04:38:30,261 - =========================================
INFO  04:38:30,261 - Started generating code....
INFO  04:38:30,270 - Code generated successfully!
INFO  04:38:30,270 - Compiling file successfully completed!
INFO  04:38:59,082 - Starting compilation of a file test/test4.mj
INFO  04:38:59,083 - Starting lexical analysis....
INFO  04:38:59,090 - Lexical analysis finished successfully!
INFO  04:38:59,090 - =========================================
INFO  04:38:59,090 - Starting syntax analysis....
INFO  04:38:59,223 - #2 program
INFO  04:38:59,223 - #48 Test4
INFO  04:38:59,223 - #7 const
INFO  04:38:59,224 - #48 int
INFO  04:38:59,224 - #48 N
INFO  04:38:59,226 - #35 =
INFO  04:38:59,226 - #49 50
INFO  04:38:59,226 - #38 ;
INFO  04:38:59,227 - #48 int
INFO  04:38:59,228 - #48 x
INFO  04:38:59,228 - #40 ,
INFO  04:38:59,230 - #48 y
INFO  04:38:59,231 - #40 ,
INFO  04:38:59,231 - #48 arr
INFO  04:38:59,231 - #44 [
INFO  04:38:59,231 - #45 ]
INFO  04:38:59,231 - #38 ;
INFO  04:38:59,233 - #46 {
INFO  04:38:59,234 - #48 int
INFO  04:38:59,236 - #48 sum
INFO  04:38:59,236 - #42 (
INFO  04:38:59,239 - #48 int
INFO  04:38:59,239 - #48 a
INFO  04:38:59,240 - #40 ,
INFO  04:38:59,240 - #48 int
INFO  04:38:59,240 - #48 b
INFO  04:38:59,240 - #35 =
INFO  04:38:59,241 - #49 10
INFO  04:38:59,241 - #40 ,
INFO  04:38:59,241 - #48 char
INFO  04:38:59,241 - #48 c
INFO  04:38:59,241 - #35 =
INFO  04:38:59,242 - #50 a
INFO  04:38:59,242 - #43 )
INFO  04:38:59,243 - #46 {
INFO  04:38:59,244 - #12 print
INFO  04:38:59,250 - #42 (
INFO  04:38:59,250 - #48 a
INFO  04:38:59,252 - #43 )
INFO  04:38:59,256 - #38 ;
INFO  04:38:59,256 - #12 print
INFO  04:38:59,256 - #42 (
INFO  04:38:59,257 - #48 b
INFO  04:38:59,257 - #43 )
INFO  04:38:59,258 - #38 ;
INFO  04:38:59,258 - #12 print
INFO  04:38:59,258 - #42 (
INFO  04:38:59,259 - #48 c
INFO  04:38:59,259 - #43 )
INFO  04:38:59,259 - #38 ;
INFO  04:38:59,259 - #14 return
INFO  04:38:59,259 - #48 a
INFO  04:38:59,259 - #22 +
INFO  04:38:59,260 - #48 b
INFO  04:38:59,262 - #38 ;
INFO  04:38:59,263 - #47 }
INFO  04:38:59,263 - #15 void
INFO  04:38:59,266 - #48 main
INFO  04:38:59,268 - #42 (
INFO  04:38:59,269 - #43 )
INFO  04:38:59,270 - #46 {
INFO  04:38:59,270 - #48 sum
INFO  04:38:59,270 - #42 (
INFO  04:38:59,275 - #49 30
INFO  04:38:59,276 - #40 ,
INFO  04:38:59,276 - #49 40
INFO  04:38:59,277 - #40 ,
INFO  04:38:59,277 - #50 x
INFO  04:38:59,277 - #43 )
INFO  04:38:59,277 - #38 ;
INFO  04:38:59,278 - #12 print
INFO  04:38:59,279 - #42 (
INFO  04:38:59,279 - #48 x
INFO  04:38:59,279 - #43 )
INFO  04:38:59,279 - #38 ;
INFO  04:38:59,279 - #47 }
INFO  04:38:59,279 - #47 }
INFO  04:38:59,281 - Syntax analysis finished successfully!
INFO  04:38:59,281 - Syntax tree: 
INFO  04:38:59,284 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 sum
                ) [DesignatorClass]
                DesignatorFunctionCall(
                  FunctionCallHasArguments(
                    MultipleActualParameters(
                      MultipleActualParameters(
                        SingleActualParameter(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorNumberConstant(
                                  NumberConstant(
                                   30
                                  ) [NumberConstant]
                                ) [FactorNumberConstant]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [SingleActualParameter]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 40
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [MultipleActualParameters]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorCharacterConstant(
                              CharacterConstant(
                               x
                              ) [CharacterConstant]
                            ) [FactorCharacterConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [MultipleActualParameters]
                  ) [FunctionCallHasArguments]
                ) [DesignatorFunctionCall]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:38:59,285 - =========================================
INFO  04:38:59,285 - Starting semantic analysis....
INFO  04:38:59,313 - Constant N declared  at line 2
INFO  04:38:59,313 - Global variable x declared at line 3
INFO  04:38:59,313 - Global variable y declared at line 3
INFO  04:38:59,313 - Global array arr[] declared at line 3
INFO  04:38:59,314 - Function sum is being parsed  at line 6
INFO  04:38:59,315 - Local parameter a declared at line 6
INFO  04:38:59,315 - Default parameter b declared at line 6
INFO  04:38:59,316 - Default parameter c declared at line 6
INFO  04:38:59,316 - Function parameter a accessed at line 7
INFO  04:38:59,316 - Function parameter b accessed at line 8
INFO  04:38:59,316 - Function parameter c accessed at line 9
INFO  04:38:59,316 - Function parameter a accessed at line 10
INFO  04:38:59,316 - Function parameter b accessed at line 10
INFO  04:38:59,316 - Function main is being parsed  at line 13
INFO  04:38:59,317 - Function sum is called at line 14
INFO  04:38:59,317 - Global variable x accessed at line 15
INFO  04:38:59,317 - Semantic analysis completed.
INFO  04:38:59,317 - Semantic analysis finished successfully!
INFO  04:38:59,318 - Symbol table: 
INFO  04:38:59,319 - =========================================
INFO  04:38:59,319 - Started generating code....
INFO  04:38:59,331 - Code generated successfully!
INFO  04:38:59,331 - Compiling file successfully completed!
INFO  04:39:20,052 - Starting compilation of a file test/test4.mj
INFO  04:39:20,053 - Starting lexical analysis....
INFO  04:39:20,056 - Lexical analysis finished successfully!
INFO  04:39:20,056 - =========================================
INFO  04:39:20,056 - Starting syntax analysis....
INFO  04:39:20,178 - #2 program
INFO  04:39:20,178 - #48 Test4
INFO  04:39:20,179 - #7 const
INFO  04:39:20,180 - #48 int
INFO  04:39:20,180 - #48 N
INFO  04:39:20,181 - #35 =
INFO  04:39:20,181 - #49 50
INFO  04:39:20,181 - #38 ;
INFO  04:39:20,182 - #48 int
INFO  04:39:20,182 - #48 x
INFO  04:39:20,182 - #40 ,
INFO  04:39:20,184 - #48 y
INFO  04:39:20,184 - #40 ,
INFO  04:39:20,184 - #48 arr
INFO  04:39:20,184 - #44 [
INFO  04:39:20,184 - #45 ]
INFO  04:39:20,184 - #38 ;
INFO  04:39:20,187 - #46 {
INFO  04:39:20,187 - #48 int
INFO  04:39:20,188 - #48 sum
INFO  04:39:20,188 - #42 (
INFO  04:39:20,190 - #48 int
INFO  04:39:20,190 - #48 a
INFO  04:39:20,190 - #40 ,
INFO  04:39:20,190 - #48 int
INFO  04:39:20,190 - #48 b
INFO  04:39:20,190 - #35 =
INFO  04:39:20,190 - #49 10
INFO  04:39:20,190 - #40 ,
INFO  04:39:20,191 - #48 char
INFO  04:39:20,191 - #48 c
INFO  04:39:20,191 - #35 =
INFO  04:39:20,191 - #50 a
INFO  04:39:20,191 - #43 )
INFO  04:39:20,191 - #46 {
INFO  04:39:20,192 - #12 print
INFO  04:39:20,193 - #42 (
INFO  04:39:20,193 - #48 a
INFO  04:39:20,196 - #43 )
INFO  04:39:20,199 - #38 ;
INFO  04:39:20,199 - #12 print
INFO  04:39:20,199 - #42 (
INFO  04:39:20,199 - #48 b
INFO  04:39:20,199 - #43 )
INFO  04:39:20,199 - #38 ;
INFO  04:39:20,199 - #12 print
INFO  04:39:20,199 - #42 (
INFO  04:39:20,199 - #48 c
INFO  04:39:20,200 - #43 )
INFO  04:39:20,200 - #38 ;
INFO  04:39:20,200 - #14 return
INFO  04:39:20,200 - #48 a
INFO  04:39:20,200 - #22 +
INFO  04:39:20,200 - #48 b
INFO  04:39:20,202 - #38 ;
INFO  04:39:20,203 - #47 }
INFO  04:39:20,203 - #15 void
INFO  04:39:20,204 - #48 main
INFO  04:39:20,206 - #42 (
INFO  04:39:20,206 - #43 )
INFO  04:39:20,207 - #46 {
INFO  04:39:20,207 - #48 sum
INFO  04:39:20,207 - #42 (
INFO  04:39:20,211 - #49 30
INFO  04:39:20,211 - #43 )
INFO  04:39:20,211 - #38 ;
INFO  04:39:20,212 - #12 print
INFO  04:39:20,212 - #42 (
INFO  04:39:20,212 - #48 x
INFO  04:39:20,212 - #43 )
INFO  04:39:20,212 - #38 ;
INFO  04:39:20,212 - #47 }
INFO  04:39:20,212 - #47 }
INFO  04:39:20,213 - Syntax analysis finished successfully!
INFO  04:39:20,213 - Syntax tree: 
INFO  04:39:20,214 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 sum
                ) [DesignatorClass]
                DesignatorFunctionCall(
                  FunctionCallHasArguments(
                    SingleActualParameter(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorNumberConstant(
                              NumberConstant(
                               30
                              ) [NumberConstant]
                            ) [FactorNumberConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [SingleActualParameter]
                  ) [FunctionCallHasArguments]
                ) [DesignatorFunctionCall]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:39:20,215 - =========================================
INFO  04:39:20,215 - Starting semantic analysis....
INFO  04:39:20,240 - Constant N declared  at line 2
INFO  04:39:20,240 - Global variable x declared at line 3
INFO  04:39:20,240 - Global variable y declared at line 3
INFO  04:39:20,241 - Global array arr[] declared at line 3
INFO  04:39:20,241 - Function sum is being parsed  at line 6
INFO  04:39:20,242 - Local parameter a declared at line 6
INFO  04:39:20,243 - Default parameter b declared at line 6
INFO  04:39:20,243 - Default parameter c declared at line 6
INFO  04:39:20,243 - Function parameter a accessed at line 7
INFO  04:39:20,243 - Function parameter b accessed at line 8
INFO  04:39:20,243 - Function parameter c accessed at line 9
INFO  04:39:20,243 - Function parameter a accessed at line 10
INFO  04:39:20,243 - Function parameter b accessed at line 10
INFO  04:39:20,244 - Function main is being parsed  at line 13
INFO  04:39:20,244 - Function sum is called at line 14
INFO  04:39:20,244 - Global variable x accessed at line 15
INFO  04:39:20,244 - Semantic analysis completed.
INFO  04:39:20,244 - Semantic analysis finished successfully!
INFO  04:39:20,244 - Symbol table: 
INFO  04:39:20,245 - =========================================
INFO  04:39:20,245 - Started generating code....
INFO  04:39:20,253 - Code generated successfully!
INFO  04:39:20,254 - Compiling file successfully completed!
INFO  04:40:24,237 - Starting compilation of a file test/test4.mj
INFO  04:40:24,238 - Starting lexical analysis....
INFO  04:40:24,242 - Lexical analysis finished successfully!
INFO  04:40:24,242 - =========================================
INFO  04:40:24,242 - Starting syntax analysis....
INFO  04:40:24,360 - #2 program
INFO  04:40:24,360 - #48 Test4
INFO  04:40:24,361 - #7 const
INFO  04:40:24,362 - #48 int
INFO  04:40:24,362 - #48 N
INFO  04:40:24,363 - #35 =
INFO  04:40:24,363 - #49 50
INFO  04:40:24,363 - #38 ;
INFO  04:40:24,363 - #48 int
INFO  04:40:24,364 - #48 x
INFO  04:40:24,364 - #40 ,
INFO  04:40:24,366 - #48 y
INFO  04:40:24,366 - #40 ,
INFO  04:40:24,367 - #48 arr
INFO  04:40:24,367 - #44 [
INFO  04:40:24,367 - #45 ]
INFO  04:40:24,367 - #38 ;
INFO  04:40:24,368 - #46 {
INFO  04:40:24,368 - #48 int
INFO  04:40:24,369 - #48 sum
INFO  04:40:24,369 - #42 (
INFO  04:40:24,370 - #48 int
INFO  04:40:24,370 - #48 a
INFO  04:40:24,370 - #40 ,
INFO  04:40:24,371 - #48 int
INFO  04:40:24,371 - #48 b
INFO  04:40:24,371 - #35 =
INFO  04:40:24,371 - #49 10
INFO  04:40:24,371 - #40 ,
INFO  04:40:24,371 - #48 char
INFO  04:40:24,371 - #48 c
INFO  04:40:24,371 - #35 =
INFO  04:40:24,371 - #50 a
INFO  04:40:24,371 - #43 )
INFO  04:40:24,372 - #46 {
INFO  04:40:24,373 - #12 print
INFO  04:40:24,374 - #42 (
INFO  04:40:24,374 - #48 a
INFO  04:40:24,377 - #43 )
INFO  04:40:24,380 - #38 ;
INFO  04:40:24,380 - #12 print
INFO  04:40:24,381 - #42 (
INFO  04:40:24,381 - #48 b
INFO  04:40:24,381 - #43 )
INFO  04:40:24,382 - #38 ;
INFO  04:40:24,382 - #12 print
INFO  04:40:24,382 - #42 (
INFO  04:40:24,382 - #48 c
INFO  04:40:24,382 - #43 )
INFO  04:40:24,383 - #38 ;
INFO  04:40:24,383 - #14 return
INFO  04:40:24,383 - #48 a
INFO  04:40:24,383 - #22 +
INFO  04:40:24,383 - #48 b
INFO  04:40:24,385 - #38 ;
INFO  04:40:24,385 - #47 }
INFO  04:40:24,385 - #15 void
INFO  04:40:24,387 - #48 main
INFO  04:40:24,388 - #42 (
INFO  04:40:24,389 - #43 )
INFO  04:40:24,390 - #46 {
INFO  04:40:24,390 - #48 sum
INFO  04:40:24,390 - #42 (
INFO  04:40:24,395 - #49 30
INFO  04:40:24,395 - #43 )
INFO  04:40:24,395 - #38 ;
INFO  04:40:24,396 - #12 print
INFO  04:40:24,396 - #42 (
INFO  04:40:24,396 - #48 x
INFO  04:40:24,397 - #43 )
INFO  04:40:24,397 - #38 ;
INFO  04:40:24,397 - #47 }
INFO  04:40:24,397 - #47 }
INFO  04:40:24,400 - Syntax analysis finished successfully!
INFO  04:40:24,400 - Syntax tree: 
INFO  04:40:24,401 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 sum
                ) [DesignatorClass]
                DesignatorFunctionCall(
                  FunctionCallHasArguments(
                    SingleActualParameter(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorNumberConstant(
                              NumberConstant(
                               30
                              ) [NumberConstant]
                            ) [FactorNumberConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [SingleActualParameter]
                  ) [FunctionCallHasArguments]
                ) [DesignatorFunctionCall]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:40:24,402 - =========================================
INFO  04:40:24,402 - Starting semantic analysis....
INFO  04:40:24,457 - Constant N declared  at line 2
INFO  04:40:24,457 - Global variable x declared at line 3
INFO  04:40:24,457 - Global variable y declared at line 3
INFO  04:40:24,457 - Global array arr[] declared at line 3
INFO  04:40:24,457 - Function sum is being parsed  at line 6
INFO  04:40:24,460 - Local parameter a declared at line 6
INFO  04:40:24,460 - Default parameter b declared at line 6
INFO  04:40:24,460 - Default parameter c declared at line 6
INFO  04:40:24,460 - Function parameter a accessed at line 7
INFO  04:40:24,460 - Function parameter b accessed at line 8
INFO  04:40:24,461 - Function parameter c accessed at line 9
INFO  04:40:24,461 - Function parameter a accessed at line 10
INFO  04:40:24,461 - Function parameter b accessed at line 10
INFO  04:40:24,462 - Function main is being parsed  at line 13
INFO  04:40:24,462 - Function sum is called at line 14
INFO  04:40:24,462 - Global variable x accessed at line 15
INFO  04:40:24,462 - Semantic analysis completed.
INFO  04:40:24,463 - Semantic analysis finished successfully!
INFO  04:40:24,463 - Symbol table: 
INFO  04:40:24,464 - =========================================
INFO  04:40:24,465 - Started generating code....
INFO  04:40:24,473 - Code generated successfully!
INFO  04:40:24,474 - Compiling file successfully completed!
INFO  04:40:36,797 - Starting compilation of a file test/test4.mj
INFO  04:40:36,797 - Starting lexical analysis....
INFO  04:40:36,803 - Lexical analysis finished successfully!
INFO  04:40:36,804 - =========================================
INFO  04:40:36,804 - Starting syntax analysis....
INFO  04:40:36,937 - #2 program
INFO  04:40:36,938 - #48 Test4
INFO  04:40:36,938 - #7 const
INFO  04:40:36,940 - #48 int
INFO  04:40:36,940 - #48 N
INFO  04:40:36,941 - #35 =
INFO  04:40:36,941 - #49 50
INFO  04:40:36,941 - #38 ;
INFO  04:40:36,942 - #48 int
INFO  04:40:36,943 - #48 x
INFO  04:40:36,943 - #40 ,
INFO  04:40:36,945 - #48 y
INFO  04:40:36,945 - #40 ,
INFO  04:40:36,946 - #48 arr
INFO  04:40:36,946 - #44 [
INFO  04:40:36,946 - #45 ]
INFO  04:40:36,946 - #38 ;
INFO  04:40:36,947 - #46 {
INFO  04:40:36,947 - #48 int
INFO  04:40:36,948 - #48 sum
INFO  04:40:36,949 - #42 (
INFO  04:40:36,950 - #48 int
INFO  04:40:36,950 - #48 a
INFO  04:40:36,950 - #40 ,
INFO  04:40:36,951 - #48 int
INFO  04:40:36,951 - #48 b
INFO  04:40:36,951 - #35 =
INFO  04:40:36,951 - #49 10
INFO  04:40:36,951 - #40 ,
INFO  04:40:36,952 - #48 char
INFO  04:40:36,952 - #48 c
INFO  04:40:36,952 - #35 =
INFO  04:40:36,953 - #50 a
INFO  04:40:36,953 - #43 )
INFO  04:40:36,953 - #46 {
INFO  04:40:36,955 - #12 print
INFO  04:40:36,956 - #42 (
INFO  04:40:36,956 - #48 a
INFO  04:40:36,960 - #43 )
INFO  04:40:36,963 - #38 ;
INFO  04:40:36,963 - #12 print
INFO  04:40:36,963 - #42 (
INFO  04:40:36,964 - #48 b
INFO  04:40:36,964 - #43 )
INFO  04:40:36,964 - #38 ;
INFO  04:40:36,964 - #12 print
INFO  04:40:36,964 - #42 (
INFO  04:40:36,964 - #48 c
INFO  04:40:36,964 - #43 )
INFO  04:40:36,964 - #38 ;
INFO  04:40:36,964 - #14 return
INFO  04:40:36,965 - #48 a
INFO  04:40:36,965 - #22 +
INFO  04:40:36,965 - #48 b
INFO  04:40:36,967 - #38 ;
INFO  04:40:36,968 - #47 }
INFO  04:40:36,968 - #15 void
INFO  04:40:36,969 - #48 main
INFO  04:40:36,972 - #42 (
INFO  04:40:36,972 - #43 )
INFO  04:40:36,973 - #46 {
INFO  04:40:36,973 - #48 sum
INFO  04:40:36,974 - #42 (
INFO  04:40:36,978 - #43 )
INFO  04:40:36,980 - #38 ;
INFO  04:40:36,980 - #12 print
INFO  04:40:36,981 - #42 (
INFO  04:40:36,981 - #48 x
INFO  04:40:36,981 - #43 )
INFO  04:40:36,981 - #38 ;
INFO  04:40:36,981 - #47 }
INFO  04:40:36,981 - #47 }
INFO  04:40:36,983 - Syntax analysis finished successfully!
INFO  04:40:36,983 - Syntax tree: 
INFO  04:40:36,985 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          MultipleOptionalArguments(
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [FormalParametersListWithOptionalArguments]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 sum
                ) [DesignatorClass]
                DesignatorFunctionCall(
                  FunctionCallNoArguments(
                  ) [FunctionCallNoArguments]
                ) [DesignatorFunctionCall]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:40:36,986 - =========================================
INFO  04:40:36,986 - Starting semantic analysis....
INFO  04:40:37,021 - Constant N declared  at line 2
INFO  04:40:37,022 - Global variable x declared at line 3
INFO  04:40:37,022 - Global variable y declared at line 3
INFO  04:40:37,022 - Global array arr[] declared at line 3
INFO  04:40:37,022 - Function sum is being parsed  at line 6
INFO  04:40:37,024 - Local parameter a declared at line 6
INFO  04:40:37,024 - Default parameter b declared at line 6
INFO  04:40:37,024 - Default parameter c declared at line 6
INFO  04:40:37,024 - Function parameter a accessed at line 7
INFO  04:40:37,024 - Function parameter b accessed at line 8
INFO  04:40:37,025 - Function parameter c accessed at line 9
INFO  04:40:37,025 - Function parameter a accessed at line 10
INFO  04:40:37,025 - Function parameter b accessed at line 10
INFO  04:40:37,025 - Function main is being parsed  at line 13
INFO  04:40:37,025 - Error! Calling function sum with too few arguments at line 14
INFO  04:40:37,025 - Global variable x accessed at line 15
INFO  04:40:37,025 - Semantic analysis completed.
ERROR 04:40:37,026 - An error occured in semantic analysis!
INFO  04:41:08,205 - Starting compilation of a file test/test4.mj
INFO  04:41:08,205 - Starting lexical analysis....
INFO  04:41:08,213 - Lexical analysis finished successfully!
INFO  04:41:08,213 - =========================================
INFO  04:41:08,214 - Starting syntax analysis....
INFO  04:41:08,333 - #2 program
INFO  04:41:08,334 - #48 Test4
INFO  04:41:08,334 - #7 const
INFO  04:41:08,335 - #48 int
INFO  04:41:08,335 - #48 N
INFO  04:41:08,336 - #35 =
INFO  04:41:08,336 - #49 50
INFO  04:41:08,336 - #38 ;
INFO  04:41:08,336 - #48 int
INFO  04:41:08,337 - #48 x
INFO  04:41:08,337 - #40 ,
INFO  04:41:08,341 - #48 y
INFO  04:41:08,341 - #40 ,
INFO  04:41:08,341 - #48 arr
INFO  04:41:08,342 - #44 [
INFO  04:41:08,342 - #45 ]
INFO  04:41:08,342 - #38 ;
INFO  04:41:08,343 - #46 {
INFO  04:41:08,343 - #48 int
INFO  04:41:08,344 - #48 sum
INFO  04:41:08,345 - #42 (
INFO  04:41:08,345 - #48 int
INFO  04:41:08,346 - #48 a
INFO  04:41:08,346 - #35 =
INFO  04:41:08,346 - #49 1
INFO  04:41:08,346 - #40 ,
INFO  04:41:08,346 - #48 int
INFO  04:41:08,346 - #48 b
INFO  04:41:08,347 - #35 =
INFO  04:41:08,347 - #49 10
INFO  04:41:08,347 - #40 ,
INFO  04:41:08,347 - #48 char
INFO  04:41:08,347 - #48 c
INFO  04:41:08,347 - #35 =
INFO  04:41:08,347 - #50 a
INFO  04:41:08,347 - #43 )
INFO  04:41:08,348 - #46 {
INFO  04:41:08,349 - #12 print
INFO  04:41:08,351 - #42 (
INFO  04:41:08,351 - #48 a
INFO  04:41:08,353 - #43 )
INFO  04:41:08,355 - #38 ;
INFO  04:41:08,355 - #12 print
INFO  04:41:08,356 - #42 (
INFO  04:41:08,356 - #48 b
INFO  04:41:08,356 - #43 )
INFO  04:41:08,356 - #38 ;
INFO  04:41:08,356 - #12 print
INFO  04:41:08,356 - #42 (
INFO  04:41:08,356 - #48 c
INFO  04:41:08,357 - #43 )
INFO  04:41:08,357 - #38 ;
INFO  04:41:08,357 - #14 return
INFO  04:41:08,357 - #48 a
INFO  04:41:08,357 - #22 +
INFO  04:41:08,357 - #48 b
INFO  04:41:08,360 - #38 ;
INFO  04:41:08,360 - #47 }
INFO  04:41:08,361 - #15 void
INFO  04:41:08,361 - #48 main
INFO  04:41:08,362 - #42 (
INFO  04:41:08,362 - #43 )
INFO  04:41:08,363 - #46 {
INFO  04:41:08,368 - #48 sum
INFO  04:41:08,368 - #42 (
INFO  04:41:08,368 - #43 )
INFO  04:41:08,369 - #38 ;
INFO  04:41:08,370 - #12 print
INFO  04:41:08,370 - #42 (
INFO  04:41:08,370 - #48 x
INFO  04:41:08,370 - #43 )
INFO  04:41:08,370 - #38 ;
INFO  04:41:08,370 - #47 }
INFO  04:41:08,370 - #47 }
INFO  04:41:08,372 - Syntax analysis finished successfully!
INFO  04:41:08,372 - Syntax tree: 
INFO  04:41:08,374 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 sum
                ) [DesignatorClass]
                DesignatorFunctionCall(
                  FunctionCallNoArguments(
                  ) [FunctionCallNoArguments]
                ) [DesignatorFunctionCall]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:41:08,374 - =========================================
INFO  04:41:08,374 - Starting semantic analysis....
INFO  04:41:08,395 - Constant N declared  at line 2
INFO  04:41:08,395 - Global variable x declared at line 3
INFO  04:41:08,396 - Global variable y declared at line 3
INFO  04:41:08,396 - Global array arr[] declared at line 3
INFO  04:41:08,396 - Function sum is being parsed  at line 6
INFO  04:41:08,397 - Default parameter a declared at line 6
INFO  04:41:08,397 - Default parameter b declared at line 6
INFO  04:41:08,397 - Default parameter c declared at line 6
INFO  04:41:08,398 - Function parameter a accessed at line 7
INFO  04:41:08,398 - Function parameter b accessed at line 8
INFO  04:41:08,398 - Function parameter c accessed at line 9
INFO  04:41:08,398 - Function parameter a accessed at line 10
INFO  04:41:08,398 - Function parameter b accessed at line 10
INFO  04:41:08,399 - Function main is being parsed  at line 13
INFO  04:41:08,399 - Function sum is called at line 14
INFO  04:41:08,399 - Global variable x accessed at line 15
INFO  04:41:08,399 - Semantic analysis completed.
INFO  04:41:08,399 - Semantic analysis finished successfully!
INFO  04:41:08,399 - Symbol table: 
INFO  04:41:08,400 - =========================================
INFO  04:41:08,400 - Started generating code....
INFO  04:41:08,406 - Code generated successfully!
INFO  04:41:08,407 - Compiling file successfully completed!
INFO  04:41:23,127 - Starting compilation of a file test/test4.mj
INFO  04:41:23,127 - Starting lexical analysis....
INFO  04:41:23,132 - Lexical analysis finished successfully!
INFO  04:41:23,132 - =========================================
INFO  04:41:23,133 - Starting syntax analysis....
INFO  04:41:23,269 - #2 program
INFO  04:41:23,269 - #48 Test4
INFO  04:41:23,269 - #7 const
INFO  04:41:23,270 - #48 int
INFO  04:41:23,270 - #48 N
INFO  04:41:23,271 - #35 =
INFO  04:41:23,271 - #49 50
INFO  04:41:23,271 - #38 ;
INFO  04:41:23,272 - #48 int
INFO  04:41:23,272 - #48 x
INFO  04:41:23,272 - #40 ,
INFO  04:41:23,274 - #48 y
INFO  04:41:23,274 - #40 ,
INFO  04:41:23,275 - #48 arr
INFO  04:41:23,275 - #44 [
INFO  04:41:23,275 - #45 ]
INFO  04:41:23,275 - #38 ;
INFO  04:41:23,276 - #46 {
INFO  04:41:23,276 - #48 int
INFO  04:41:23,277 - #48 sum
INFO  04:41:23,277 - #42 (
INFO  04:41:23,279 - #48 int
INFO  04:41:23,279 - #48 a
INFO  04:41:23,279 - #35 =
INFO  04:41:23,279 - #49 1
INFO  04:41:23,279 - #40 ,
INFO  04:41:23,279 - #48 int
INFO  04:41:23,279 - #48 b
INFO  04:41:23,280 - #35 =
INFO  04:41:23,280 - #49 10
INFO  04:41:23,280 - #40 ,
INFO  04:41:23,280 - #48 char
INFO  04:41:23,280 - #48 c
INFO  04:41:23,280 - #35 =
INFO  04:41:23,280 - #50 a
INFO  04:41:23,280 - #43 )
INFO  04:41:23,281 - #46 {
INFO  04:41:23,282 - #12 print
INFO  04:41:23,283 - #42 (
INFO  04:41:23,284 - #48 a
INFO  04:41:23,285 - #43 )
INFO  04:41:23,287 - #38 ;
INFO  04:41:23,287 - #12 print
INFO  04:41:23,288 - #42 (
INFO  04:41:23,288 - #48 b
INFO  04:41:23,288 - #43 )
INFO  04:41:23,288 - #38 ;
INFO  04:41:23,288 - #12 print
INFO  04:41:23,288 - #42 (
INFO  04:41:23,288 - #48 c
INFO  04:41:23,288 - #43 )
INFO  04:41:23,288 - #38 ;
INFO  04:41:23,288 - #14 return
INFO  04:41:23,288 - #48 a
INFO  04:41:23,289 - #22 +
INFO  04:41:23,289 - #48 b
INFO  04:41:23,291 - #38 ;
INFO  04:41:23,291 - #47 }
INFO  04:41:23,291 - #15 void
INFO  04:41:23,292 - #48 main
INFO  04:41:23,293 - #42 (
INFO  04:41:23,293 - #43 )
INFO  04:41:23,294 - #46 {
INFO  04:41:23,298 - #48 x
INFO  04:41:23,298 - #35 =
INFO  04:41:23,298 - #48 sum
INFO  04:41:23,300 - #42 (
INFO  04:41:23,300 - #49 30
INFO  04:41:23,300 - #43 )
INFO  04:41:23,300 - #38 ;
INFO  04:41:23,301 - #12 print
INFO  04:41:23,301 - #42 (
INFO  04:41:23,301 - #48 x
INFO  04:41:23,301 - #43 )
INFO  04:41:23,301 - #38 ;
INFO  04:41:23,301 - #47 }
INFO  04:41:23,301 - #47 }
INFO  04:41:23,302 - Syntax analysis finished successfully!
INFO  04:41:23,302 - Syntax tree: 
INFO  04:41:23,304 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             sum
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         30
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                ) [Expr]
                              ) [SingleActualParameter]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  04:41:23,304 - =========================================
INFO  04:41:23,304 - Starting semantic analysis....
INFO  04:41:23,327 - Constant N declared  at line 2
INFO  04:41:23,327 - Global variable x declared at line 3
INFO  04:41:23,327 - Global variable y declared at line 3
INFO  04:41:23,327 - Global array arr[] declared at line 3
INFO  04:41:23,328 - Function sum is being parsed  at line 6
INFO  04:41:23,329 - Default parameter a declared at line 6
INFO  04:41:23,330 - Default parameter b declared at line 6
INFO  04:41:23,330 - Default parameter c declared at line 6
INFO  04:41:23,330 - Function parameter a accessed at line 7
INFO  04:41:23,330 - Function parameter b accessed at line 8
INFO  04:41:23,330 - Function parameter c accessed at line 9
INFO  04:41:23,330 - Function parameter a accessed at line 10
INFO  04:41:23,330 - Function parameter b accessed at line 10
INFO  04:41:23,331 - Function main is being parsed  at line 13
INFO  04:41:23,331 - Global variable x accessed at line 14
INFO  04:41:23,331 - Function sum is called at line 14
INFO  04:41:23,331 - Global variable x accessed at line 15
INFO  04:41:23,331 - Semantic analysis completed.
INFO  04:41:23,331 - Semantic analysis finished successfully!
INFO  04:41:23,331 - Symbol table: 
INFO  04:41:23,332 - =========================================
INFO  04:41:23,332 - Started generating code....
INFO  04:41:23,341 - Code generated successfully!
INFO  04:41:23,341 - Compiling file successfully completed!
INFO  05:12:32,050 - Starting compilation of a file test/test4.mj
INFO  05:12:32,050 - Starting lexical analysis....
INFO  05:12:32,054 - Lexical analysis finished successfully!
INFO  05:12:32,054 - =========================================
INFO  05:12:32,054 - Starting syntax analysis....
INFO  05:12:32,147 - #2 program
INFO  05:12:32,147 - #48 Test4
INFO  05:12:32,148 - #7 const
INFO  05:12:32,150 - #48 int
INFO  05:12:32,150 - #48 N
INFO  05:12:32,151 - #35 =
INFO  05:12:32,152 - #49 50
INFO  05:12:32,152 - #38 ;
INFO  05:12:32,152 - #48 int
INFO  05:12:32,153 - #48 x
INFO  05:12:32,153 - #40 ,
INFO  05:12:32,155 - #48 y
INFO  05:12:32,155 - #40 ,
INFO  05:12:32,155 - #48 arr
INFO  05:12:32,155 - #44 [
INFO  05:12:32,155 - #45 ]
INFO  05:12:32,155 - #38 ;
INFO  05:12:32,156 - #46 {
INFO  05:12:32,156 - #48 int
INFO  05:12:32,157 - #48 sum
INFO  05:12:32,157 - #42 (
INFO  05:12:32,158 - #48 int
INFO  05:12:32,158 - #48 a
INFO  05:12:32,158 - #35 =
INFO  05:12:32,158 - #49 1
INFO  05:12:32,159 - #40 ,
INFO  05:12:32,160 - #48 int
INFO  05:12:32,160 - #48 b
INFO  05:12:32,160 - #35 =
INFO  05:12:32,160 - #49 10
INFO  05:12:32,160 - #40 ,
INFO  05:12:32,160 - #48 char
INFO  05:12:32,160 - #48 c
INFO  05:12:32,160 - #35 =
INFO  05:12:32,161 - #50 a
INFO  05:12:32,161 - #43 )
INFO  05:12:32,161 - #46 {
INFO  05:12:32,162 - #12 print
INFO  05:12:32,163 - #42 (
INFO  05:12:32,163 - #48 a
INFO  05:12:32,165 - #43 )
INFO  05:12:32,168 - #38 ;
INFO  05:12:32,168 - #12 print
INFO  05:12:32,168 - #42 (
INFO  05:12:32,169 - #48 b
INFO  05:12:32,169 - #43 )
INFO  05:12:32,169 - #38 ;
INFO  05:12:32,169 - #12 print
INFO  05:12:32,169 - #42 (
INFO  05:12:32,169 - #48 c
INFO  05:12:32,169 - #43 )
INFO  05:12:32,170 - #38 ;
INFO  05:12:32,170 - #14 return
INFO  05:12:32,170 - #48 a
INFO  05:12:32,170 - #22 +
INFO  05:12:32,170 - #48 b
INFO  05:12:32,172 - #38 ;
INFO  05:12:32,172 - #47 }
INFO  05:12:32,172 - #15 void
INFO  05:12:32,173 - #48 main
INFO  05:12:32,174 - #42 (
INFO  05:12:32,174 - #43 )
INFO  05:12:32,175 - #46 {
INFO  05:12:32,179 - #48 x
INFO  05:12:32,179 - #35 =
INFO  05:12:32,179 - #48 sum
INFO  05:12:32,181 - #42 (
INFO  05:12:32,181 - #49 30
INFO  05:12:32,181 - #43 )
INFO  05:12:32,181 - #38 ;
INFO  05:12:32,182 - #12 print
INFO  05:12:32,182 - #42 (
INFO  05:12:32,182 - #48 x
INFO  05:12:32,182 - #43 )
INFO  05:12:32,182 - #38 ;
INFO  05:12:32,182 - #8 if
INFO  05:12:32,182 - #42 (
INFO  05:12:32,183 - #48 x
INFO  05:12:32,183 - #29 >
INFO  05:12:32,183 - #49 5
INFO  05:12:32,185 - #43 )
INFO  05:12:32,185 - #46 {
INFO  05:12:32,185 - #12 print
INFO  05:12:32,185 - #42 (
INFO  05:12:32,185 - #48 x
INFO  05:12:32,185 - #43 )
INFO  05:12:32,185 - #38 ;
INFO  05:12:32,185 - #47 }
INFO  05:12:32,186 - #47 }
INFO  05:12:32,187 - #47 }
INFO  05:12:32,189 - Syntax analysis finished successfully!
INFO  05:12:32,189 - Syntax tree: 
INFO  05:12:32,192 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   x
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorFunctionCall(
                              DesignatorClass(
                               sum
                              ) [DesignatorClass]
                              FunctionCallHasArguments(
                                SingleActualParameter(
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           30
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                  ) [Expr]
                                ) [SingleActualParameter]
                              ) [FunctionCallHasArguments]
                            ) [FactorFunctionCall]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            PrintStatement(
              Expr(
                ExpressionClass(
                  ExpressionPositive(
                  ) [ExpressionPositive]
                  Terminal(
                    FactorDesignator(
                      DesignatorClass(
                       x
                      ) [DesignatorClass]
                    ) [FactorDesignator]
                  ) [Terminal]
                ) [ExpressionClass]
              ) [Expr]
              HasNotPrintConstant(
              ) [HasNotPrintConstant]
            ) [PrintStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          IfStatement(
            IfClause(
              IfStart(
              ) [IfStart]
              IfConditionClass(
                SingleCondition(
                  SingleConditionTerm(
                    ConditionFactRelop(
                      ConditionFact(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [ConditionFact]
                      RelationGreater(
                      ) [RelationGreater]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorNumberConstant(
                              NumberConstant(
                               5
                              ) [NumberConstant]
                            ) [FactorNumberConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFactRelop]
                  ) [SingleConditionTerm]
                ) [SingleCondition]
              ) [IfConditionClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      PrintStatement(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                        HasNotPrintConstant(
                        ) [HasNotPrintConstant]
                      ) [PrintStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
            ) [IfClause]
            HasNotElseClause(
            ) [HasNotElseClause]
          ) [IfStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:12:32,193 - =========================================
INFO  05:12:32,193 - Starting semantic analysis....
INFO  05:12:32,208 - Constant N declared  at line 2
INFO  05:12:32,208 - Global variable x declared at line 3
INFO  05:12:32,208 - Global variable y declared at line 3
INFO  05:12:32,208 - Global array arr[] declared at line 3
INFO  05:12:32,209 - Function sum is being parsed  at line 6
INFO  05:12:32,210 - Default parameter a declared at line 6
INFO  05:12:32,210 - Default parameter b declared at line 6
INFO  05:12:32,210 - Default parameter c declared at line 6
INFO  05:12:32,211 - Function parameter a accessed at line 7
INFO  05:12:32,211 - Function parameter b accessed at line 8
INFO  05:12:32,211 - Function parameter c accessed at line 9
INFO  05:12:32,211 - Function parameter a accessed at line 10
INFO  05:12:32,211 - Function parameter b accessed at line 10
INFO  05:12:32,211 - Function main is being parsed  at line 13
INFO  05:12:32,211 - Global variable x accessed at line 14
INFO  05:12:32,211 - Function sum is called at line 14
INFO  05:12:32,212 - Global variable x accessed at line 15
INFO  05:12:32,212 - Global variable x accessed at line 16
INFO  05:12:32,212 - Global variable x accessed at line 17
INFO  05:12:32,212 - Semantic analysis completed.
INFO  05:12:32,212 - Semantic analysis finished successfully!
INFO  05:12:32,212 - Symbol table: 
INFO  05:12:32,213 - =========================================
INFO  05:12:32,213 - Started generating code....
INFO  05:12:32,221 - Code generated successfully!
INFO  05:12:32,222 - Compiling file successfully completed!
INFO  05:12:52,934 - Starting compilation of a file test/test4.mj
INFO  05:12:52,934 - Starting lexical analysis....
INFO  05:12:52,940 - Lexical analysis finished successfully!
INFO  05:12:52,940 - =========================================
INFO  05:12:52,940 - Starting syntax analysis....
INFO  05:12:53,030 - #2 program
INFO  05:12:53,030 - #48 Test4
INFO  05:12:53,030 - #7 const
INFO  05:12:53,032 - #48 int
INFO  05:12:53,032 - #48 N
INFO  05:12:53,033 - #35 =
INFO  05:12:53,033 - #49 50
INFO  05:12:53,033 - #38 ;
INFO  05:12:53,034 - #48 int
INFO  05:12:53,035 - #48 x
INFO  05:12:53,035 - #40 ,
INFO  05:12:53,036 - #48 y
INFO  05:12:53,036 - #40 ,
INFO  05:12:53,037 - #48 arr
INFO  05:12:53,037 - #44 [
INFO  05:12:53,037 - #45 ]
INFO  05:12:53,037 - #38 ;
INFO  05:12:53,038 - #46 {
INFO  05:12:53,039 - #48 int
INFO  05:12:53,040 - #48 sum
INFO  05:12:53,040 - #42 (
INFO  05:12:53,041 - #48 int
INFO  05:12:53,041 - #48 a
INFO  05:12:53,041 - #35 =
INFO  05:12:53,042 - #49 1
INFO  05:12:53,042 - #40 ,
INFO  05:12:53,042 - #48 int
INFO  05:12:53,042 - #48 b
INFO  05:12:53,042 - #35 =
INFO  05:12:53,042 - #49 10
INFO  05:12:53,042 - #40 ,
INFO  05:12:53,042 - #48 char
INFO  05:12:53,042 - #48 c
INFO  05:12:53,042 - #35 =
INFO  05:12:53,043 - #50 a
INFO  05:12:53,043 - #43 )
INFO  05:12:53,043 - #46 {
INFO  05:12:53,045 - #12 print
INFO  05:12:53,046 - #42 (
INFO  05:12:53,046 - #48 a
INFO  05:12:53,048 - #43 )
INFO  05:12:53,051 - #38 ;
INFO  05:12:53,051 - #12 print
INFO  05:12:53,051 - #42 (
INFO  05:12:53,051 - #48 b
INFO  05:12:53,051 - #43 )
INFO  05:12:53,052 - #38 ;
INFO  05:12:53,052 - #12 print
INFO  05:12:53,052 - #42 (
INFO  05:12:53,052 - #48 c
INFO  05:12:53,052 - #43 )
INFO  05:12:53,052 - #38 ;
INFO  05:12:53,052 - #14 return
INFO  05:12:53,052 - #48 a
INFO  05:12:53,052 - #22 +
INFO  05:12:53,053 - #48 b
INFO  05:12:53,054 - #38 ;
INFO  05:12:53,055 - #47 }
INFO  05:12:53,055 - #15 void
INFO  05:12:53,056 - #48 main
INFO  05:12:53,057 - #42 (
INFO  05:12:53,057 - #43 )
INFO  05:12:53,058 - #46 {
INFO  05:12:53,063 - #48 x
INFO  05:12:53,063 - #35 =
INFO  05:12:53,063 - #48 sum
INFO  05:12:53,065 - #42 (
INFO  05:12:53,065 - #49 30
INFO  05:12:53,065 - #43 )
INFO  05:12:53,065 - #38 ;
INFO  05:12:53,066 - #12 print
INFO  05:12:53,067 - #42 (
INFO  05:12:53,067 - #48 x
INFO  05:12:53,067 - #43 )
INFO  05:12:53,067 - #38 ;
INFO  05:12:53,067 - #8 if
INFO  05:12:53,067 - #42 (
INFO  05:12:53,068 - #48 x
INFO  05:12:53,068 - #43 )
INFO  05:12:53,069 - #46 {
INFO  05:12:53,069 - #12 print
INFO  05:12:53,069 - #42 (
INFO  05:12:53,070 - #48 x
INFO  05:12:53,070 - #43 )
INFO  05:12:53,070 - #38 ;
INFO  05:12:53,070 - #47 }
INFO  05:12:53,070 - #47 }
INFO  05:12:53,073 - #47 }
INFO  05:12:53,074 - Syntax analysis finished successfully!
INFO  05:12:53,074 - Syntax tree: 
INFO  05:12:53,077 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   x
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorFunctionCall(
                              DesignatorClass(
                               sum
                              ) [DesignatorClass]
                              FunctionCallHasArguments(
                                SingleActualParameter(
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           30
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                  ) [Expr]
                                ) [SingleActualParameter]
                              ) [FunctionCallHasArguments]
                            ) [FactorFunctionCall]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            PrintStatement(
              Expr(
                ExpressionClass(
                  ExpressionPositive(
                  ) [ExpressionPositive]
                  Terminal(
                    FactorDesignator(
                      DesignatorClass(
                       x
                      ) [DesignatorClass]
                    ) [FactorDesignator]
                  ) [Terminal]
                ) [ExpressionClass]
              ) [Expr]
              HasNotPrintConstant(
              ) [HasNotPrintConstant]
            ) [PrintStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          IfStatement(
            IfClause(
              IfStart(
              ) [IfStart]
              IfConditionClass(
                SingleCondition(
                  SingleConditionTerm(
                    ConditionFact(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               x
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFact]
                  ) [SingleConditionTerm]
                ) [SingleCondition]
              ) [IfConditionClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      PrintStatement(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                        HasNotPrintConstant(
                        ) [HasNotPrintConstant]
                      ) [PrintStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
            ) [IfClause]
            HasNotElseClause(
            ) [HasNotElseClause]
          ) [IfStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:12:53,080 - =========================================
INFO  05:12:53,080 - Starting semantic analysis....
INFO  05:12:53,111 - Constant N declared  at line 2
INFO  05:12:53,111 - Global variable x declared at line 3
INFO  05:12:53,112 - Global variable y declared at line 3
INFO  05:12:53,112 - Global array arr[] declared at line 3
INFO  05:12:53,112 - Function sum is being parsed  at line 6
INFO  05:12:53,113 - Default parameter a declared at line 6
INFO  05:12:53,113 - Default parameter b declared at line 6
INFO  05:12:53,113 - Default parameter c declared at line 6
INFO  05:12:53,113 - Function parameter a accessed at line 7
INFO  05:12:53,114 - Function parameter b accessed at line 8
INFO  05:12:53,114 - Function parameter c accessed at line 9
INFO  05:12:53,114 - Function parameter a accessed at line 10
INFO  05:12:53,114 - Function parameter b accessed at line 10
INFO  05:12:53,114 - Function main is being parsed  at line 13
INFO  05:12:53,114 - Global variable x accessed at line 14
INFO  05:12:53,115 - Function sum is called at line 14
INFO  05:12:53,115 - Global variable x accessed at line 15
INFO  05:12:53,115 - Global variable x accessed at line 16
INFO  05:12:53,115 - Global variable x accessed at line 17
INFO  05:12:53,115 - Error! Condition in IF statement must be BOOLEAN type at line 16
INFO  05:12:53,115 - Semantic analysis completed.
ERROR 05:12:53,115 - An error occured in semantic analysis!
INFO  05:13:04,255 - Starting compilation of a file test/test4.mj
INFO  05:13:04,256 - Starting lexical analysis....
INFO  05:13:04,259 - Lexical analysis finished successfully!
INFO  05:13:04,260 - =========================================
INFO  05:13:04,260 - Starting syntax analysis....
INFO  05:13:04,357 - #2 program
INFO  05:13:04,357 - #48 Test4
INFO  05:13:04,357 - #7 const
INFO  05:13:04,359 - #48 int
INFO  05:13:04,359 - #48 N
INFO  05:13:04,360 - #35 =
INFO  05:13:04,360 - #49 50
INFO  05:13:04,360 - #38 ;
INFO  05:13:04,361 - #48 int
INFO  05:13:04,361 - #48 x
INFO  05:13:04,361 - #40 ,
INFO  05:13:04,363 - #48 y
INFO  05:13:04,363 - #40 ,
INFO  05:13:04,363 - #48 arr
INFO  05:13:04,363 - #44 [
INFO  05:13:04,363 - #45 ]
INFO  05:13:04,363 - #38 ;
INFO  05:13:04,364 - #46 {
INFO  05:13:04,365 - #48 int
INFO  05:13:04,365 - #48 sum
INFO  05:13:04,366 - #42 (
INFO  05:13:04,366 - #48 int
INFO  05:13:04,367 - #48 a
INFO  05:13:04,367 - #35 =
INFO  05:13:04,367 - #49 1
INFO  05:13:04,367 - #40 ,
INFO  05:13:04,367 - #48 int
INFO  05:13:04,367 - #48 b
INFO  05:13:04,367 - #35 =
INFO  05:13:04,367 - #49 10
INFO  05:13:04,367 - #40 ,
INFO  05:13:04,368 - #48 char
INFO  05:13:04,368 - #48 c
INFO  05:13:04,368 - #35 =
INFO  05:13:04,368 - #50 a
INFO  05:13:04,368 - #43 )
INFO  05:13:04,369 - #46 {
INFO  05:13:04,370 - #12 print
INFO  05:13:04,371 - #42 (
INFO  05:13:04,371 - #48 a
INFO  05:13:04,373 - #43 )
INFO  05:13:04,376 - #38 ;
INFO  05:13:04,376 - #12 print
INFO  05:13:04,376 - #42 (
INFO  05:13:04,376 - #48 b
INFO  05:13:04,376 - #43 )
INFO  05:13:04,376 - #38 ;
INFO  05:13:04,376 - #12 print
INFO  05:13:04,377 - #42 (
INFO  05:13:04,377 - #48 c
INFO  05:13:04,377 - #43 )
INFO  05:13:04,377 - #38 ;
INFO  05:13:04,377 - #14 return
INFO  05:13:04,377 - #48 a
INFO  05:13:04,377 - #22 +
INFO  05:13:04,377 - #48 b
INFO  05:13:04,379 - #38 ;
INFO  05:13:04,379 - #47 }
INFO  05:13:04,380 - #15 void
INFO  05:13:04,381 - #48 main
INFO  05:13:04,381 - #42 (
INFO  05:13:04,382 - #43 )
INFO  05:13:04,383 - #46 {
INFO  05:13:04,387 - #48 x
INFO  05:13:04,387 - #35 =
INFO  05:13:04,387 - #48 sum
INFO  05:13:04,389 - #42 (
INFO  05:13:04,389 - #49 30
INFO  05:13:04,389 - #43 )
INFO  05:13:04,389 - #38 ;
INFO  05:13:04,390 - #12 print
INFO  05:13:04,390 - #42 (
INFO  05:13:04,390 - #48 x
INFO  05:13:04,391 - #43 )
INFO  05:13:04,391 - #38 ;
INFO  05:13:04,391 - #8 if
INFO  05:13:04,391 - #42 (
INFO  05:13:04,392 - #48 x
INFO  05:13:04,392 - #29 >
INFO  05:13:04,392 - #49 5
INFO  05:13:04,394 - #33 &&
INFO  05:13:04,394 - #48 x
INFO  05:13:04,394 - #31 <
INFO  05:13:04,394 - #49 10
INFO  05:13:04,395 - #43 )
INFO  05:13:04,395 - #46 {
INFO  05:13:04,395 - #12 print
INFO  05:13:04,395 - #42 (
INFO  05:13:04,395 - #48 x
INFO  05:13:04,396 - #43 )
INFO  05:13:04,396 - #38 ;
INFO  05:13:04,396 - #47 }
INFO  05:13:04,396 - #47 }
INFO  05:13:04,399 - #47 }
INFO  05:13:04,400 - Syntax analysis finished successfully!
INFO  05:13:04,400 - Syntax tree: 
INFO  05:13:04,402 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   x
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorFunctionCall(
                              DesignatorClass(
                               sum
                              ) [DesignatorClass]
                              FunctionCallHasArguments(
                                SingleActualParameter(
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           30
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                  ) [Expr]
                                ) [SingleActualParameter]
                              ) [FunctionCallHasArguments]
                            ) [FactorFunctionCall]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            PrintStatement(
              Expr(
                ExpressionClass(
                  ExpressionPositive(
                  ) [ExpressionPositive]
                  Terminal(
                    FactorDesignator(
                      DesignatorClass(
                       x
                      ) [DesignatorClass]
                    ) [FactorDesignator]
                  ) [Terminal]
                ) [ExpressionClass]
              ) [Expr]
              HasNotPrintConstant(
              ) [HasNotPrintConstant]
            ) [PrintStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          IfStatement(
            IfClause(
              IfStart(
              ) [IfStart]
              IfConditionClass(
                SingleCondition(
                  MultipleConditionTerms(
                    SingleConditionTerm(
                      ConditionFactRelop(
                        ConditionFact(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorDesignator(
                                  DesignatorClass(
                                   x
                                  ) [DesignatorClass]
                                ) [FactorDesignator]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [ConditionFact]
                        RelationGreater(
                        ) [RelationGreater]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 5
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [ConditionFactRelop]
                    ) [SingleConditionTerm]
                    ConditionFactRelop(
                      ConditionFact(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [ConditionFact]
                      RelationLess(
                      ) [RelationLess]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorNumberConstant(
                              NumberConstant(
                               10
                              ) [NumberConstant]
                            ) [FactorNumberConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFactRelop]
                  ) [MultipleConditionTerms]
                ) [SingleCondition]
              ) [IfConditionClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      PrintStatement(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                        HasNotPrintConstant(
                        ) [HasNotPrintConstant]
                      ) [PrintStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
            ) [IfClause]
            HasNotElseClause(
            ) [HasNotElseClause]
          ) [IfStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:13:04,423 - =========================================
INFO  05:13:04,423 - Starting semantic analysis....
INFO  05:13:04,438 - Constant N declared  at line 2
INFO  05:13:04,438 - Global variable x declared at line 3
INFO  05:13:04,438 - Global variable y declared at line 3
INFO  05:13:04,438 - Global array arr[] declared at line 3
INFO  05:13:04,438 - Function sum is being parsed  at line 6
INFO  05:13:04,440 - Default parameter a declared at line 6
INFO  05:13:04,441 - Default parameter b declared at line 6
INFO  05:13:04,441 - Default parameter c declared at line 6
INFO  05:13:04,441 - Function parameter a accessed at line 7
INFO  05:13:04,441 - Function parameter b accessed at line 8
INFO  05:13:04,441 - Function parameter c accessed at line 9
INFO  05:13:04,441 - Function parameter a accessed at line 10
INFO  05:13:04,441 - Function parameter b accessed at line 10
INFO  05:13:04,442 - Function main is being parsed  at line 13
INFO  05:13:04,442 - Global variable x accessed at line 14
INFO  05:13:04,442 - Function sum is called at line 14
INFO  05:13:04,442 - Global variable x accessed at line 15
INFO  05:13:04,442 - Global variable x accessed at line 16
INFO  05:13:04,443 - Global variable x accessed at line 16
INFO  05:13:04,443 - Global variable x accessed at line 17
INFO  05:13:04,443 - Semantic analysis completed.
INFO  05:13:04,443 - Semantic analysis finished successfully!
INFO  05:13:04,443 - Symbol table: 
INFO  05:13:04,445 - =========================================
INFO  05:13:04,445 - Started generating code....
INFO  05:13:04,454 - Code generated successfully!
INFO  05:13:04,454 - Compiling file successfully completed!
INFO  05:13:11,082 - Starting compilation of a file test/test4.mj
INFO  05:13:11,082 - Starting lexical analysis....
INFO  05:13:11,090 - Lexical analysis finished successfully!
INFO  05:13:11,090 - =========================================
INFO  05:13:11,091 - Starting syntax analysis....
INFO  05:13:11,180 - #2 program
INFO  05:13:11,180 - #48 Test4
INFO  05:13:11,180 - #7 const
INFO  05:13:11,181 - #48 int
INFO  05:13:11,181 - #48 N
INFO  05:13:11,182 - #35 =
INFO  05:13:11,182 - #49 50
INFO  05:13:11,182 - #38 ;
INFO  05:13:11,183 - #48 int
INFO  05:13:11,184 - #48 x
INFO  05:13:11,184 - #40 ,
INFO  05:13:11,185 - #48 y
INFO  05:13:11,186 - #40 ,
INFO  05:13:11,186 - #48 arr
INFO  05:13:11,186 - #44 [
INFO  05:13:11,186 - #45 ]
INFO  05:13:11,186 - #38 ;
INFO  05:13:11,187 - #46 {
INFO  05:13:11,187 - #48 int
INFO  05:13:11,188 - #48 sum
INFO  05:13:11,189 - #42 (
INFO  05:13:11,190 - #48 int
INFO  05:13:11,190 - #48 a
INFO  05:13:11,190 - #35 =
INFO  05:13:11,190 - #49 1
INFO  05:13:11,190 - #40 ,
INFO  05:13:11,190 - #48 int
INFO  05:13:11,190 - #48 b
INFO  05:13:11,191 - #35 =
INFO  05:13:11,191 - #49 10
INFO  05:13:11,191 - #40 ,
INFO  05:13:11,191 - #48 char
INFO  05:13:11,191 - #48 c
INFO  05:13:11,191 - #35 =
INFO  05:13:11,191 - #50 a
INFO  05:13:11,191 - #43 )
INFO  05:13:11,192 - #46 {
INFO  05:13:11,193 - #12 print
INFO  05:13:11,194 - #42 (
INFO  05:13:11,194 - #48 a
INFO  05:13:11,195 - #43 )
INFO  05:13:11,197 - #38 ;
INFO  05:13:11,198 - #12 print
INFO  05:13:11,198 - #42 (
INFO  05:13:11,198 - #48 b
INFO  05:13:11,199 - #43 )
INFO  05:13:11,199 - #38 ;
INFO  05:13:11,199 - #12 print
INFO  05:13:11,199 - #42 (
INFO  05:13:11,199 - #48 c
INFO  05:13:11,199 - #43 )
INFO  05:13:11,199 - #38 ;
INFO  05:13:11,200 - #14 return
INFO  05:13:11,200 - #48 a
INFO  05:13:11,200 - #22 +
INFO  05:13:11,200 - #48 b
INFO  05:13:11,202 - #38 ;
INFO  05:13:11,203 - #47 }
INFO  05:13:11,203 - #15 void
INFO  05:13:11,203 - #48 main
INFO  05:13:11,204 - #42 (
INFO  05:13:11,204 - #43 )
INFO  05:13:11,205 - #46 {
INFO  05:13:11,209 - #48 x
INFO  05:13:11,209 - #35 =
INFO  05:13:11,209 - #48 sum
INFO  05:13:11,211 - #42 (
INFO  05:13:11,211 - #49 30
INFO  05:13:11,211 - #43 )
INFO  05:13:11,211 - #38 ;
INFO  05:13:11,212 - #12 print
INFO  05:13:11,212 - #42 (
INFO  05:13:11,212 - #48 x
INFO  05:13:11,212 - #43 )
INFO  05:13:11,212 - #38 ;
INFO  05:13:11,212 - #8 if
INFO  05:13:11,212 - #42 (
INFO  05:13:11,213 - #48 x
INFO  05:13:11,213 - #29 >
INFO  05:13:11,213 - #49 5
INFO  05:13:11,214 - #33 &&
INFO  05:13:11,215 - #48 x
INFO  05:13:11,215 - #31 <
INFO  05:13:11,215 - #49 10
INFO  05:13:11,216 - #34 ||
INFO  05:13:11,216 - #48 x
INFO  05:13:11,216 - #43 )
INFO  05:13:11,217 - #46 {
INFO  05:13:11,217 - #12 print
INFO  05:13:11,217 - #42 (
INFO  05:13:11,218 - #48 x
INFO  05:13:11,218 - #43 )
INFO  05:13:11,218 - #38 ;
INFO  05:13:11,218 - #47 }
INFO  05:13:11,218 - #47 }
INFO  05:13:11,220 - #47 }
INFO  05:13:11,221 - Syntax analysis finished successfully!
INFO  05:13:11,221 - Syntax tree: 
INFO  05:13:11,223 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      EmptyProgramVariablesList(
      ) [EmptyProgramVariablesList]
      ProgramConstants(
        ConstantsClass(
          Type(
           int
          ) [Type]
          SingleConstantList(
            ConstantDeclaration(
             N
              NumConstClass(
                NumberConstant(
                 50
                ) [NumberConstant]
              ) [NumConstClass]
            ) [ConstantDeclaration]
          ) [SingleConstantList]
        ) [ConstantsClass]
      ) [ProgramConstants]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               x
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             y
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
          GlobalVariableDeclaration(
           arr
            VarIsArray(
            ) [VarIsArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   x
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorFunctionCall(
                              DesignatorClass(
                               sum
                              ) [DesignatorClass]
                              FunctionCallHasArguments(
                                SingleActualParameter(
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           30
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                  ) [Expr]
                                ) [SingleActualParameter]
                              ) [FunctionCallHasArguments]
                            ) [FactorFunctionCall]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            PrintStatement(
              Expr(
                ExpressionClass(
                  ExpressionPositive(
                  ) [ExpressionPositive]
                  Terminal(
                    FactorDesignator(
                      DesignatorClass(
                       x
                      ) [DesignatorClass]
                    ) [FactorDesignator]
                  ) [Terminal]
                ) [ExpressionClass]
              ) [Expr]
              HasNotPrintConstant(
              ) [HasNotPrintConstant]
            ) [PrintStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          IfStatement(
            IfClause(
              IfStart(
              ) [IfStart]
              IfConditionClass(
                MultipleConditions(
                  SingleCondition(
                    MultipleConditionTerms(
                      SingleConditionTerm(
                        ConditionFactRelop(
                          ConditionFact(
                            Expr(
                              ExpressionClass(
                                ExpressionPositive(
                                ) [ExpressionPositive]
                                Terminal(
                                  FactorDesignator(
                                    DesignatorClass(
                                     x
                                    ) [DesignatorClass]
                                  ) [FactorDesignator]
                                ) [Terminal]
                              ) [ExpressionClass]
                            ) [Expr]
                          ) [ConditionFact]
                          RelationGreater(
                          ) [RelationGreater]
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorNumberConstant(
                                  NumberConstant(
                                   5
                                  ) [NumberConstant]
                                ) [FactorNumberConstant]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [ConditionFactRelop]
                      ) [SingleConditionTerm]
                      ConditionFactRelop(
                        ConditionFact(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorDesignator(
                                  DesignatorClass(
                                   x
                                  ) [DesignatorClass]
                                ) [FactorDesignator]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [ConditionFact]
                        RelationLess(
                        ) [RelationLess]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 10
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [ConditionFactRelop]
                    ) [MultipleConditionTerms]
                  ) [SingleCondition]
                  SingleConditionTerm(
                    ConditionFact(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               x
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFact]
                  ) [SingleConditionTerm]
                ) [MultipleConditions]
              ) [IfConditionClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      PrintStatement(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                        HasNotPrintConstant(
                        ) [HasNotPrintConstant]
                      ) [PrintStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
            ) [IfClause]
            HasNotElseClause(
            ) [HasNotElseClause]
          ) [IfStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:13:11,224 - =========================================
INFO  05:13:11,224 - Starting semantic analysis....
INFO  05:13:11,236 - Constant N declared  at line 2
INFO  05:13:11,237 - Global variable x declared at line 3
INFO  05:13:11,237 - Global variable y declared at line 3
INFO  05:13:11,237 - Global array arr[] declared at line 3
INFO  05:13:11,237 - Function sum is being parsed  at line 6
INFO  05:13:11,238 - Default parameter a declared at line 6
INFO  05:13:11,238 - Default parameter b declared at line 6
INFO  05:13:11,238 - Default parameter c declared at line 6
INFO  05:13:11,239 - Function parameter a accessed at line 7
INFO  05:13:11,239 - Function parameter b accessed at line 8
INFO  05:13:11,240 - Function parameter c accessed at line 9
INFO  05:13:11,240 - Function parameter a accessed at line 10
INFO  05:13:11,240 - Function parameter b accessed at line 10
INFO  05:13:11,240 - Function main is being parsed  at line 13
INFO  05:13:11,240 - Global variable x accessed at line 14
INFO  05:13:11,240 - Function sum is called at line 14
INFO  05:13:11,240 - Global variable x accessed at line 15
INFO  05:13:11,241 - Global variable x accessed at line 16
INFO  05:13:11,241 - Global variable x accessed at line 16
INFO  05:13:11,241 - Global variable x accessed at line 16
INFO  05:13:11,241 - Error! Types must be compatibile at line 4
INFO  05:13:11,241 - Global variable x accessed at line 17
INFO  05:13:11,241 - Error! Condition in IF statement must be BOOLEAN type at line 16
INFO  05:13:11,241 - Semantic analysis completed.
ERROR 05:13:11,242 - An error occured in semantic analysis!
INFO  05:13:24,809 - Starting compilation of a file test/test4.mj
INFO  05:13:24,810 - Starting lexical analysis....
INFO  05:13:24,815 - Lexical analysis finished successfully!
INFO  05:13:24,815 - =========================================
INFO  05:13:24,815 - Starting syntax analysis....
INFO  05:13:24,895 - #2 program
INFO  05:13:24,895 - #48 Test4
INFO  05:13:24,896 - #7 const
INFO  05:13:24,896 - #48 int
INFO  05:13:24,897 - #48 N
INFO  05:13:24,897 - #35 =
INFO  05:13:24,898 - #49 50
INFO  05:13:24,898 - #38 ;
INFO  05:13:24,898 - #48 int
INFO  05:13:24,898 - #48 x
INFO  05:13:24,898 - #40 ,
INFO  05:13:24,900 - #48 y
INFO  05:13:24,900 - #40 ,
INFO  05:13:24,900 - #48 arr
INFO  05:13:24,900 - #44 [
INFO  05:13:24,900 - #45 ]
INFO  05:13:24,900 - #38 ;
INFO  05:13:24,901 - #48 bool
INFO  05:13:24,901 - #48 b
INFO  05:13:24,901 - #38 ;
INFO  05:13:24,901 - #46 {
INFO  05:13:24,902 - #48 int
INFO  05:13:24,902 - #48 sum
INFO  05:13:24,903 - #42 (
INFO  05:13:24,903 - #48 int
INFO  05:13:24,903 - #48 a
INFO  05:13:24,903 - #35 =
INFO  05:13:24,903 - #49 1
INFO  05:13:24,903 - #40 ,
INFO  05:13:24,904 - #48 int
INFO  05:13:24,904 - #48 b
INFO  05:13:24,904 - #35 =
INFO  05:13:24,904 - #49 10
INFO  05:13:24,904 - #40 ,
INFO  05:13:24,905 - #48 char
INFO  05:13:24,905 - #48 c
INFO  05:13:24,905 - #35 =
INFO  05:13:24,905 - #50 a
INFO  05:13:24,905 - #43 )
INFO  05:13:24,906 - #46 {
INFO  05:13:24,906 - #12 print
INFO  05:13:24,908 - #42 (
INFO  05:13:24,909 - #48 a
INFO  05:13:24,911 - #43 )
INFO  05:13:24,914 - #38 ;
INFO  05:13:24,914 - #12 print
INFO  05:13:24,915 - #42 (
INFO  05:13:24,915 - #48 b
INFO  05:13:24,915 - #43 )
INFO  05:13:24,915 - #38 ;
INFO  05:13:24,915 - #12 print
INFO  05:13:24,916 - #42 (
INFO  05:13:24,916 - #48 c
INFO  05:13:24,916 - #43 )
INFO  05:13:24,916 - #38 ;
INFO  05:13:24,916 - #14 return
INFO  05:13:24,916 - #48 a
INFO  05:13:24,917 - #22 +
INFO  05:13:24,917 - #48 b
INFO  05:13:24,920 - #38 ;
INFO  05:13:24,920 - #47 }
INFO  05:13:24,921 - #15 void
INFO  05:13:24,922 - #48 main
INFO  05:13:24,927 - #42 (
INFO  05:13:24,927 - #43 )
INFO  05:13:24,928 - #46 {
INFO  05:13:24,928 - #48 x
INFO  05:13:24,928 - #35 =
INFO  05:13:24,928 - #48 sum
INFO  05:13:24,930 - #42 (
INFO  05:13:24,930 - #49 30
INFO  05:13:24,930 - #43 )
INFO  05:13:24,930 - #38 ;
INFO  05:13:24,931 - #12 print
INFO  05:13:24,931 - #42 (
INFO  05:13:24,931 - #48 x
INFO  05:13:24,931 - #43 )
INFO  05:13:24,931 - #38 ;
INFO  05:13:24,931 - #48 b
INFO  05:13:24,931 - #35 =
INFO  05:13:24,931 - #51 true
INFO  05:13:24,931 - #38 ;
INFO  05:13:24,931 - #8 if
INFO  05:13:24,932 - #42 (
INFO  05:13:24,932 - #48 x
INFO  05:13:24,933 - #29 >
INFO  05:13:24,933 - #49 5
INFO  05:13:24,934 - #33 &&
INFO  05:13:24,934 - #48 x
INFO  05:13:24,934 - #31 <
INFO  05:13:24,934 - #49 10
INFO  05:13:24,935 - #34 ||
INFO  05:13:24,936 - #48 b
INFO  05:13:24,936 - #43 )
INFO  05:13:24,936 - #46 {
INFO  05:13:24,936 - #12 print
INFO  05:13:24,936 - #42 (
INFO  05:13:24,936 - #48 x
INFO  05:13:24,936 - #43 )
INFO  05:13:24,936 - #38 ;
INFO  05:13:24,936 - #47 }
INFO  05:13:24,936 - #47 }
INFO  05:13:24,939 - #47 }
INFO  05:13:24,941 - Syntax analysis finished successfully!
INFO  05:13:24,941 - Syntax tree: 
INFO  05:13:24,943 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      ProgramVariablesList(
        EmptyProgramVariablesList(
        ) [EmptyProgramVariablesList]
        ProgramConstants(
          ConstantsClass(
            Type(
             int
            ) [Type]
            SingleConstantList(
              ConstantDeclaration(
               N
                NumConstClass(
                  NumberConstant(
                   50
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [ConstantDeclaration]
            ) [SingleConstantList]
          ) [ConstantsClass]
        ) [ProgramConstants]
      ) [ProgramVariablesList]
      ProgramVariables(
        GlobalVariables(
          Type(
           int
          ) [Type]
          MultipleGlobalVariablesList(
            MultipleGlobalVariablesList(
              SingleGlobalVariableList(
                GlobalVariableDeclaration(
                 x
                  VarIsNotArray(
                  ) [VarIsNotArray]
                ) [GlobalVariableDeclaration]
              ) [SingleGlobalVariableList]
              GlobalVariableDeclaration(
               y
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [MultipleGlobalVariablesList]
            GlobalVariableDeclaration(
             arr
              VarIsArray(
              ) [VarIsArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
        ) [GlobalVariables]
      ) [ProgramVariables]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         bool
        ) [Type]
        SingleGlobalVariableList(
          GlobalVariableDeclaration(
           b
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [SingleGlobalVariableList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            StatementListClass(
              EmptyStatementList(
              ) [EmptyStatementList]
              SingleStatementClass(
                SSDesignatorStatement(
                  DesignatorStatementClass(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                    DesignatorAssign(
                      DesignatorAssignOperation(
                        AssignOperation(
                        ) [AssignOperation]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorFunctionCall(
                                DesignatorClass(
                                 sum
                                ) [DesignatorClass]
                                FunctionCallHasArguments(
                                  SingleActualParameter(
                                    Expr(
                                      ExpressionClass(
                                        ExpressionPositive(
                                        ) [ExpressionPositive]
                                        Terminal(
                                          FactorNumberConstant(
                                            NumberConstant(
                                             30
                                            ) [NumberConstant]
                                          ) [FactorNumberConstant]
                                        ) [Terminal]
                                      ) [ExpressionClass]
                                    ) [Expr]
                                  ) [SingleActualParameter]
                                ) [FunctionCallHasArguments]
                              ) [FactorFunctionCall]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [DesignatorAssignOperation]
                    ) [DesignatorAssign]
                  ) [DesignatorStatementClass]
                ) [SSDesignatorStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 b
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorBooleanConstant(
                            BooleanConstant(
                             true
                            ) [BooleanConstant]
                          ) [FactorBooleanConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          IfStatement(
            IfClause(
              IfStart(
              ) [IfStart]
              IfConditionClass(
                MultipleConditions(
                  SingleCondition(
                    MultipleConditionTerms(
                      SingleConditionTerm(
                        ConditionFactRelop(
                          ConditionFact(
                            Expr(
                              ExpressionClass(
                                ExpressionPositive(
                                ) [ExpressionPositive]
                                Terminal(
                                  FactorDesignator(
                                    DesignatorClass(
                                     x
                                    ) [DesignatorClass]
                                  ) [FactorDesignator]
                                ) [Terminal]
                              ) [ExpressionClass]
                            ) [Expr]
                          ) [ConditionFact]
                          RelationGreater(
                          ) [RelationGreater]
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorNumberConstant(
                                  NumberConstant(
                                   5
                                  ) [NumberConstant]
                                ) [FactorNumberConstant]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [ConditionFactRelop]
                      ) [SingleConditionTerm]
                      ConditionFactRelop(
                        ConditionFact(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorDesignator(
                                  DesignatorClass(
                                   x
                                  ) [DesignatorClass]
                                ) [FactorDesignator]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [ConditionFact]
                        RelationLess(
                        ) [RelationLess]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 10
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [ConditionFactRelop]
                    ) [MultipleConditionTerms]
                  ) [SingleCondition]
                  SingleConditionTerm(
                    ConditionFact(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               b
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFact]
                  ) [SingleConditionTerm]
                ) [MultipleConditions]
              ) [IfConditionClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      PrintStatement(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                        HasNotPrintConstant(
                        ) [HasNotPrintConstant]
                      ) [PrintStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
            ) [IfClause]
            HasNotElseClause(
            ) [HasNotElseClause]
          ) [IfStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:13:24,944 - =========================================
INFO  05:13:24,944 - Starting semantic analysis....
INFO  05:13:24,960 - Constant N declared  at line 2
INFO  05:13:24,960 - Global variable x declared at line 3
INFO  05:13:24,960 - Global variable y declared at line 3
INFO  05:13:24,960 - Global array arr[] declared at line 3
INFO  05:13:24,960 - Global variable b declared at line 4
INFO  05:13:24,961 - Function sum is being parsed  at line 7
INFO  05:13:24,961 - Default parameter a declared at line 7
INFO  05:13:24,961 - Default parameter b declared at line 7
INFO  05:13:24,962 - Default parameter c declared at line 7
INFO  05:13:24,962 - Function parameter a accessed at line 8
INFO  05:13:24,962 - Function parameter b accessed at line 9
INFO  05:13:24,962 - Function parameter c accessed at line 10
INFO  05:13:24,962 - Function parameter a accessed at line 11
INFO  05:13:24,962 - Function parameter b accessed at line 11
INFO  05:13:24,962 - Function main is being parsed  at line 14
INFO  05:13:24,962 - Global variable x accessed at line 15
INFO  05:13:24,962 - Function sum is called at line 15
INFO  05:13:24,963 - Global variable x accessed at line 16
INFO  05:13:24,963 - Global variable b accessed at line 17
INFO  05:13:24,963 - Global variable x accessed at line 18
INFO  05:13:24,963 - Global variable x accessed at line 18
INFO  05:13:24,963 - Global variable b accessed at line 18
INFO  05:13:24,963 - Global variable x accessed at line 19
INFO  05:13:24,963 - Semantic analysis completed.
INFO  05:13:24,963 - Semantic analysis finished successfully!
INFO  05:13:24,963 - Symbol table: 
INFO  05:13:24,966 - =========================================
INFO  05:13:24,966 - Started generating code....
INFO  05:13:24,977 - Code generated successfully!
INFO  05:13:24,977 - Compiling file successfully completed!
INFO  05:23:59,526 - Starting compilation of a file test/test4.mj
INFO  05:23:59,527 - Starting lexical analysis....
INFO  05:23:59,531 - Lexical analysis finished successfully!
INFO  05:23:59,532 - =========================================
INFO  05:23:59,532 - Starting syntax analysis....
INFO  05:23:59,639 - #2 program
INFO  05:23:59,640 - #48 Test4
INFO  05:23:59,640 - #7 const
INFO  05:23:59,641 - #48 int
INFO  05:23:59,641 - #48 N
INFO  05:23:59,642 - #35 =
INFO  05:23:59,642 - #49 50
INFO  05:23:59,642 - #38 ;
INFO  05:23:59,643 - #48 int
INFO  05:23:59,643 - #48 x
INFO  05:23:59,643 - #40 ,
INFO  05:23:59,646 - #48 y
INFO  05:23:59,646 - #40 ,
INFO  05:23:59,646 - #48 arr
INFO  05:23:59,646 - #44 [
INFO  05:23:59,646 - #45 ]
INFO  05:23:59,646 - #38 ;
INFO  05:23:59,647 - #48 bool
INFO  05:23:59,648 - #48 b
INFO  05:23:59,648 - #38 ;
INFO  05:23:59,648 - #46 {
INFO  05:23:59,648 - #48 int
INFO  05:23:59,649 - #48 sum
INFO  05:23:59,650 - #42 (
INFO  05:23:59,651 - #48 int
INFO  05:23:59,651 - #48 a
INFO  05:23:59,651 - #35 =
INFO  05:23:59,651 - #49 1
INFO  05:23:59,651 - #40 ,
INFO  05:23:59,652 - #48 int
INFO  05:23:59,652 - #48 b
INFO  05:23:59,652 - #35 =
INFO  05:23:59,652 - #49 10
INFO  05:23:59,653 - #40 ,
INFO  05:23:59,653 - #48 char
INFO  05:23:59,653 - #48 c
INFO  05:23:59,653 - #35 =
INFO  05:23:59,653 - #50 a
INFO  05:23:59,653 - #43 )
INFO  05:23:59,654 - #46 {
INFO  05:23:59,655 - #12 print
INFO  05:23:59,656 - #42 (
INFO  05:23:59,656 - #48 a
INFO  05:23:59,658 - #43 )
INFO  05:23:59,661 - #38 ;
INFO  05:23:59,661 - #12 print
INFO  05:23:59,661 - #42 (
INFO  05:23:59,662 - #48 b
INFO  05:23:59,662 - #43 )
INFO  05:23:59,662 - #38 ;
INFO  05:23:59,662 - #12 print
INFO  05:23:59,662 - #42 (
INFO  05:23:59,662 - #48 c
INFO  05:23:59,662 - #43 )
INFO  05:23:59,662 - #38 ;
INFO  05:23:59,662 - #14 return
INFO  05:23:59,663 - #48 a
INFO  05:23:59,663 - #22 +
INFO  05:23:59,663 - #48 b
INFO  05:23:59,665 - #38 ;
INFO  05:23:59,666 - #47 }
INFO  05:23:59,666 - #15 void
INFO  05:23:59,666 - #48 main
INFO  05:23:59,673 - #42 (
INFO  05:23:59,673 - #43 )
INFO  05:23:59,674 - #46 {
INFO  05:23:59,674 - #48 x
INFO  05:23:59,674 - #35 =
INFO  05:23:59,674 - #48 sum
INFO  05:23:59,676 - #42 (
INFO  05:23:59,676 - #49 30
INFO  05:23:59,676 - #43 )
INFO  05:23:59,677 - #38 ;
INFO  05:23:59,677 - #12 print
INFO  05:23:59,677 - #42 (
INFO  05:23:59,678 - #48 x
INFO  05:23:59,678 - #43 )
INFO  05:23:59,678 - #38 ;
INFO  05:23:59,678 - #48 b
INFO  05:23:59,678 - #35 =
INFO  05:23:59,678 - #51 true
INFO  05:23:59,678 - #38 ;
INFO  05:23:59,679 - #8 if
INFO  05:23:59,679 - #42 (
INFO  05:23:59,680 - #48 x
INFO  05:23:59,681 - #29 >
INFO  05:23:59,681 - #49 5
INFO  05:23:59,682 - #33 &&
INFO  05:23:59,683 - #48 x
INFO  05:23:59,683 - #31 <
INFO  05:23:59,683 - #49 10
INFO  05:23:59,684 - #34 ||
INFO  05:23:59,687 - #48 b
INFO  05:23:59,687 - #43 )
INFO  05:23:59,687 - #46 {
INFO  05:23:59,687 - #12 print
INFO  05:23:59,688 - #42 (
INFO  05:23:59,688 - #48 x
INFO  05:23:59,688 - #43 )
INFO  05:23:59,688 - #38 ;
INFO  05:23:59,688 - #47 }
INFO  05:23:59,688 - #47 }
INFO  05:23:59,691 - #47 }
INFO  05:23:59,693 - Syntax analysis finished successfully!
INFO  05:23:59,693 - Syntax tree: 
INFO  05:23:59,695 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      ProgramVariablesList(
        EmptyProgramVariablesList(
        ) [EmptyProgramVariablesList]
        ProgramConstants(
          ConstantsClass(
            Type(
             int
            ) [Type]
            SingleConstantList(
              ConstantDeclaration(
               N
                NumConstClass(
                  NumberConstant(
                   50
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [ConstantDeclaration]
            ) [SingleConstantList]
          ) [ConstantsClass]
        ) [ProgramConstants]
      ) [ProgramVariablesList]
      ProgramVariables(
        GlobalVariables(
          Type(
           int
          ) [Type]
          MultipleGlobalVariablesList(
            MultipleGlobalVariablesList(
              SingleGlobalVariableList(
                GlobalVariableDeclaration(
                 x
                  VarIsNotArray(
                  ) [VarIsNotArray]
                ) [GlobalVariableDeclaration]
              ) [SingleGlobalVariableList]
              GlobalVariableDeclaration(
               y
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [MultipleGlobalVariablesList]
            GlobalVariableDeclaration(
             arr
              VarIsArray(
              ) [VarIsArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
        ) [GlobalVariables]
      ) [ProgramVariables]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         bool
        ) [Type]
        SingleGlobalVariableList(
          GlobalVariableDeclaration(
           b
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [SingleGlobalVariableList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      EmptyProgramMethodsList(
      ) [EmptyProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         sum
        ) [MethodName]
        OptionalArgumentsList(
          MultipleOptionalArguments(
            MultipleOptionalArguments(
              SingleOptionalArgument(
                OptionalArgument(
                  Type(
                   int
                  ) [Type]
                 a
                  NumConstClass(
                    NumberConstant(
                     1
                    ) [NumberConstant]
                  ) [NumConstClass]
                ) [OptionalArgument]
              ) [SingleOptionalArgument]
              OptionalArgument(
                Type(
                 int
                ) [Type]
               b
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [MultipleOptionalArguments]
            OptionalArgument(
              Type(
               char
              ) [Type]
             c
              CharConstClass(
                CharacterConstant(
                 a
                ) [CharacterConstant]
              ) [CharConstClass]
            ) [OptionalArgument]
          ) [MultipleOptionalArguments]
        ) [OptionalArgumentsList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            StatementListClass(
              StatementListClass(
                EmptyStatementList(
                ) [EmptyStatementList]
                SingleStatementClass(
                  PrintStatement(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             a
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                    HasNotPrintConstant(
                    ) [HasNotPrintConstant]
                  ) [PrintStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
              SingleStatementClass(
                PrintStatement(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           b
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                  HasNotPrintConstant(
                  ) [HasNotPrintConstant]
                ) [PrintStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         c
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionAddop(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           a
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionClass]
                    AdditionOperation(
                    ) [AdditionOperation]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         b
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionAddop]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            StatementListClass(
              EmptyStatementList(
              ) [EmptyStatementList]
              SingleStatementClass(
                SSDesignatorStatement(
                  DesignatorStatementClass(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                    DesignatorAssign(
                      DesignatorAssignOperation(
                        AssignOperation(
                        ) [AssignOperation]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorFunctionCall(
                                DesignatorClass(
                                 sum
                                ) [DesignatorClass]
                                FunctionCallHasArguments(
                                  SingleActualParameter(
                                    Expr(
                                      ExpressionClass(
                                        ExpressionPositive(
                                        ) [ExpressionPositive]
                                        Terminal(
                                          FactorNumberConstant(
                                            NumberConstant(
                                             30
                                            ) [NumberConstant]
                                          ) [FactorNumberConstant]
                                        ) [Terminal]
                                      ) [ExpressionClass]
                                    ) [Expr]
                                  ) [SingleActualParameter]
                                ) [FunctionCallHasArguments]
                              ) [FactorFunctionCall]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [DesignatorAssignOperation]
                    ) [DesignatorAssign]
                  ) [DesignatorStatementClass]
                ) [SSDesignatorStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorDesignator(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                      ) [FactorDesignator]
                    ) [Terminal]
                  ) [ExpressionClass]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 b
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorBooleanConstant(
                            BooleanConstant(
                             true
                            ) [BooleanConstant]
                          ) [FactorBooleanConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          IfStatement(
            IfClause(
              IfStart(
              ) [IfStart]
              IfConditionClass(
                MultipleConditions(
                  SingleCondition(
                    MultipleConditionTerms(
                      SingleConditionTerm(
                        ConditionFactRelop(
                          ConditionFact(
                            Expr(
                              ExpressionClass(
                                ExpressionPositive(
                                ) [ExpressionPositive]
                                Terminal(
                                  FactorDesignator(
                                    DesignatorClass(
                                     x
                                    ) [DesignatorClass]
                                  ) [FactorDesignator]
                                ) [Terminal]
                              ) [ExpressionClass]
                            ) [Expr]
                          ) [ConditionFact]
                          RelationGreater(
                          ) [RelationGreater]
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorNumberConstant(
                                  NumberConstant(
                                   5
                                  ) [NumberConstant]
                                ) [FactorNumberConstant]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [ConditionFactRelop]
                      ) [SingleConditionTerm]
                      ConditionFactRelop(
                        ConditionFact(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorDesignator(
                                  DesignatorClass(
                                   x
                                  ) [DesignatorClass]
                                ) [FactorDesignator]
                              ) [Terminal]
                            ) [ExpressionClass]
                          ) [Expr]
                        ) [ConditionFact]
                        RelationLess(
                        ) [RelationLess]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 10
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                      ) [ConditionFactRelop]
                    ) [MultipleConditionTerms]
                  ) [SingleCondition]
                  SingleConditionTerm(
                    ConditionFact(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               b
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFact]
                  ) [SingleConditionTerm]
                ) [MultipleConditions]
              ) [IfConditionClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      PrintStatement(
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 x
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                        ) [Expr]
                        HasNotPrintConstant(
                        ) [HasNotPrintConstant]
                      ) [PrintStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
            ) [IfClause]
            HasNotElseClause(
            ) [HasNotElseClause]
          ) [IfStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:23:59,696 - =========================================
INFO  05:23:59,696 - Starting semantic analysis....
INFO  05:23:59,711 - Constant N declared  at line 2
INFO  05:23:59,711 - Global variable x declared at line 3
INFO  05:23:59,711 - Global variable y declared at line 3
INFO  05:23:59,711 - Global array arr[] declared at line 3
INFO  05:23:59,711 - Global variable b declared at line 4
INFO  05:23:59,711 - Function sum is being parsed  at line 7
INFO  05:23:59,712 - Default parameter a declared at line 7
INFO  05:23:59,712 - Default parameter b declared at line 7
INFO  05:23:59,712 - Default parameter c declared at line 7
INFO  05:23:59,713 - Function parameter a accessed at line 8
INFO  05:23:59,713 - Function parameter b accessed at line 9
INFO  05:23:59,713 - Function parameter c accessed at line 10
INFO  05:23:59,713 - Function parameter a accessed at line 11
INFO  05:23:59,713 - Function parameter b accessed at line 11
INFO  05:23:59,713 - Function main is being parsed  at line 14
INFO  05:23:59,713 - Global variable x accessed at line 15
INFO  05:23:59,714 - Function sum is called at line 15
INFO  05:23:59,714 - Global variable x accessed at line 16
INFO  05:23:59,714 - Global variable b accessed at line 17
INFO  05:23:59,714 - Global variable x accessed at line 18
INFO  05:23:59,714 - Global variable x accessed at line 18
INFO  05:23:59,714 - Global variable b accessed at line 18
INFO  05:23:59,714 - Global variable x accessed at line 19
INFO  05:23:59,714 - Semantic analysis completed.
INFO  05:23:59,715 - Semantic analysis finished successfully!
INFO  05:23:59,715 - Symbol table: 
INFO  05:23:59,716 - =========================================
INFO  05:23:59,716 - Started generating code....
INFO  05:23:59,731 - Code generated successfully!
INFO  05:23:59,731 - Compiling file successfully completed!
INFO  05:24:30,376 - Starting compilation of a file test/test4.mj
INFO  05:24:30,377 - Starting lexical analysis....
INFO  05:24:30,382 - Lexical analysis finished successfully!
INFO  05:24:30,382 - =========================================
INFO  05:24:30,382 - Starting syntax analysis....
INFO  05:24:30,502 - #2 program
INFO  05:24:30,502 - #48 Test4
INFO  05:24:30,502 - #48 int
INFO  05:24:30,503 - #48 x
INFO  05:24:30,504 - #40 ,
INFO  05:24:30,506 - #48 y
INFO  05:24:30,506 - #38 ;
INFO  05:24:30,507 - #46 {
INFO  05:24:30,507 - #15 void
INFO  05:24:30,508 - #48 main
INFO  05:24:30,510 - #42 (
INFO  05:24:30,511 - #43 )
INFO  05:24:30,512 - #46 {
INFO  05:24:30,513 - #48 x
INFO  05:24:30,514 - #35 =
INFO  05:24:30,515 - #49 1
INFO  05:24:30,518 - #38 ;
INFO  05:24:30,520 - #9 do
INFO  05:24:30,521 - #46 {
INFO  05:24:30,523 - #48 x
INFO  05:24:30,523 - #36 ++
INFO  05:24:30,523 - #38 ;
INFO  05:24:30,524 - #47 }
INFO  05:24:30,524 - #10 while
INFO  05:24:30,524 - #42 (
INFO  05:24:30,525 - #48 x
INFO  05:24:30,525 - #31 <
INFO  05:24:30,525 - #49 5
INFO  05:24:30,528 - #43 )
INFO  05:24:30,529 - #38 ;
INFO  05:24:30,529 - #47 }
INFO  05:24:30,530 - #47 }
INFO  05:24:30,532 - Syntax analysis finished successfully!
INFO  05:24:30,532 - Syntax tree: 
INFO  05:24:30,534 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             1
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          DoWhileStatement(
            DoWhileStartClass(
            ) [DoWhileStartClass]
            MultipleStatements(
              StatementClass(
                StatementListClass(
                  EmptyStatementList(
                  ) [EmptyStatementList]
                  SingleStatementClass(
                    SSDesignatorStatement(
                      DesignatorStatementClass(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                        DesignatorIncrement(
                        ) [DesignatorIncrement]
                      ) [DesignatorStatementClass]
                    ) [SSDesignatorStatement]
                  ) [SingleStatementClass]
                ) [StatementListClass]
              ) [StatementClass]
            ) [MultipleStatements]
            SingleCondition(
              SingleConditionTerm(
                ConditionFactRelop(
                  ConditionFact(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             x
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFact]
                  RelationLess(
                  ) [RelationLess]
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorNumberConstant(
                          NumberConstant(
                           5
                          ) [NumberConstant]
                        ) [FactorNumberConstant]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                ) [ConditionFactRelop]
              ) [SingleConditionTerm]
            ) [SingleCondition]
          ) [DoWhileStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:24:30,535 - =========================================
INFO  05:24:30,535 - Starting semantic analysis....
INFO  05:24:30,561 - Global variable x declared at line 2
INFO  05:24:30,561 - Global variable y declared at line 2
INFO  05:24:30,561 - Function main is being parsed  at line 5
INFO  05:24:30,561 - Global variable x accessed at line 6
INFO  05:24:30,561 - Global variable x accessed at line 8
INFO  05:24:30,562 - Global variable x accessed at line 9
INFO  05:24:30,562 - Semantic analysis completed.
INFO  05:24:30,562 - Semantic analysis finished successfully!
INFO  05:24:30,562 - Symbol table: 
INFO  05:24:30,563 - =========================================
INFO  05:24:30,563 - Started generating code....
ERROR 05:24:30,574 - An error occured while generating code!
INFO  05:24:58,037 - Starting compilation of a file test/test4.mj
INFO  05:24:58,037 - Starting lexical analysis....
INFO  05:24:58,044 - Lexical analysis finished successfully!
INFO  05:24:58,044 - =========================================
INFO  05:24:58,044 - Starting syntax analysis....
INFO  05:24:58,240 - #2 program
INFO  05:24:58,241 - #48 Test4
INFO  05:24:58,241 - #48 int
INFO  05:24:58,243 - #48 x
INFO  05:24:58,244 - #40 ,
INFO  05:24:58,247 - #48 y
INFO  05:24:58,247 - #38 ;
INFO  05:24:58,248 - #46 {
INFO  05:24:58,249 - #15 void
INFO  05:24:58,251 - #48 main
INFO  05:24:58,252 - #42 (
INFO  05:24:58,254 - #43 )
INFO  05:24:58,256 - #46 {
INFO  05:24:58,257 - #48 x
INFO  05:24:58,258 - #35 =
INFO  05:24:58,259 - #49 1
INFO  05:24:58,263 - #38 ;
INFO  05:24:58,266 - #9 do
INFO  05:24:58,268 - #46 {
INFO  05:24:58,271 - #48 x
INFO  05:24:58,272 - #36 ++
INFO  05:24:58,272 - #38 ;
INFO  05:24:58,274 - #47 }
INFO  05:24:58,274 - #10 while
INFO  05:24:58,274 - #42 (
INFO  05:24:58,274 - #48 x
INFO  05:24:58,274 - #31 <
INFO  05:24:58,275 - #49 5
INFO  05:24:58,277 - #43 )
INFO  05:24:58,278 - #38 ;
INFO  05:24:58,278 - #47 }
INFO  05:24:58,279 - #47 }
INFO  05:24:58,281 - Syntax analysis finished successfully!
INFO  05:24:58,281 - Syntax tree: 
INFO  05:24:58,283 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             1
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          DoWhileStatement(
            DoWhileStartClass(
            ) [DoWhileStartClass]
            MultipleStatements(
              StatementClass(
                StatementListClass(
                  EmptyStatementList(
                  ) [EmptyStatementList]
                  SingleStatementClass(
                    SSDesignatorStatement(
                      DesignatorStatementClass(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                        DesignatorIncrement(
                        ) [DesignatorIncrement]
                      ) [DesignatorStatementClass]
                    ) [SSDesignatorStatement]
                  ) [SingleStatementClass]
                ) [StatementListClass]
              ) [StatementClass]
            ) [MultipleStatements]
            SingleCondition(
              SingleConditionTerm(
                ConditionFactRelop(
                  ConditionFact(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             x
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFact]
                  RelationLess(
                  ) [RelationLess]
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorNumberConstant(
                          NumberConstant(
                           5
                          ) [NumberConstant]
                        ) [FactorNumberConstant]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                ) [ConditionFactRelop]
              ) [SingleConditionTerm]
            ) [SingleCondition]
          ) [DoWhileStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:24:58,285 - =========================================
INFO  05:24:58,285 - Starting semantic analysis....
INFO  05:24:58,340 - Global variable x declared at line 2
INFO  05:24:58,341 - Global variable y declared at line 2
INFO  05:24:58,341 - Function main is being parsed  at line 5
INFO  05:24:58,341 - Global variable x accessed at line 6
INFO  05:24:58,342 - Global variable x accessed at line 8
INFO  05:24:58,342 - Global variable x accessed at line 9
INFO  05:24:58,342 - Semantic analysis completed.
INFO  05:24:58,342 - Semantic analysis finished successfully!
INFO  05:24:58,342 - Symbol table: 
INFO  05:24:58,344 - =========================================
INFO  05:24:58,344 - Started generating code....
INFO  05:25:07,435 - Started generating code....
INFO  05:25:32,763 - Code generated successfully!
INFO  05:25:32,764 - Compiling file successfully completed!
INFO  05:25:38,542 - Starting compilation of a file test/test4.mj
INFO  05:25:38,543 - Starting lexical analysis....
INFO  05:25:38,551 - Lexical analysis finished successfully!
INFO  05:25:38,551 - =========================================
INFO  05:25:38,551 - Starting syntax analysis....
INFO  05:25:38,660 - #2 program
INFO  05:25:38,661 - #48 Test4
INFO  05:25:38,661 - #48 int
INFO  05:25:38,662 - #48 x
INFO  05:25:38,663 - #40 ,
INFO  05:25:38,664 - #48 y
INFO  05:25:38,664 - #38 ;
INFO  05:25:38,664 - #46 {
INFO  05:25:38,665 - #15 void
INFO  05:25:38,665 - #48 main
INFO  05:25:38,667 - #42 (
INFO  05:25:38,668 - #43 )
INFO  05:25:38,669 - #46 {
INFO  05:25:38,670 - #48 x
INFO  05:25:38,671 - #35 =
INFO  05:25:38,672 - #49 1
INFO  05:25:38,676 - #38 ;
INFO  05:25:38,678 - #9 do
INFO  05:25:38,678 - #46 {
INFO  05:25:38,680 - #48 x
INFO  05:25:38,680 - #36 ++
INFO  05:25:38,681 - #38 ;
INFO  05:25:38,682 - #47 }
INFO  05:25:38,682 - #10 while
INFO  05:25:38,682 - #42 (
INFO  05:25:38,682 - #48 x
INFO  05:25:38,683 - #31 <
INFO  05:25:38,684 - #49 5
INFO  05:25:38,685 - #43 )
INFO  05:25:38,686 - #38 ;
INFO  05:25:38,686 - #47 }
INFO  05:25:38,687 - #47 }
INFO  05:25:38,689 - Syntax analysis finished successfully!
INFO  05:25:38,689 - Syntax tree: 
INFO  05:25:38,691 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             1
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          DoWhileStatement(
            DoWhileStartClass(
            ) [DoWhileStartClass]
            MultipleStatements(
              StatementClass(
                StatementListClass(
                  EmptyStatementList(
                  ) [EmptyStatementList]
                  SingleStatementClass(
                    SSDesignatorStatement(
                      DesignatorStatementClass(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                        DesignatorIncrement(
                        ) [DesignatorIncrement]
                      ) [DesignatorStatementClass]
                    ) [SSDesignatorStatement]
                  ) [SingleStatementClass]
                ) [StatementListClass]
              ) [StatementClass]
            ) [MultipleStatements]
            SingleCondition(
              SingleConditionTerm(
                ConditionFactRelop(
                  ConditionFact(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             x
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFact]
                  RelationLess(
                  ) [RelationLess]
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorNumberConstant(
                          NumberConstant(
                           5
                          ) [NumberConstant]
                        ) [FactorNumberConstant]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                ) [ConditionFactRelop]
              ) [SingleConditionTerm]
            ) [SingleCondition]
          ) [DoWhileStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:25:38,692 - =========================================
INFO  05:25:38,692 - Starting semantic analysis....
INFO  05:25:38,719 - Global variable x declared at line 2
INFO  05:25:38,719 - Global variable y declared at line 2
INFO  05:25:38,720 - Function main is being parsed  at line 5
INFO  05:25:38,720 - Global variable x accessed at line 6
INFO  05:25:38,721 - Global variable x accessed at line 8
INFO  05:25:38,721 - Global variable x accessed at line 9
INFO  05:25:38,721 - Semantic analysis completed.
INFO  05:25:38,721 - Semantic analysis finished successfully!
INFO  05:25:38,721 - Symbol table: 
INFO  05:25:38,723 - =========================================
INFO  05:25:38,723 - Started generating code....
ERROR 05:25:38,736 - An error occured while generating code!
INFO  05:25:40,503 - Starting compilation of a file test/test4.mj
INFO  05:25:40,504 - Starting lexical analysis....
INFO  05:25:40,511 - Lexical analysis finished successfully!
INFO  05:25:40,511 - =========================================
INFO  05:25:40,512 - Starting syntax analysis....
INFO  05:25:40,791 - #2 program
INFO  05:25:40,792 - #48 Test4
INFO  05:25:40,792 - #48 int
INFO  05:25:40,794 - #48 x
INFO  05:25:40,797 - #40 ,
INFO  05:25:40,801 - #48 y
INFO  05:25:40,801 - #38 ;
INFO  05:25:40,801 - #46 {
INFO  05:25:40,802 - #15 void
INFO  05:25:40,804 - #48 main
INFO  05:25:40,805 - #42 (
INFO  05:25:40,807 - #43 )
INFO  05:25:40,808 - #46 {
INFO  05:25:40,810 - #48 x
INFO  05:25:40,812 - #35 =
INFO  05:25:40,812 - #49 1
INFO  05:25:40,835 - #38 ;
INFO  05:25:40,838 - #9 do
INFO  05:25:40,839 - #46 {
INFO  05:25:40,852 - #48 x
INFO  05:25:40,852 - #36 ++
INFO  05:25:40,853 - #38 ;
INFO  05:25:40,854 - #47 }
INFO  05:25:40,855 - #10 while
INFO  05:25:40,855 - #42 (
INFO  05:25:40,855 - #48 x
INFO  05:25:40,855 - #31 <
INFO  05:25:40,856 - #49 5
INFO  05:25:40,859 - #43 )
INFO  05:25:40,860 - #38 ;
INFO  05:25:40,861 - #47 }
INFO  05:25:40,861 - #47 }
INFO  05:25:40,864 - Syntax analysis finished successfully!
INFO  05:25:40,864 - Syntax tree: 
INFO  05:25:40,866 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             1
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          DoWhileStatement(
            DoWhileStartClass(
            ) [DoWhileStartClass]
            MultipleStatements(
              StatementClass(
                StatementListClass(
                  EmptyStatementList(
                  ) [EmptyStatementList]
                  SingleStatementClass(
                    SSDesignatorStatement(
                      DesignatorStatementClass(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                        DesignatorIncrement(
                        ) [DesignatorIncrement]
                      ) [DesignatorStatementClass]
                    ) [SSDesignatorStatement]
                  ) [SingleStatementClass]
                ) [StatementListClass]
              ) [StatementClass]
            ) [MultipleStatements]
            SingleCondition(
              SingleConditionTerm(
                ConditionFactRelop(
                  ConditionFact(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             x
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFact]
                  RelationLess(
                  ) [RelationLess]
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorNumberConstant(
                          NumberConstant(
                           5
                          ) [NumberConstant]
                        ) [FactorNumberConstant]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                ) [ConditionFactRelop]
              ) [SingleConditionTerm]
            ) [SingleCondition]
          ) [DoWhileStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:25:40,867 - =========================================
INFO  05:25:40,867 - Starting semantic analysis....
INFO  05:25:40,895 - Global variable x declared at line 2
INFO  05:25:40,895 - Global variable y declared at line 2
INFO  05:25:40,896 - Function main is being parsed  at line 5
INFO  05:25:40,896 - Global variable x accessed at line 6
INFO  05:25:40,896 - Global variable x accessed at line 8
INFO  05:25:40,900 - Global variable x accessed at line 9
INFO  05:25:40,901 - Semantic analysis completed.
INFO  05:25:40,901 - Semantic analysis finished successfully!
INFO  05:25:40,904 - Symbol table: 
INFO  05:25:40,907 - =========================================
INFO  05:25:40,909 - Started generating code....
INFO  05:25:57,982 - Starting compilation of a file test/test4.mj
INFO  05:25:57,983 - Starting lexical analysis....
INFO  05:25:57,988 - Lexical analysis finished successfully!
INFO  05:25:57,989 - =========================================
INFO  05:25:57,989 - Starting syntax analysis....
INFO  05:25:58,252 - #2 program
INFO  05:25:58,252 - #48 Test4
INFO  05:25:58,252 - #48 int
INFO  05:25:58,254 - #48 x
INFO  05:25:58,256 - #40 ,
INFO  05:25:58,259 - #48 y
INFO  05:25:58,259 - #38 ;
INFO  05:25:58,260 - #46 {
INFO  05:25:58,261 - #15 void
INFO  05:25:58,262 - #48 main
INFO  05:25:58,264 - #42 (
INFO  05:25:58,266 - #43 )
INFO  05:25:58,267 - #46 {
INFO  05:25:58,269 - #48 x
INFO  05:25:58,272 - #35 =
INFO  05:25:58,272 - #49 1
INFO  05:25:58,279 - #38 ;
INFO  05:25:58,284 - #9 do
INFO  05:25:58,285 - #46 {
INFO  05:25:58,288 - #48 x
INFO  05:25:58,288 - #36 ++
INFO  05:25:58,288 - #38 ;
INFO  05:25:58,290 - #47 }
INFO  05:25:58,291 - #10 while
INFO  05:25:58,291 - #42 (
INFO  05:25:58,291 - #48 x
INFO  05:25:58,291 - #31 <
INFO  05:25:58,292 - #49 5
INFO  05:25:58,294 - #43 )
INFO  05:25:58,295 - #38 ;
INFO  05:25:58,295 - #47 }
INFO  05:25:58,295 - #47 }
INFO  05:25:58,300 - Syntax analysis finished successfully!
INFO  05:25:58,300 - Syntax tree: 
INFO  05:25:58,302 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             1
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          DoWhileStatement(
            DoWhileStartClass(
            ) [DoWhileStartClass]
            MultipleStatements(
              StatementClass(
                StatementListClass(
                  EmptyStatementList(
                  ) [EmptyStatementList]
                  SingleStatementClass(
                    SSDesignatorStatement(
                      DesignatorStatementClass(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                        DesignatorIncrement(
                        ) [DesignatorIncrement]
                      ) [DesignatorStatementClass]
                    ) [SSDesignatorStatement]
                  ) [SingleStatementClass]
                ) [StatementListClass]
              ) [StatementClass]
            ) [MultipleStatements]
            SingleCondition(
              SingleConditionTerm(
                ConditionFactRelop(
                  ConditionFact(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             x
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFact]
                  RelationLess(
                  ) [RelationLess]
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorNumberConstant(
                          NumberConstant(
                           5
                          ) [NumberConstant]
                        ) [FactorNumberConstant]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                ) [ConditionFactRelop]
              ) [SingleConditionTerm]
            ) [SingleCondition]
          ) [DoWhileStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:25:58,303 - =========================================
INFO  05:25:58,304 - Starting semantic analysis....
INFO  05:25:58,342 - Global variable x declared at line 2
INFO  05:25:58,342 - Global variable y declared at line 2
INFO  05:25:58,343 - Function main is being parsed  at line 5
INFO  05:25:58,343 - Global variable x accessed at line 6
INFO  05:25:58,343 - Global variable x accessed at line 8
INFO  05:25:58,344 - Global variable x accessed at line 9
INFO  05:25:58,344 - Semantic analysis completed.
INFO  05:25:58,344 - Semantic analysis finished successfully!
INFO  05:25:58,344 - Symbol table: 
INFO  05:25:58,346 - =========================================
INFO  05:25:58,346 - Started generating code....
INFO  05:26:12,592 - Starting compilation of a file test/test4.mj
INFO  05:26:12,592 - Starting lexical analysis....
INFO  05:26:12,595 - Lexical analysis finished successfully!
INFO  05:26:12,595 - =========================================
INFO  05:26:12,595 - Starting syntax analysis....
INFO  05:26:12,698 - #2 program
INFO  05:26:12,698 - #48 Test4
INFO  05:26:12,698 - #48 int
INFO  05:26:12,699 - #48 x
INFO  05:26:12,700 - #40 ,
INFO  05:26:12,702 - #48 y
INFO  05:26:12,702 - #38 ;
INFO  05:26:12,702 - #46 {
INFO  05:26:12,702 - #15 void
INFO  05:26:12,704 - #48 main
INFO  05:26:12,705 - #42 (
INFO  05:26:12,706 - #43 )
INFO  05:26:12,707 - #46 {
INFO  05:26:12,708 - #48 x
INFO  05:26:12,709 - #35 =
INFO  05:26:12,709 - #49 1
INFO  05:26:12,712 - #38 ;
INFO  05:26:12,713 - #9 do
INFO  05:26:12,714 - #46 {
INFO  05:26:12,715 - #48 x
INFO  05:26:12,715 - #36 ++
INFO  05:26:12,715 - #38 ;
INFO  05:26:12,716 - #47 }
INFO  05:26:12,716 - #10 while
INFO  05:26:12,717 - #42 (
INFO  05:26:12,717 - #48 x
INFO  05:26:12,717 - #31 <
INFO  05:26:12,717 - #49 5
INFO  05:26:12,720 - #43 )
INFO  05:26:12,721 - #38 ;
INFO  05:26:12,721 - #47 }
INFO  05:26:12,722 - #47 }
INFO  05:26:12,723 - Syntax analysis finished successfully!
INFO  05:26:12,724 - Syntax tree: 
INFO  05:26:12,724 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 x
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             1
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          DoWhileStatement(
            DoWhileStartClass(
            ) [DoWhileStartClass]
            MultipleStatements(
              StatementClass(
                StatementListClass(
                  EmptyStatementList(
                  ) [EmptyStatementList]
                  SingleStatementClass(
                    SSDesignatorStatement(
                      DesignatorStatementClass(
                        DesignatorClass(
                         x
                        ) [DesignatorClass]
                        DesignatorIncrement(
                        ) [DesignatorIncrement]
                      ) [DesignatorStatementClass]
                    ) [SSDesignatorStatement]
                  ) [SingleStatementClass]
                ) [StatementListClass]
              ) [StatementClass]
            ) [MultipleStatements]
            SingleCondition(
              SingleConditionTerm(
                ConditionFactRelop(
                  ConditionFact(
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             x
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFact]
                  RelationLess(
                  ) [RelationLess]
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorNumberConstant(
                          NumberConstant(
                           5
                          ) [NumberConstant]
                        ) [FactorNumberConstant]
                      ) [Terminal]
                    ) [ExpressionClass]
                  ) [Expr]
                ) [ConditionFactRelop]
              ) [SingleConditionTerm]
            ) [SingleCondition]
          ) [DoWhileStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:26:12,725 - =========================================
INFO  05:26:12,726 - Starting semantic analysis....
INFO  05:26:12,748 - Global variable x declared at line 2
INFO  05:26:12,748 - Global variable y declared at line 2
INFO  05:26:12,748 - Function main is being parsed  at line 5
INFO  05:26:12,748 - Global variable x accessed at line 6
INFO  05:26:12,748 - Global variable x accessed at line 8
INFO  05:26:12,749 - Global variable x accessed at line 9
INFO  05:26:12,749 - Semantic analysis completed.
INFO  05:26:12,749 - Semantic analysis finished successfully!
INFO  05:26:12,749 - Symbol table: 
INFO  05:26:12,751 - =========================================
INFO  05:26:12,751 - Started generating code....
INFO  05:26:12,763 - Code generated successfully!
INFO  05:26:12,764 - Compiling file successfully completed!
INFO  05:28:52,627 - Starting compilation of a file test/test4.mj
INFO  05:28:52,628 - Starting lexical analysis....
INFO  05:28:52,632 - Lexical analysis finished successfully!
INFO  05:28:52,632 - =========================================
INFO  05:28:52,632 - Starting syntax analysis....
INFO  05:28:52,756 - #2 program
INFO  05:28:52,756 - #48 Test4
INFO  05:28:52,756 - #48 int
INFO  05:28:52,757 - #48 x
INFO  05:28:52,758 - #40 ,
INFO  05:28:52,760 - #48 y
INFO  05:28:52,760 - #38 ;
INFO  05:28:52,761 - #46 {
INFO  05:28:52,761 - #15 void
INFO  05:28:52,762 - #48 main
INFO  05:28:52,763 - #42 (
INFO  05:28:52,764 - #43 )
INFO  05:28:52,765 - #46 {
INFO  05:28:52,766 - #48 x
INFO  05:28:52,766 - #35 =
INFO  05:28:52,767 - #49 1
INFO  05:28:52,770 - #38 ;
INFO  05:28:52,772 - #9 do
INFO  05:28:52,772 - #46 {
INFO  05:28:52,773 - #48 x
INFO  05:28:52,774 - #36 ++
INFO  05:28:52,774 - #38 ;
INFO  05:28:52,774 - #47 }
INFO  05:28:52,775 - #10 while
INFO  05:28:52,775 - #42 (
INFO  05:28:52,775 - #48 x
INFO  05:28:52,775 - #31 <
INFO  05:28:52,775 - #49 5
INFO  05:28:52,777 - #43 )
INFO  05:28:52,778 - #38 ;
INFO  05:28:52,778 - #12 print
INFO  05:28:52,778 - #42 (
INFO  05:28:52,778 - #48 x
INFO  05:28:52,778 - #43 )
INFO  05:28:52,779 - #38 ;
INFO  05:28:52,779 - #47 }
INFO  05:28:52,780 - #47 }
INFO  05:28:52,782 - Syntax analysis finished successfully!
INFO  05:28:52,782 - Syntax tree: 
INFO  05:28:52,783 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   x
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorNumberConstant(
                              NumberConstant(
                               1
                              ) [NumberConstant]
                            ) [FactorNumberConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            DoWhileStatement(
              DoWhileStartClass(
              ) [DoWhileStartClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      SSDesignatorStatement(
                        DesignatorStatementClass(
                          DesignatorClass(
                           x
                          ) [DesignatorClass]
                          DesignatorIncrement(
                          ) [DesignatorIncrement]
                        ) [DesignatorStatementClass]
                      ) [SSDesignatorStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
              SingleCondition(
                SingleConditionTerm(
                  ConditionFactRelop(
                    ConditionFact(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               x
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFact]
                    RelationLess(
                    ) [RelationLess]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             5
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFactRelop]
                ) [SingleConditionTerm]
              ) [SingleCondition]
            ) [DoWhileStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:28:52,785 - =========================================
INFO  05:28:52,785 - Starting semantic analysis....
INFO  05:28:52,806 - Global variable x declared at line 2
INFO  05:28:52,807 - Global variable y declared at line 2
INFO  05:28:52,807 - Function main is being parsed  at line 5
INFO  05:28:52,807 - Global variable x accessed at line 6
INFO  05:28:52,807 - Global variable x accessed at line 8
INFO  05:28:52,807 - Global variable x accessed at line 9
INFO  05:28:52,807 - Global variable x accessed at line 10
INFO  05:28:52,808 - Semantic analysis completed.
INFO  05:28:52,808 - Semantic analysis finished successfully!
INFO  05:28:52,808 - Symbol table: 
INFO  05:28:52,809 - =========================================
INFO  05:28:52,810 - Started generating code....
INFO  05:28:52,825 - Code generated successfully!
INFO  05:28:52,825 - Compiling file successfully completed!
INFO  05:29:25,142 - Starting compilation of a file test/test4.mj
INFO  05:29:25,143 - Starting lexical analysis....
INFO  05:29:25,145 - Lexical analysis finished successfully!
INFO  05:29:25,146 - =========================================
INFO  05:29:25,146 - Starting syntax analysis....
INFO  05:29:25,253 - #2 program
INFO  05:29:25,253 - #48 Test4
INFO  05:29:25,253 - #48 int
INFO  05:29:25,254 - #48 x
INFO  05:29:25,255 - #40 ,
INFO  05:29:25,257 - #48 y
INFO  05:29:25,257 - #38 ;
INFO  05:29:25,257 - #46 {
INFO  05:29:25,257 - #15 void
INFO  05:29:25,258 - #48 main
INFO  05:29:25,260 - #42 (
INFO  05:29:25,260 - #43 )
INFO  05:29:25,262 - #46 {
INFO  05:29:25,263 - #48 x
INFO  05:29:25,264 - #35 =
INFO  05:29:25,264 - #49 1
INFO  05:29:25,266 - #38 ;
INFO  05:29:25,268 - #9 do
INFO  05:29:25,269 - #46 {
INFO  05:29:25,271 - #48 x
INFO  05:29:25,271 - #36 ++
INFO  05:29:25,271 - #38 ;
INFO  05:29:25,272 - #47 }
INFO  05:29:25,272 - #10 while
INFO  05:29:25,272 - #42 (
INFO  05:29:25,272 - #48 x
INFO  05:29:25,273 - #31 <
INFO  05:29:25,273 - #49 5
INFO  05:29:25,275 - #43 )
INFO  05:29:25,275 - #38 ;
INFO  05:29:25,276 - #12 print
INFO  05:29:25,276 - #42 (
INFO  05:29:25,276 - #48 x
INFO  05:29:25,276 - #43 )
INFO  05:29:25,277 - #38 ;
INFO  05:29:25,277 - #47 }
INFO  05:29:25,277 - #47 }
INFO  05:29:25,279 - Syntax analysis finished successfully!
INFO  05:29:25,279 - Syntax tree: 
INFO  05:29:25,281 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   x
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorNumberConstant(
                              NumberConstant(
                               1
                              ) [NumberConstant]
                            ) [FactorNumberConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            DoWhileStatement(
              DoWhileStartClass(
              ) [DoWhileStartClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      SSDesignatorStatement(
                        DesignatorStatementClass(
                          DesignatorClass(
                           x
                          ) [DesignatorClass]
                          DesignatorIncrement(
                          ) [DesignatorIncrement]
                        ) [DesignatorStatementClass]
                      ) [SSDesignatorStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
              SingleCondition(
                SingleConditionTerm(
                  ConditionFactRelop(
                    ConditionFact(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               x
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFact]
                    RelationLess(
                    ) [RelationLess]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             5
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFactRelop]
                ) [SingleConditionTerm]
              ) [SingleCondition]
            ) [DoWhileStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:29:25,282 - =========================================
INFO  05:29:25,282 - Starting semantic analysis....
INFO  05:29:25,303 - Global variable x declared at line 2
INFO  05:29:25,303 - Global variable y declared at line 2
INFO  05:29:25,303 - Function main is being parsed  at line 5
INFO  05:29:25,303 - Global variable x accessed at line 6
INFO  05:29:25,304 - Global variable x accessed at line 8
INFO  05:29:25,304 - Global variable x accessed at line 9
INFO  05:29:25,304 - Global variable x accessed at line 10
INFO  05:29:25,304 - Semantic analysis completed.
INFO  05:29:25,304 - Semantic analysis finished successfully!
INFO  05:29:25,304 - Symbol table: 
INFO  05:29:25,305 - =========================================
INFO  05:29:25,305 - Started generating code....
INFO  05:29:25,316 - Code generated successfully!
INFO  05:29:25,316 - Compiling file successfully completed!
INFO  05:29:43,533 - Starting compilation of a file test/test4.mj
INFO  05:29:43,533 - Starting lexical analysis....
INFO  05:29:43,536 - Lexical analysis finished successfully!
INFO  05:29:43,537 - =========================================
INFO  05:29:43,537 - Starting syntax analysis....
INFO  05:29:43,666 - #2 program
INFO  05:29:43,666 - #48 Test4
INFO  05:29:43,666 - #48 int
INFO  05:29:43,668 - #48 x
INFO  05:29:43,669 - #40 ,
INFO  05:29:43,672 - #48 y
INFO  05:29:43,672 - #38 ;
INFO  05:29:43,673 - #46 {
INFO  05:29:43,673 - #15 void
INFO  05:29:43,675 - #48 main
INFO  05:29:43,676 - #42 (
INFO  05:29:43,677 - #43 )
INFO  05:29:43,678 - #46 {
INFO  05:29:43,679 - #48 x
INFO  05:29:43,681 - #35 =
INFO  05:29:43,681 - #49 1
INFO  05:29:43,685 - #38 ;
INFO  05:29:43,687 - #9 do
INFO  05:29:43,689 - #46 {
INFO  05:29:43,692 - #48 x
INFO  05:29:43,692 - #36 ++
INFO  05:29:43,692 - #38 ;
INFO  05:29:43,693 - #47 }
INFO  05:29:43,693 - #10 while
INFO  05:29:43,694 - #42 (
INFO  05:29:43,694 - #48 x
INFO  05:29:43,694 - #31 <
INFO  05:29:43,694 - #49 5
INFO  05:29:43,696 - #43 )
INFO  05:29:43,696 - #38 ;
INFO  05:29:43,696 - #12 print
INFO  05:29:43,697 - #42 (
INFO  05:29:43,697 - #48 x
INFO  05:29:43,697 - #43 )
INFO  05:29:43,699 - #38 ;
INFO  05:29:43,699 - #47 }
INFO  05:29:43,699 - #47 }
INFO  05:29:43,701 - Syntax analysis finished successfully!
INFO  05:29:43,701 - Syntax tree: 
INFO  05:29:43,703 - Program(
  ProgramName(
   Test4
  ) [ProgramName]
  ProgramVariablesList(
    EmptyProgramVariablesList(
    ) [EmptyProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         int
        ) [Type]
        MultipleGlobalVariablesList(
          SingleGlobalVariableList(
            GlobalVariableDeclaration(
             x
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [SingleGlobalVariableList]
          GlobalVariableDeclaration(
           y
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [MultipleGlobalVariablesList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    EmptyProgramMethodsList(
    ) [EmptyProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   x
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorNumberConstant(
                              NumberConstant(
                               1
                              ) [NumberConstant]
                            ) [FactorNumberConstant]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            DoWhileStatement(
              DoWhileStartClass(
              ) [DoWhileStartClass]
              MultipleStatements(
                StatementClass(
                  StatementListClass(
                    EmptyStatementList(
                    ) [EmptyStatementList]
                    SingleStatementClass(
                      SSDesignatorStatement(
                        DesignatorStatementClass(
                          DesignatorClass(
                           x
                          ) [DesignatorClass]
                          DesignatorIncrement(
                          ) [DesignatorIncrement]
                        ) [DesignatorStatementClass]
                      ) [SSDesignatorStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                ) [StatementClass]
              ) [MultipleStatements]
              SingleCondition(
                SingleConditionTerm(
                  ConditionFactRelop(
                    ConditionFact(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               x
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                      ) [Expr]
                    ) [ConditionFact]
                    RelationLess(
                    ) [RelationLess]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorNumberConstant(
                            NumberConstant(
                             5
                            ) [NumberConstant]
                          ) [FactorNumberConstant]
                        ) [Terminal]
                      ) [ExpressionClass]
                    ) [Expr]
                  ) [ConditionFactRelop]
                ) [SingleConditionTerm]
              ) [SingleCondition]
            ) [DoWhileStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     x
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  05:29:43,706 - =========================================
INFO  05:29:43,706 - Starting semantic analysis....
INFO  05:29:43,737 - Global variable x declared at line 2
INFO  05:29:43,737 - Global variable y declared at line 2
INFO  05:29:43,737 - Function main is being parsed  at line 5
INFO  05:29:43,738 - Global variable x accessed at line 6
INFO  05:29:43,738 - Global variable x accessed at line 8
INFO  05:29:43,738 - Global variable x accessed at line 9
INFO  05:29:43,738 - Global variable x accessed at line 10
INFO  05:29:43,738 - Semantic analysis completed.
INFO  05:29:43,738 - Semantic analysis finished successfully!
INFO  05:29:43,739 - Symbol table: 
INFO  05:29:43,739 - =========================================
INFO  05:29:43,739 - Started generating code....
INFO  05:29:43,749 - Code generated successfully!
INFO  05:29:43,749 - Compiling file successfully completed!
