INFO  14:37:03,278 - Starting compilation of a file test/test2.mj
INFO  14:37:03,279 - Starting lexical analysis....
INFO  14:37:03,284 - Lexical analysis finished successfully!
INFO  14:37:03,284 - =========================================
INFO  14:37:03,284 - Starting syntax analysis....
INFO  14:37:03,434 - #2 program
INFO  14:37:03,435 - #49 p
INFO  14:37:03,435 - #7 const
INFO  14:37:03,437 - #49 int
INFO  14:37:03,437 - #49 x
INFO  14:37:03,439 - #35 =
INFO  14:37:03,439 - #50 10
INFO  14:37:03,439 - #38 ;
INFO  14:37:03,439 - #49 int
INFO  14:37:03,440 - #49 y
INFO  14:37:03,440 - #40 ,
INFO  14:37:03,443 - #49 z
INFO  14:37:03,443 - #38 ;
INFO  14:37:03,443 - #49 bool
INFO  14:37:03,444 - #49 b
INFO  14:37:03,448 - #38 ;
INFO  14:37:03,448 - #46 {
INFO  14:37:03,448 - #49 int
INFO  14:37:03,449 - #49 sum
INFO  14:37:03,450 - #42 (
INFO  14:37:03,451 - #49 int
INFO  14:37:03,451 - #49 z
INFO  14:37:03,451 - #40 ,
INFO  14:37:03,452 - #49 int
INFO  14:37:03,452 - #49 d
INFO  14:37:03,452 - #43 )
INFO  14:37:03,453 - #46 {
INFO  14:37:03,456 - #14 return
INFO  14:37:03,458 - #49 z
INFO  14:37:03,460 - #22 +
INFO  14:37:03,461 - #49 d
INFO  14:37:03,464 - #38 ;
INFO  14:37:03,466 - #47 }
INFO  14:37:03,467 - #49 int
INFO  14:37:03,468 - #49 inkrement
INFO  14:37:03,468 - #42 (
INFO  14:37:03,468 - #49 int
INFO  14:37:03,468 - #49 a
INFO  14:37:03,468 - #40 ,
INFO  14:37:03,468 - #49 int
INFO  14:37:03,468 - #49 inc
INFO  14:37:03,468 - #35 =
INFO  14:37:03,469 - #50 1
INFO  14:37:03,469 - #43 )
INFO  14:37:03,469 - #49 int
INFO  14:37:03,469 - #49 pom
INFO  14:37:03,469 - #38 ;
INFO  14:37:03,469 - #46 {
INFO  14:37:03,470 - #49 pom
INFO  14:37:03,470 - #35 =
INFO  14:37:03,470 - #49 a
INFO  14:37:03,472 - #38 ;
INFO  14:37:03,473 - #14 return
INFO  14:37:03,473 - #49 sum
INFO  14:37:03,473 - #42 (
INFO  14:37:03,474 - #49 a
INFO  14:37:03,475 - #40 ,
INFO  14:37:03,476 - #49 pom
INFO  14:37:03,476 - #43 )
INFO  14:37:03,477 - #38 ;
INFO  14:37:03,477 - #47 }
INFO  14:37:03,477 - #49 bool
INFO  14:37:03,477 - #49 verify
INFO  14:37:03,477 - #42 (
INFO  14:37:03,477 - #43 )
INFO  14:37:03,479 - #46 {
INFO  14:37:03,479 - #12 print
INFO  14:37:03,479 - #42 (
INFO  14:37:03,479 - #51 v
INFO  14:37:03,479 - #43 )
INFO  14:37:03,480 - #38 ;
INFO  14:37:03,480 - #14 return
INFO  14:37:03,481 - #52 false
INFO  14:37:03,481 - #38 ;
INFO  14:37:03,481 - #47 }
INFO  14:37:03,481 - #15 void
INFO  14:37:03,481 - #49 main
INFO  14:37:03,482 - #42 (
INFO  14:37:03,482 - #43 )
INFO  14:37:03,482 - #49 int
INFO  14:37:03,482 - #49 local1
INFO  14:37:03,482 - #38 ;
INFO  14:37:03,482 - #46 {
INFO  14:37:03,482 - #49 local1
INFO  14:37:03,483 - #35 =
INFO  14:37:03,483 - #50 10
INFO  14:37:03,483 - #38 ;
INFO  14:37:03,483 - #49 local1
INFO  14:37:03,484 - #35 =
INFO  14:37:03,484 - #49 sum
INFO  14:37:03,484 - #42 (
INFO  14:37:03,484 - #50 10
INFO  14:37:03,484 - #40 ,
INFO  14:37:03,484 - #50 30
INFO  14:37:03,484 - #43 )
INFO  14:37:03,484 - #38 ;
INFO  14:37:03,484 - #49 local1
INFO  14:37:03,484 - #35 =
INFO  14:37:03,484 - #49 inkrement
INFO  14:37:03,485 - #42 (
INFO  14:37:03,485 - #49 local1
INFO  14:37:03,485 - #43 )
INFO  14:37:03,485 - #38 ;
INFO  14:37:03,485 - #12 print
INFO  14:37:03,485 - #42 (
INFO  14:37:03,485 - #49 local1
INFO  14:37:03,485 - #43 )
INFO  14:37:03,485 - #38 ;
INFO  14:37:03,486 - #47 }
INFO  14:37:03,486 - #47 }
INFO  14:37:03,487 - Syntax analysis finished successfully!
INFO  14:37:03,487 - Syntax tree: 
INFO  14:37:03,490 - Program(
  ProgramName(
   p
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      ProgramVariablesList(
        EmptyProgramVariablesList(
        ) [EmptyProgramVariablesList]
        ProgramConstants(
          ConstantsClass(
            Type(
             int
            ) [Type]
            SingleConstantList(
              ConstantDeclaration(
               x
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [ConstantDeclaration]
            ) [SingleConstantList]
          ) [ConstantsClass]
        ) [ProgramConstants]
      ) [ProgramVariablesList]
      ProgramVariables(
        GlobalVariables(
          Type(
           int
          ) [Type]
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               y
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             z
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
        ) [GlobalVariables]
      ) [ProgramVariables]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         bool
        ) [Type]
        SingleGlobalVariableList(
          GlobalVariableDeclaration(
           b
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [SingleGlobalVariableList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      ProgramMethodsList(
        ProgramMethodsList(
          EmptyProgramMethodsList(
          ) [EmptyProgramMethodsList]
          MethodDeclaration(
            MethodTypeNotVoid(
              Type(
               int
              ) [Type]
            ) [MethodTypeNotVoid]
            MethodName(
             sum
            ) [MethodName]
            FormalParametersList(
              MultipleFormalParameters(
                SingleFormalParameter(
                  FormalParameter(
                    Type(
                     int
                    ) [Type]
                   z
                    VarIsNotArray(
                    ) [VarIsNotArray]
                  ) [FormalParameter]
                ) [SingleFormalParameter]
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 d
                  VarIsNotArray(
                  ) [VarIsNotArray]
                ) [FormalParameter]
              ) [MultipleFormalParameters]
            ) [FormalParametersList]
            EmptyVariablesDeclarationList(
            ) [EmptyVariablesDeclarationList]
            StatementListClass(
              EmptyStatementList(
              ) [EmptyStatementList]
              SingleStatementClass(
                ReturnStatement(
                  HasReturnExpression(
                    Expr(
                      ExpressionAddop(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               z
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                        AdditionOperation(
                        ) [AdditionOperation]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             d
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionAddop]
                      HasNotExprBinary(
                      ) [HasNotExprBinary]
                    ) [Expr]
                  ) [HasReturnExpression]
                ) [ReturnStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
          ) [MethodDeclaration]
        ) [ProgramMethodsList]
        MethodDeclaration(
          MethodTypeNotVoid(
            Type(
             int
            ) [Type]
          ) [MethodTypeNotVoid]
          MethodName(
           inkrement
          ) [MethodName]
          FormalParametersListWithOptionalArguments(
            SingleFormalParameter(
              FormalParameter(
                Type(
                 int
                ) [Type]
               a
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [FormalParameter]
            ) [SingleFormalParameter]
            SingleOptionalArgument(
              OptionalArgument(
                Type(
                 int
                ) [Type]
               inc
                NumConstClass(
                  NumberConstant(
                   1
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [OptionalArgument]
            ) [SingleOptionalArgument]
          ) [FormalParametersListWithOptionalArguments]
          VariablesDeclarationList(
            EmptyVariablesDeclarationList(
            ) [EmptyVariablesDeclarationList]
            LocalVariables(
              Type(
               int
              ) [Type]
              SingleLocalVariableList(
                VariableDeclaration(
                 pom
                  VarIsNotArray(
                  ) [VarIsNotArray]
                ) [VariableDeclaration]
              ) [SingleLocalVariableList]
            ) [LocalVariables]
          ) [VariablesDeclarationList]
          StatementListClass(
            StatementListClass(
              EmptyStatementList(
              ) [EmptyStatementList]
              SingleStatementClass(
                SSDesignatorStatement(
                  DesignatorStatementClass(
                    DesignatorClass(
                     pom
                    ) [DesignatorClass]
                    DesignatorAssign(
                      DesignatorAssignOperation(
                        AssignOperation(
                        ) [AssignOperation]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorDesignator(
                                DesignatorClass(
                                 a
                                ) [DesignatorClass]
                              ) [FactorDesignator]
                            ) [Terminal]
                          ) [ExpressionClass]
                          HasNotExprBinary(
                          ) [HasNotExprBinary]
                        ) [Expr]
                      ) [DesignatorAssignOperation]
                    ) [DesignatorAssign]
                  ) [DesignatorStatementClass]
                ) [SSDesignatorStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              ReturnStatement(
                HasReturnExpression(
                  Expr(
                    ExpressionClass(
                      ExpressionPositive(
                      ) [ExpressionPositive]
                      Terminal(
                        FactorFunctionCall(
                          DesignatorClass(
                           sum
                          ) [DesignatorClass]
                          FunctionCallHasArguments(
                            MultipleActualParameters(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorDesignator(
                                        DesignatorClass(
                                         a
                                        ) [DesignatorClass]
                                      ) [FactorDesignator]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                  HasNotExprBinary(
                                  ) [HasNotExprBinary]
                                ) [Expr]
                              ) [SingleActualParameter]
                              Expr(
                                ExpressionClass(
                                  ExpressionPositive(
                                  ) [ExpressionPositive]
                                  Terminal(
                                    FactorDesignator(
                                      DesignatorClass(
                                       pom
                                      ) [DesignatorClass]
                                    ) [FactorDesignator]
                                  ) [Terminal]
                                ) [ExpressionClass]
                                HasNotExprBinary(
                                ) [HasNotExprBinary]
                              ) [Expr]
                            ) [MultipleActualParameters]
                          ) [FunctionCallHasArguments]
                        ) [FactorFunctionCall]
                      ) [Terminal]
                    ) [ExpressionClass]
                    HasNotExprBinary(
                    ) [HasNotExprBinary]
                  ) [Expr]
                ) [HasReturnExpression]
              ) [ReturnStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
        ) [MethodDeclaration]
      ) [ProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           bool
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         verify
        ) [MethodName]
        EmptyFormalParametersList(
        ) [EmptyFormalParametersList]
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              PrintStatement(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorCharacterConstant(
                        CharacterConstant(
                         v
                        ) [CharacterConstant]
                      ) [FactorCharacterConstant]
                    ) [Terminal]
                  ) [ExpressionClass]
                  HasNotExprBinary(
                  ) [HasNotExprBinary]
                ) [Expr]
                HasNotPrintConstant(
                ) [HasNotPrintConstant]
              ) [PrintStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorBooleanConstant(
                        BooleanConstant(
                         false
                        ) [BooleanConstant]
                      ) [FactorBooleanConstant]
                    ) [Terminal]
                  ) [ExpressionClass]
                  HasNotExprBinary(
                  ) [HasNotExprBinary]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeVoid(
      ) [MethodTypeVoid]
      MethodName(
       main
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      VariablesDeclarationList(
        EmptyVariablesDeclarationList(
        ) [EmptyVariablesDeclarationList]
        LocalVariables(
          Type(
           int
          ) [Type]
          SingleLocalVariableList(
            VariableDeclaration(
             local1
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [VariableDeclaration]
          ) [SingleLocalVariableList]
        ) [LocalVariables]
      ) [VariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          StatementListClass(
            StatementListClass(
              EmptyStatementList(
              ) [EmptyStatementList]
              SingleStatementClass(
                SSDesignatorStatement(
                  DesignatorStatementClass(
                    DesignatorClass(
                     local1
                    ) [DesignatorClass]
                    DesignatorAssign(
                      DesignatorAssignOperation(
                        AssignOperation(
                        ) [AssignOperation]
                        Expr(
                          ExpressionClass(
                            ExpressionPositive(
                            ) [ExpressionPositive]
                            Terminal(
                              FactorNumberConstant(
                                NumberConstant(
                                 10
                                ) [NumberConstant]
                              ) [FactorNumberConstant]
                            ) [Terminal]
                          ) [ExpressionClass]
                          HasNotExprBinary(
                          ) [HasNotExprBinary]
                        ) [Expr]
                      ) [DesignatorAssignOperation]
                    ) [DesignatorAssign]
                  ) [DesignatorStatementClass]
                ) [SSDesignatorStatement]
              ) [SingleStatementClass]
            ) [StatementListClass]
            SingleStatementClass(
              SSDesignatorStatement(
                DesignatorStatementClass(
                  DesignatorClass(
                   local1
                  ) [DesignatorClass]
                  DesignatorAssign(
                    DesignatorAssignOperation(
                      AssignOperation(
                      ) [AssignOperation]
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorFunctionCall(
                              DesignatorClass(
                               sum
                              ) [DesignatorClass]
                              FunctionCallHasArguments(
                                MultipleActualParameters(
                                  SingleActualParameter(
                                    Expr(
                                      ExpressionClass(
                                        ExpressionPositive(
                                        ) [ExpressionPositive]
                                        Terminal(
                                          FactorNumberConstant(
                                            NumberConstant(
                                             10
                                            ) [NumberConstant]
                                          ) [FactorNumberConstant]
                                        ) [Terminal]
                                      ) [ExpressionClass]
                                      HasNotExprBinary(
                                      ) [HasNotExprBinary]
                                    ) [Expr]
                                  ) [SingleActualParameter]
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorNumberConstant(
                                          NumberConstant(
                                           30
                                          ) [NumberConstant]
                                        ) [FactorNumberConstant]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                    HasNotExprBinary(
                                    ) [HasNotExprBinary]
                                  ) [Expr]
                                ) [MultipleActualParameters]
                              ) [FunctionCallHasArguments]
                            ) [FactorFunctionCall]
                          ) [Terminal]
                        ) [ExpressionClass]
                        HasNotExprBinary(
                        ) [HasNotExprBinary]
                      ) [Expr]
                    ) [DesignatorAssignOperation]
                  ) [DesignatorAssign]
                ) [DesignatorStatementClass]
              ) [SSDesignatorStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            SSDesignatorStatement(
              DesignatorStatementClass(
                DesignatorClass(
                 local1
                ) [DesignatorClass]
                DesignatorAssign(
                  DesignatorAssignOperation(
                    AssignOperation(
                    ) [AssignOperation]
                    Expr(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorFunctionCall(
                            DesignatorClass(
                             inkrement
                            ) [DesignatorClass]
                            FunctionCallHasArguments(
                              SingleActualParameter(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorDesignator(
                                        DesignatorClass(
                                         local1
                                        ) [DesignatorClass]
                                      ) [FactorDesignator]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                  HasNotExprBinary(
                                  ) [HasNotExprBinary]
                                ) [Expr]
                              ) [SingleActualParameter]
                            ) [FunctionCallHasArguments]
                          ) [FactorFunctionCall]
                        ) [Terminal]
                      ) [ExpressionClass]
                      HasNotExprBinary(
                      ) [HasNotExprBinary]
                    ) [Expr]
                  ) [DesignatorAssignOperation]
                ) [DesignatorAssign]
              ) [DesignatorStatementClass]
            ) [SSDesignatorStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          PrintStatement(
            Expr(
              ExpressionClass(
                ExpressionPositive(
                ) [ExpressionPositive]
                Terminal(
                  FactorDesignator(
                    DesignatorClass(
                     local1
                    ) [DesignatorClass]
                  ) [FactorDesignator]
                ) [Terminal]
              ) [ExpressionClass]
              HasNotExprBinary(
              ) [HasNotExprBinary]
            ) [Expr]
            HasNotPrintConstant(
            ) [HasNotPrintConstant]
          ) [PrintStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  14:37:03,492 - =========================================
INFO  14:37:03,492 - Starting semantic analysis....
INFO  14:37:03,516 - Constant x declared  at line 2
INFO  14:37:03,516 - Global variable y declared at line 3
INFO  14:37:03,517 - Global variable z declared at line 3
INFO  14:37:03,517 - Global variable b declared at line 4
INFO  14:37:03,517 - Function sum is being parsed  at line 8
INFO  14:37:03,518 - Local parameter z declared at line 8
INFO  14:37:03,518 - Local parameter d declared at line 8
INFO  14:37:03,519 - Function parameter z accessed at line 9
INFO  14:37:03,519 - 	[Var z: int, 0, 1 ]
INFO  14:37:03,519 - Function parameter d accessed at line 9
INFO  14:37:03,519 - 	[Var d: int, 1, 1 ]
INFO  14:37:03,519 - Function inkrement is being parsed  at line 12
INFO  14:37:03,520 - Local parameter a declared at line 12
INFO  14:37:03,520 - Default parameter inc declared at line 12
INFO  14:37:03,520 - Local variable pom declared at line 13
INFO  14:37:03,520 - Local variable pom accessed at line 15
INFO  14:37:03,520 - 	[Var pom: int, 2, 1 ]
INFO  14:37:03,520 - Function parameter a accessed at line 15
INFO  14:37:03,520 - 	[Var a: int, 0, 1 ]
INFO  14:37:03,520 - Function parameter a accessed at line 16
INFO  14:37:03,520 - 	[Var a: int, 0, 1 ]
INFO  14:37:03,520 - Local variable pom accessed at line 16
INFO  14:37:03,520 - 	[Var pom: int, 2, 1 ]
INFO  14:37:03,520 - Function sum is called at line 16
INFO  14:37:03,520 - Function verify is being parsed  at line 19
INFO  14:37:03,520 - Function main is being parsed  at line 24
INFO  14:37:03,520 - Local variable local1 declared at line 24
INFO  14:37:03,520 - Local variable local1 accessed at line 25
INFO  14:37:03,520 - 	[Var local1: int, 0, 1 ]
INFO  14:37:03,521 - Local variable local1 accessed at line 26
INFO  14:37:03,521 - 	[Var local1: int, 0, 1 ]
INFO  14:37:03,521 - Function sum is called at line 26
INFO  14:37:03,521 - Local variable local1 accessed at line 27
INFO  14:37:03,521 - 	[Var local1: int, 0, 1 ]
INFO  14:37:03,521 - Local variable local1 accessed at line 27
INFO  14:37:03,521 - 	[Var local1: int, 0, 1 ]
INFO  14:37:03,521 - Function inkrement is called at line 27
INFO  14:37:03,521 - Local variable local1 accessed at line 28
INFO  14:37:03,521 - 	[Var local1: int, 0, 1 ]
INFO  14:37:03,521 - Semantic analysis completed.
INFO  14:37:03,521 - Semantic analysis finished successfully!
INFO  14:37:03,521 - Symbol table: 
INFO  14:37:03,522 - =========================================
INFO  14:37:03,522 - Started generating code....
INFO  14:37:03,533 - Code generated successfully!
INFO  14:37:03,533 - Compiling file successfully completed!
