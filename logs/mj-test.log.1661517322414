INFO  14:34:35,508 - Starting compilation of a file test/test2.mj
INFO  14:34:35,509 - Starting lexical analysis....
INFO  14:34:35,514 - Lexical analysis finished successfully!
INFO  14:34:35,515 - =========================================
INFO  14:34:35,515 - Starting syntax analysis....
INFO  14:34:35,661 - #2 program
INFO  14:34:35,661 - #49 p
INFO  14:34:35,661 - #7 const
INFO  14:34:35,662 - #49 int
INFO  14:34:35,663 - #49 x
INFO  14:34:35,664 - #35 =
INFO  14:34:35,664 - #50 10
INFO  14:34:35,664 - #38 ;
INFO  14:34:35,665 - #49 int
INFO  14:34:35,666 - #49 y
INFO  14:34:35,666 - #40 ,
INFO  14:34:35,669 - #49 z
INFO  14:34:35,669 - #38 ;
INFO  14:34:35,669 - #49 bool
INFO  14:34:35,670 - #49 b
INFO  14:34:35,674 - #38 ;
INFO  14:34:35,674 - #46 {
INFO  14:34:35,674 - #49 char
INFO  14:34:35,675 - #49 function
INFO  14:34:35,676 - #42 (
INFO  14:34:35,677 - #49 int
INFO  14:34:35,677 - #49 param1
INFO  14:34:35,678 - #40 ,
INFO  14:34:35,678 - #49 char
INFO  14:34:35,678 - #49 param2
INFO  14:34:35,678 - #44 [
INFO  14:34:35,679 - #45 ]
INFO  14:34:35,679 - #40 ,
INFO  14:34:35,680 - #49 bool
INFO  14:34:35,680 - #49 param3
INFO  14:34:35,680 - #43 )
INFO  14:34:35,681 - #49 int
INFO  14:34:35,682 - #49 local1
INFO  14:34:35,682 - #40 ,
INFO  14:34:35,683 - #49 local2
INFO  14:34:35,683 - #38 ;
INFO  14:34:35,683 - #49 bool
INFO  14:34:35,683 - #49 local3
INFO  14:34:35,684 - #38 ;
INFO  14:34:35,684 - #49 int
INFO  14:34:35,684 - #49 array1
INFO  14:34:35,684 - #44 [
INFO  14:34:35,684 - #45 ]
INFO  14:34:35,684 - #38 ;
INFO  14:34:35,684 - #46 {
INFO  14:34:35,684 - #49 local2
INFO  14:34:35,687 - #35 =
INFO  14:34:35,687 - #50 4
INFO  14:34:35,692 - #38 ;
INFO  14:34:35,696 - #49 local2
INFO  14:34:35,696 - #36 ++
INFO  14:34:35,697 - #38 ;
INFO  14:34:35,698 - #8 if
INFO  14:34:35,698 - #42 (
INFO  14:34:35,700 - #49 local2
INFO  14:34:35,700 - #29 >
INFO  14:34:35,700 - #50 3
INFO  14:34:35,703 - #43 )
INFO  14:34:35,703 - #46 {
INFO  14:34:35,703 - #49 local1
INFO  14:34:35,703 - #35 =
INFO  14:34:35,704 - #49 local2
INFO  14:34:35,704 - #24 *
INFO  14:34:35,704 - #50 5
INFO  14:34:35,706 - #38 ;
INFO  14:34:35,706 - #47 }
INFO  14:34:35,706 - #6 else
INFO  14:34:35,708 - #8 if
INFO  14:34:35,710 - #42 (
INFO  14:34:35,710 - #49 local2
INFO  14:34:35,710 - #29 >
INFO  14:34:35,710 - #50 0
INFO  14:34:35,710 - #33 &&
INFO  14:34:35,710 - #49 local2
INFO  14:34:35,711 - #31 <
INFO  14:34:35,711 - #50 3
INFO  14:34:35,712 - #43 )
INFO  14:34:35,712 - #46 {
INFO  14:34:35,712 - #49 local1
INFO  14:34:35,712 - #35 =
INFO  14:34:35,712 - #49 local2
INFO  14:34:35,712 - #24 *
INFO  14:34:35,713 - #50 20
INFO  14:34:35,713 - #38 ;
INFO  14:34:35,713 - #47 }
INFO  14:34:35,713 - #6 else
INFO  14:34:35,713 - #46 {
INFO  14:34:35,713 - #49 local1
INFO  14:34:35,714 - #35 =
INFO  14:34:35,714 - #49 local2
INFO  14:34:35,714 - #24 *
INFO  14:34:35,714 - #42 (
INFO  14:34:35,715 - #23 -
INFO  14:34:35,715 - #50 5
INFO  14:34:35,716 - #43 )
INFO  14:34:35,716 - #38 ;
INFO  14:34:35,717 - #47 }
INFO  14:34:35,717 - #12 print
INFO  14:34:35,718 - #42 (
INFO  14:34:35,718 - #49 local1
INFO  14:34:35,718 - #43 )
INFO  14:34:35,720 - #38 ;
INFO  14:34:35,720 - #8 if
INFO  14:34:35,720 - #42 (
INFO  14:34:35,720 - #49 local1
INFO  14:34:35,720 - #29 >
INFO  14:34:35,720 - #23 -
INFO  14:34:35,721 - #50 5
INFO  14:34:35,721 - #22 +
INFO  14:34:35,721 - #49 local1
INFO  14:34:35,723 - #23 -
INFO  14:34:35,724 - #50 2
INFO  14:34:35,726 - #43 )
INFO  14:34:35,726 - #46 {
INFO  14:34:35,726 - #12 print
INFO  14:34:35,726 - #42 (
INFO  14:34:35,726 - #49 local2
INFO  14:34:35,726 - #43 )
INFO  14:34:35,726 - #38 ;
INFO  14:34:35,726 - #47 }
INFO  14:34:35,726 - #13 read
INFO  14:34:35,728 - #42 (
INFO  14:34:35,728 - #49 array1
INFO  14:34:35,728 - #44 [
INFO  14:34:35,728 - #49 x
INFO  14:34:35,728 - #45 ]
INFO  14:34:35,728 - #43 )
INFO  14:34:35,729 - #38 ;
INFO  14:34:35,729 - #49 local1
INFO  14:34:35,729 - #35 =
INFO  14:34:35,729 - #49 function2
INFO  14:34:35,729 - #42 (
INFO  14:34:35,729 - #49 array1
INFO  14:34:35,729 - #40 ,
INFO  14:34:35,729 - #49 local2
INFO  14:34:35,730 - #43 )
INFO  14:34:35,730 - #38 ;
INFO  14:34:35,730 - #12 print
INFO  14:34:35,730 - #42 (
INFO  14:34:35,730 - #49 local1
INFO  14:34:35,730 - #43 )
INFO  14:34:35,731 - #38 ;
INFO  14:34:35,731 - #14 return
INFO  14:34:35,731 - #49 local1
INFO  14:34:35,731 - #38 ;
INFO  14:34:35,731 - #47 }
INFO  14:34:35,731 - #49 int
INFO  14:34:35,732 - #49 function2
INFO  14:34:35,732 - #42 (
INFO  14:34:35,732 - #49 int
INFO  14:34:35,732 - #49 param1
INFO  14:34:35,732 - #44 [
INFO  14:34:35,732 - #45 ]
INFO  14:34:35,732 - #40 ,
INFO  14:34:35,732 - #49 int
INFO  14:34:35,732 - #49 param2
INFO  14:34:35,732 - #43 )
INFO  14:34:35,732 - #49 int
INFO  14:34:35,732 - #49 local1
INFO  14:34:35,732 - #38 ;
INFO  14:34:35,732 - #49 bool
INFO  14:34:35,732 - #49 local2
INFO  14:34:35,732 - #44 [
INFO  14:34:35,733 - #45 ]
INFO  14:34:35,733 - #38 ;
INFO  14:34:35,733 - #46 {
INFO  14:34:35,733 - #47 }
INFO  14:34:35,733 - #49 int
INFO  14:34:35,733 - #49 sum
INFO  14:34:35,733 - #42 (
INFO  14:34:35,733 - #49 int
INFO  14:34:35,733 - #49 z
INFO  14:34:35,733 - #40 ,
INFO  14:34:35,733 - #49 int
INFO  14:34:35,733 - #49 d
INFO  14:34:35,733 - #43 )
INFO  14:34:35,733 - #46 {
INFO  14:34:35,734 - #14 return
INFO  14:34:35,734 - #49 z
INFO  14:34:35,734 - #22 +
INFO  14:34:35,734 - #49 d
INFO  14:34:35,734 - #38 ;
INFO  14:34:35,734 - #47 }
INFO  14:34:35,734 - #49 int
INFO  14:34:35,734 - #49 inkrement
INFO  14:34:35,734 - #42 (
INFO  14:34:35,735 - #49 int
INFO  14:34:35,735 - #49 a
INFO  14:34:35,735 - #40 ,
INFO  14:34:35,735 - #49 int
INFO  14:34:35,735 - #49 inc
INFO  14:34:35,739 - #35 =
INFO  14:34:35,740 - #50 1
INFO  14:34:35,740 - #43 )
INFO  14:34:35,740 - #49 int
INFO  14:34:35,740 - #49 pom
INFO  14:34:35,741 - #38 ;
INFO  14:34:35,741 - #46 {
INFO  14:34:35,741 - #8 if
INFO  14:34:35,741 - #42 (
INFO  14:34:35,741 - #49 inc
INFO  14:34:35,741 - #27 ==
INFO  14:34:35,741 - #49 jedan
INFO  14:34:35,742 - #43 )
INFO  14:34:35,742 - #49 pom
INFO  14:34:35,742 - #35 =
INFO  14:34:35,742 - #50 1
INFO  14:34:35,743 - #38 ;
INFO  14:34:35,743 - #6 else
INFO  14:34:35,743 - #8 if
INFO  14:34:35,743 - #42 (
INFO  14:34:35,743 - #49 inc
INFO  14:34:35,743 - #27 ==
INFO  14:34:35,743 - #50 2
INFO  14:34:35,743 - #43 )
INFO  14:34:35,743 - #49 pom
INFO  14:34:35,743 - #35 =
INFO  14:34:35,743 - #49 a
INFO  14:34:35,743 - #38 ;
INFO  14:34:35,744 - #14 return
INFO  14:34:35,744 - #49 sum
INFO  14:34:35,744 - #42 (
INFO  14:34:35,744 - #49 a
INFO  14:34:35,744 - #40 ,
INFO  14:34:35,744 - #49 pom
INFO  14:34:35,744 - #43 )
INFO  14:34:35,744 - #38 ;
INFO  14:34:35,744 - #47 }
INFO  14:34:35,745 - #49 bool
INFO  14:34:35,745 - #49 verify
INFO  14:34:35,745 - #42 (
INFO  14:34:35,745 - #43 )
INFO  14:34:35,746 - #46 {
INFO  14:34:35,746 - #12 print
INFO  14:34:35,746 - #42 (
INFO  14:34:35,746 - #51 v
INFO  14:34:35,746 - #43 )
INFO  14:34:35,747 - #38 ;
INFO  14:34:35,747 - #14 return
INFO  14:34:35,747 - #52 false
INFO  14:34:35,747 - #38 ;
INFO  14:34:35,747 - #47 }
INFO  14:34:35,747 - #47 }
INFO  14:34:35,749 - Syntax analysis finished successfully!
INFO  14:34:35,749 - Syntax tree: 
INFO  14:34:35,759 - Program(
  ProgramName(
   p
  ) [ProgramName]
  ProgramVariablesList(
    ProgramVariablesList(
      ProgramVariablesList(
        EmptyProgramVariablesList(
        ) [EmptyProgramVariablesList]
        ProgramConstants(
          ConstantsClass(
            Type(
             int
            ) [Type]
            SingleConstantList(
              ConstantDeclaration(
               x
                NumConstClass(
                  NumberConstant(
                   10
                  ) [NumberConstant]
                ) [NumConstClass]
              ) [ConstantDeclaration]
            ) [SingleConstantList]
          ) [ConstantsClass]
        ) [ProgramConstants]
      ) [ProgramVariablesList]
      ProgramVariables(
        GlobalVariables(
          Type(
           int
          ) [Type]
          MultipleGlobalVariablesList(
            SingleGlobalVariableList(
              GlobalVariableDeclaration(
               y
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [GlobalVariableDeclaration]
            ) [SingleGlobalVariableList]
            GlobalVariableDeclaration(
             z
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [GlobalVariableDeclaration]
          ) [MultipleGlobalVariablesList]
        ) [GlobalVariables]
      ) [ProgramVariables]
    ) [ProgramVariablesList]
    ProgramVariables(
      GlobalVariables(
        Type(
         bool
        ) [Type]
        SingleGlobalVariableList(
          GlobalVariableDeclaration(
           b
            VarIsNotArray(
            ) [VarIsNotArray]
          ) [GlobalVariableDeclaration]
        ) [SingleGlobalVariableList]
      ) [GlobalVariables]
    ) [ProgramVariables]
  ) [ProgramVariablesList]
  ProgramMethodsList(
    ProgramMethodsList(
      ProgramMethodsList(
        ProgramMethodsList(
          ProgramMethodsList(
            EmptyProgramMethodsList(
            ) [EmptyProgramMethodsList]
            MethodDeclaration(
              MethodTypeNotVoid(
                Type(
                 char
                ) [Type]
              ) [MethodTypeNotVoid]
              MethodName(
               function
              ) [MethodName]
              FormalParametersList(
                MultipleFormalParameters(
                  MultipleFormalParameters(
                    SingleFormalParameter(
                      FormalParameter(
                        Type(
                         int
                        ) [Type]
                       param1
                        VarIsNotArray(
                        ) [VarIsNotArray]
                      ) [FormalParameter]
                    ) [SingleFormalParameter]
                    FormalParameter(
                      Type(
                       char
                      ) [Type]
                     param2
                      VarIsArray(
                      ) [VarIsArray]
                    ) [FormalParameter]
                  ) [MultipleFormalParameters]
                  FormalParameter(
                    Type(
                     bool
                    ) [Type]
                   param3
                    VarIsNotArray(
                    ) [VarIsNotArray]
                  ) [FormalParameter]
                ) [MultipleFormalParameters]
              ) [FormalParametersList]
              VariablesDeclarationList(
                VariablesDeclarationList(
                  VariablesDeclarationList(
                    EmptyVariablesDeclarationList(
                    ) [EmptyVariablesDeclarationList]
                    LocalVariables(
                      Type(
                       int
                      ) [Type]
                      MultipleLocalVariablesList(
                        SingleLocalVariableList(
                          VariableDeclaration(
                           local1
                            VarIsNotArray(
                            ) [VarIsNotArray]
                          ) [VariableDeclaration]
                        ) [SingleLocalVariableList]
                        VariableDeclaration(
                         local2
                          VarIsNotArray(
                          ) [VarIsNotArray]
                        ) [VariableDeclaration]
                      ) [MultipleLocalVariablesList]
                    ) [LocalVariables]
                  ) [VariablesDeclarationList]
                  LocalVariables(
                    Type(
                     bool
                    ) [Type]
                    SingleLocalVariableList(
                      VariableDeclaration(
                       local3
                        VarIsNotArray(
                        ) [VarIsNotArray]
                      ) [VariableDeclaration]
                    ) [SingleLocalVariableList]
                  ) [LocalVariables]
                ) [VariablesDeclarationList]
                LocalVariables(
                  Type(
                   int
                  ) [Type]
                  SingleLocalVariableList(
                    VariableDeclaration(
                     array1
                      VarIsArray(
                      ) [VarIsArray]
                    ) [VariableDeclaration]
                  ) [SingleLocalVariableList]
                ) [LocalVariables]
              ) [VariablesDeclarationList]
              StatementListClass(
                StatementListClass(
                  StatementListClass(
                    StatementListClass(
                      StatementListClass(
                        StatementListClass(
                          StatementListClass(
                            StatementListClass(
                              StatementListClass(
                                EmptyStatementList(
                                ) [EmptyStatementList]
                                SingleStatementClass(
                                  SSDesignatorStatement(
                                    DesignatorStatementClass(
                                      DesignatorClass(
                                       local2
                                      ) [DesignatorClass]
                                      DesignatorAssign(
                                        DesignatorAssignOperation(
                                          AssignOperation(
                                          ) [AssignOperation]
                                          Expr(
                                            ExpressionClass(
                                              ExpressionPositive(
                                              ) [ExpressionPositive]
                                              Terminal(
                                                FactorNumberConstant(
                                                  NumberConstant(
                                                   4
                                                  ) [NumberConstant]
                                                ) [FactorNumberConstant]
                                              ) [Terminal]
                                            ) [ExpressionClass]
                                            HasNotExprBinary(
                                            ) [HasNotExprBinary]
                                          ) [Expr]
                                        ) [DesignatorAssignOperation]
                                      ) [DesignatorAssign]
                                    ) [DesignatorStatementClass]
                                  ) [SSDesignatorStatement]
                                ) [SingleStatementClass]
                              ) [StatementListClass]
                              SingleStatementClass(
                                SSDesignatorStatement(
                                  DesignatorStatementClass(
                                    DesignatorClass(
                                     local2
                                    ) [DesignatorClass]
                                    DesignatorIncrement(
                                    ) [DesignatorIncrement]
                                  ) [DesignatorStatementClass]
                                ) [SSDesignatorStatement]
                              ) [SingleStatementClass]
                            ) [StatementListClass]
                            SingleStatementClass(
                              IfStatement(
                                IfClause(
                                  IfStart(
                                  ) [IfStart]
                                  IfConditionClass(
                                    SingleCondition(
                                      SingleConditionTerm(
                                        ConditionFactRelop(
                                          Expr(
                                            ExpressionClass(
                                              ExpressionPositive(
                                              ) [ExpressionPositive]
                                              Terminal(
                                                FactorDesignator(
                                                  DesignatorClass(
                                                   local2
                                                  ) [DesignatorClass]
                                                ) [FactorDesignator]
                                              ) [Terminal]
                                            ) [ExpressionClass]
                                            HasNotExprBinary(
                                            ) [HasNotExprBinary]
                                          ) [Expr]
                                          RelationGreater(
                                          ) [RelationGreater]
                                          Expr(
                                            ExpressionClass(
                                              ExpressionPositive(
                                              ) [ExpressionPositive]
                                              Terminal(
                                                FactorNumberConstant(
                                                  NumberConstant(
                                                   3
                                                  ) [NumberConstant]
                                                ) [FactorNumberConstant]
                                              ) [Terminal]
                                            ) [ExpressionClass]
                                            HasNotExprBinary(
                                            ) [HasNotExprBinary]
                                          ) [Expr]
                                        ) [ConditionFactRelop]
                                      ) [SingleConditionTerm]
                                    ) [SingleCondition]
                                  ) [IfConditionClass]
                                  MultipleStatements(
                                    StatementClass(
                                      StatementListClass(
                                        EmptyStatementList(
                                        ) [EmptyStatementList]
                                        SingleStatementClass(
                                          SSDesignatorStatement(
                                            DesignatorStatementClass(
                                              DesignatorClass(
                                               local1
                                              ) [DesignatorClass]
                                              DesignatorAssign(
                                                DesignatorAssignOperation(
                                                  AssignOperation(
                                                  ) [AssignOperation]
                                                  Expr(
                                                    ExpressionClass(
                                                      ExpressionPositive(
                                                      ) [ExpressionPositive]
                                                      TerminalMulop(
                                                        Terminal(
                                                          FactorDesignator(
                                                            DesignatorClass(
                                                             local2
                                                            ) [DesignatorClass]
                                                          ) [FactorDesignator]
                                                        ) [Terminal]
                                                        MultiplicationOperation(
                                                        ) [MultiplicationOperation]
                                                        FactorNumberConstant(
                                                          NumberConstant(
                                                           5
                                                          ) [NumberConstant]
                                                        ) [FactorNumberConstant]
                                                      ) [TerminalMulop]
                                                    ) [ExpressionClass]
                                                    HasNotExprBinary(
                                                    ) [HasNotExprBinary]
                                                  ) [Expr]
                                                ) [DesignatorAssignOperation]
                                              ) [DesignatorAssign]
                                            ) [DesignatorStatementClass]
                                          ) [SSDesignatorStatement]
                                        ) [SingleStatementClass]
                                      ) [StatementListClass]
                                    ) [StatementClass]
                                  ) [MultipleStatements]
                                ) [IfClause]
                                HasElseClause(
                                  ElseStart(
                                  ) [ElseStart]
                                  SingleStatementClass(
                                    IfStatement(
                                      IfClause(
                                        IfStart(
                                        ) [IfStart]
                                        IfConditionClass(
                                          SingleCondition(
                                            MultipleConditionTerms(
                                              SingleConditionTerm(
                                                ConditionFactRelop(
                                                  Expr(
                                                    ExpressionClass(
                                                      ExpressionPositive(
                                                      ) [ExpressionPositive]
                                                      Terminal(
                                                        FactorDesignator(
                                                          DesignatorClass(
                                                           local2
                                                          ) [DesignatorClass]
                                                        ) [FactorDesignator]
                                                      ) [Terminal]
                                                    ) [ExpressionClass]
                                                    HasNotExprBinary(
                                                    ) [HasNotExprBinary]
                                                  ) [Expr]
                                                  RelationGreater(
                                                  ) [RelationGreater]
                                                  Expr(
                                                    ExpressionClass(
                                                      ExpressionPositive(
                                                      ) [ExpressionPositive]
                                                      Terminal(
                                                        FactorNumberConstant(
                                                          NumberConstant(
                                                           0
                                                          ) [NumberConstant]
                                                        ) [FactorNumberConstant]
                                                      ) [Terminal]
                                                    ) [ExpressionClass]
                                                    HasNotExprBinary(
                                                    ) [HasNotExprBinary]
                                                  ) [Expr]
                                                ) [ConditionFactRelop]
                                              ) [SingleConditionTerm]
                                              ConditionFactRelop(
                                                Expr(
                                                  ExpressionClass(
                                                    ExpressionPositive(
                                                    ) [ExpressionPositive]
                                                    Terminal(
                                                      FactorDesignator(
                                                        DesignatorClass(
                                                         local2
                                                        ) [DesignatorClass]
                                                      ) [FactorDesignator]
                                                    ) [Terminal]
                                                  ) [ExpressionClass]
                                                  HasNotExprBinary(
                                                  ) [HasNotExprBinary]
                                                ) [Expr]
                                                RelationLess(
                                                ) [RelationLess]
                                                Expr(
                                                  ExpressionClass(
                                                    ExpressionPositive(
                                                    ) [ExpressionPositive]
                                                    Terminal(
                                                      FactorNumberConstant(
                                                        NumberConstant(
                                                         3
                                                        ) [NumberConstant]
                                                      ) [FactorNumberConstant]
                                                    ) [Terminal]
                                                  ) [ExpressionClass]
                                                  HasNotExprBinary(
                                                  ) [HasNotExprBinary]
                                                ) [Expr]
                                              ) [ConditionFactRelop]
                                            ) [MultipleConditionTerms]
                                          ) [SingleCondition]
                                        ) [IfConditionClass]
                                        MultipleStatements(
                                          StatementClass(
                                            StatementListClass(
                                              EmptyStatementList(
                                              ) [EmptyStatementList]
                                              SingleStatementClass(
                                                SSDesignatorStatement(
                                                  DesignatorStatementClass(
                                                    DesignatorClass(
                                                     local1
                                                    ) [DesignatorClass]
                                                    DesignatorAssign(
                                                      DesignatorAssignOperation(
                                                        AssignOperation(
                                                        ) [AssignOperation]
                                                        Expr(
                                                          ExpressionClass(
                                                            ExpressionPositive(
                                                            ) [ExpressionPositive]
                                                            TerminalMulop(
                                                              Terminal(
                                                                FactorDesignator(
                                                                  DesignatorClass(
                                                                   local2
                                                                  ) [DesignatorClass]
                                                                ) [FactorDesignator]
                                                              ) [Terminal]
                                                              MultiplicationOperation(
                                                              ) [MultiplicationOperation]
                                                              FactorNumberConstant(
                                                                NumberConstant(
                                                                 20
                                                                ) [NumberConstant]
                                                              ) [FactorNumberConstant]
                                                            ) [TerminalMulop]
                                                          ) [ExpressionClass]
                                                          HasNotExprBinary(
                                                          ) [HasNotExprBinary]
                                                        ) [Expr]
                                                      ) [DesignatorAssignOperation]
                                                    ) [DesignatorAssign]
                                                  ) [DesignatorStatementClass]
                                                ) [SSDesignatorStatement]
                                              ) [SingleStatementClass]
                                            ) [StatementListClass]
                                          ) [StatementClass]
                                        ) [MultipleStatements]
                                      ) [IfClause]
                                      HasElseClause(
                                        ElseStart(
                                        ) [ElseStart]
                                        MultipleStatements(
                                          StatementClass(
                                            StatementListClass(
                                              EmptyStatementList(
                                              ) [EmptyStatementList]
                                              SingleStatementClass(
                                                SSDesignatorStatement(
                                                  DesignatorStatementClass(
                                                    DesignatorClass(
                                                     local1
                                                    ) [DesignatorClass]
                                                    DesignatorAssign(
                                                      DesignatorAssignOperation(
                                                        AssignOperation(
                                                        ) [AssignOperation]
                                                        Expr(
                                                          ExpressionClass(
                                                            ExpressionPositive(
                                                            ) [ExpressionPositive]
                                                            TerminalMulop(
                                                              Terminal(
                                                                FactorDesignator(
                                                                  DesignatorClass(
                                                                   local2
                                                                  ) [DesignatorClass]
                                                                ) [FactorDesignator]
                                                              ) [Terminal]
                                                              MultiplicationOperation(
                                                              ) [MultiplicationOperation]
                                                              FactorExpression(
                                                                Expr(
                                                                  ExpressionClass(
                                                                    ExpressionNegative(
                                                                    ) [ExpressionNegative]
                                                                    Terminal(
                                                                      FactorNumberConstant(
                                                                        NumberConstant(
                                                                         5
                                                                        ) [NumberConstant]
                                                                      ) [FactorNumberConstant]
                                                                    ) [Terminal]
                                                                  ) [ExpressionClass]
                                                                  HasNotExprBinary(
                                                                  ) [HasNotExprBinary]
                                                                ) [Expr]
                                                              ) [FactorExpression]
                                                            ) [TerminalMulop]
                                                          ) [ExpressionClass]
                                                          HasNotExprBinary(
                                                          ) [HasNotExprBinary]
                                                        ) [Expr]
                                                      ) [DesignatorAssignOperation]
                                                    ) [DesignatorAssign]
                                                  ) [DesignatorStatementClass]
                                                ) [SSDesignatorStatement]
                                              ) [SingleStatementClass]
                                            ) [StatementListClass]
                                          ) [StatementClass]
                                        ) [MultipleStatements]
                                      ) [HasElseClause]
                                    ) [IfStatement]
                                  ) [SingleStatementClass]
                                ) [HasElseClause]
                              ) [IfStatement]
                            ) [SingleStatementClass]
                          ) [StatementListClass]
                          SingleStatementClass(
                            PrintStatement(
                              Expr(
                                ExpressionClass(
                                  ExpressionPositive(
                                  ) [ExpressionPositive]
                                  Terminal(
                                    FactorDesignator(
                                      DesignatorClass(
                                       local1
                                      ) [DesignatorClass]
                                    ) [FactorDesignator]
                                  ) [Terminal]
                                ) [ExpressionClass]
                                HasNotExprBinary(
                                ) [HasNotExprBinary]
                              ) [Expr]
                              HasNotPrintConstant(
                              ) [HasNotPrintConstant]
                            ) [PrintStatement]
                          ) [SingleStatementClass]
                        ) [StatementListClass]
                        SingleStatementClass(
                          IfStatement(
                            IfClause(
                              IfStart(
                              ) [IfStart]
                              IfConditionClass(
                                SingleCondition(
                                  SingleConditionTerm(
                                    ConditionFactRelop(
                                      Expr(
                                        ExpressionClass(
                                          ExpressionPositive(
                                          ) [ExpressionPositive]
                                          Terminal(
                                            FactorDesignator(
                                              DesignatorClass(
                                               local1
                                              ) [DesignatorClass]
                                            ) [FactorDesignator]
                                          ) [Terminal]
                                        ) [ExpressionClass]
                                        HasNotExprBinary(
                                        ) [HasNotExprBinary]
                                      ) [Expr]
                                      RelationGreater(
                                      ) [RelationGreater]
                                      Expr(
                                        ExpressionAddop(
                                          ExpressionAddop(
                                            ExpressionClass(
                                              ExpressionNegative(
                                              ) [ExpressionNegative]
                                              Terminal(
                                                FactorNumberConstant(
                                                  NumberConstant(
                                                   5
                                                  ) [NumberConstant]
                                                ) [FactorNumberConstant]
                                              ) [Terminal]
                                            ) [ExpressionClass]
                                            AdditionOperation(
                                            ) [AdditionOperation]
                                            Terminal(
                                              FactorDesignator(
                                                DesignatorClass(
                                                 local1
                                                ) [DesignatorClass]
                                              ) [FactorDesignator]
                                            ) [Terminal]
                                          ) [ExpressionAddop]
                                          SubtractionOperation(
                                          ) [SubtractionOperation]
                                          Terminal(
                                            FactorNumberConstant(
                                              NumberConstant(
                                               2
                                              ) [NumberConstant]
                                            ) [FactorNumberConstant]
                                          ) [Terminal]
                                        ) [ExpressionAddop]
                                        HasNotExprBinary(
                                        ) [HasNotExprBinary]
                                      ) [Expr]
                                    ) [ConditionFactRelop]
                                  ) [SingleConditionTerm]
                                ) [SingleCondition]
                              ) [IfConditionClass]
                              MultipleStatements(
                                StatementClass(
                                  StatementListClass(
                                    EmptyStatementList(
                                    ) [EmptyStatementList]
                                    SingleStatementClass(
                                      PrintStatement(
                                        Expr(
                                          ExpressionClass(
                                            ExpressionPositive(
                                            ) [ExpressionPositive]
                                            Terminal(
                                              FactorDesignator(
                                                DesignatorClass(
                                                 local2
                                                ) [DesignatorClass]
                                              ) [FactorDesignator]
                                            ) [Terminal]
                                          ) [ExpressionClass]
                                          HasNotExprBinary(
                                          ) [HasNotExprBinary]
                                        ) [Expr]
                                        HasNotPrintConstant(
                                        ) [HasNotPrintConstant]
                                      ) [PrintStatement]
                                    ) [SingleStatementClass]
                                  ) [StatementListClass]
                                ) [StatementClass]
                              ) [MultipleStatements]
                            ) [IfClause]
                            HasNotElseClause(
                            ) [HasNotElseClause]
                          ) [IfStatement]
                        ) [SingleStatementClass]
                      ) [StatementListClass]
                      SingleStatementClass(
                        ReadStatement(
                          DesignatorArray(
                            DesignatorClass(
                             array1
                            ) [DesignatorClass]
                            Expr(
                              ExpressionClass(
                                ExpressionPositive(
                                ) [ExpressionPositive]
                                Terminal(
                                  FactorDesignator(
                                    DesignatorClass(
                                     x
                                    ) [DesignatorClass]
                                  ) [FactorDesignator]
                                ) [Terminal]
                              ) [ExpressionClass]
                              HasNotExprBinary(
                              ) [HasNotExprBinary]
                            ) [Expr]
                          ) [DesignatorArray]
                        ) [ReadStatement]
                      ) [SingleStatementClass]
                    ) [StatementListClass]
                    SingleStatementClass(
                      SSDesignatorStatement(
                        DesignatorStatementClass(
                          DesignatorClass(
                           local1
                          ) [DesignatorClass]
                          DesignatorAssign(
                            DesignatorAssignOperation(
                              AssignOperation(
                              ) [AssignOperation]
                              Expr(
                                ExpressionClass(
                                  ExpressionPositive(
                                  ) [ExpressionPositive]
                                  Terminal(
                                    FactorFunctionCall(
                                      DesignatorClass(
                                       function2
                                      ) [DesignatorClass]
                                      FunctionCallHasArguments(
                                        MultipleActualParameters(
                                          SingleActualParameter(
                                            Expr(
                                              ExpressionClass(
                                                ExpressionPositive(
                                                ) [ExpressionPositive]
                                                Terminal(
                                                  FactorDesignator(
                                                    DesignatorClass(
                                                     array1
                                                    ) [DesignatorClass]
                                                  ) [FactorDesignator]
                                                ) [Terminal]
                                              ) [ExpressionClass]
                                              HasNotExprBinary(
                                              ) [HasNotExprBinary]
                                            ) [Expr]
                                          ) [SingleActualParameter]
                                          Expr(
                                            ExpressionClass(
                                              ExpressionPositive(
                                              ) [ExpressionPositive]
                                              Terminal(
                                                FactorDesignator(
                                                  DesignatorClass(
                                                   local2
                                                  ) [DesignatorClass]
                                                ) [FactorDesignator]
                                              ) [Terminal]
                                            ) [ExpressionClass]
                                            HasNotExprBinary(
                                            ) [HasNotExprBinary]
                                          ) [Expr]
                                        ) [MultipleActualParameters]
                                      ) [FunctionCallHasArguments]
                                    ) [FactorFunctionCall]
                                  ) [Terminal]
                                ) [ExpressionClass]
                                HasNotExprBinary(
                                ) [HasNotExprBinary]
                              ) [Expr]
                            ) [DesignatorAssignOperation]
                          ) [DesignatorAssign]
                        ) [DesignatorStatementClass]
                      ) [SSDesignatorStatement]
                    ) [SingleStatementClass]
                  ) [StatementListClass]
                  SingleStatementClass(
                    PrintStatement(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               local1
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                        HasNotExprBinary(
                        ) [HasNotExprBinary]
                      ) [Expr]
                      HasNotPrintConstant(
                      ) [HasNotPrintConstant]
                    ) [PrintStatement]
                  ) [SingleStatementClass]
                ) [StatementListClass]
                SingleStatementClass(
                  ReturnStatement(
                    HasReturnExpression(
                      Expr(
                        ExpressionClass(
                          ExpressionPositive(
                          ) [ExpressionPositive]
                          Terminal(
                            FactorDesignator(
                              DesignatorClass(
                               local1
                              ) [DesignatorClass]
                            ) [FactorDesignator]
                          ) [Terminal]
                        ) [ExpressionClass]
                        HasNotExprBinary(
                        ) [HasNotExprBinary]
                      ) [Expr]
                    ) [HasReturnExpression]
                  ) [ReturnStatement]
                ) [SingleStatementClass]
              ) [StatementListClass]
            ) [MethodDeclaration]
          ) [ProgramMethodsList]
          MethodDeclaration(
            MethodTypeNotVoid(
              Type(
               int
              ) [Type]
            ) [MethodTypeNotVoid]
            MethodName(
             function2
            ) [MethodName]
            FormalParametersList(
              MultipleFormalParameters(
                SingleFormalParameter(
                  FormalParameter(
                    Type(
                     int
                    ) [Type]
                   param1
                    VarIsArray(
                    ) [VarIsArray]
                  ) [FormalParameter]
                ) [SingleFormalParameter]
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 param2
                  VarIsNotArray(
                  ) [VarIsNotArray]
                ) [FormalParameter]
              ) [MultipleFormalParameters]
            ) [FormalParametersList]
            VariablesDeclarationList(
              VariablesDeclarationList(
                EmptyVariablesDeclarationList(
                ) [EmptyVariablesDeclarationList]
                LocalVariables(
                  Type(
                   int
                  ) [Type]
                  SingleLocalVariableList(
                    VariableDeclaration(
                     local1
                      VarIsNotArray(
                      ) [VarIsNotArray]
                    ) [VariableDeclaration]
                  ) [SingleLocalVariableList]
                ) [LocalVariables]
              ) [VariablesDeclarationList]
              LocalVariables(
                Type(
                 bool
                ) [Type]
                SingleLocalVariableList(
                  VariableDeclaration(
                   local2
                    VarIsArray(
                    ) [VarIsArray]
                  ) [VariableDeclaration]
                ) [SingleLocalVariableList]
              ) [LocalVariables]
            ) [VariablesDeclarationList]
            EmptyStatementList(
            ) [EmptyStatementList]
          ) [MethodDeclaration]
        ) [ProgramMethodsList]
        MethodDeclaration(
          MethodTypeNotVoid(
            Type(
             int
            ) [Type]
          ) [MethodTypeNotVoid]
          MethodName(
           sum
          ) [MethodName]
          FormalParametersList(
            MultipleFormalParameters(
              SingleFormalParameter(
                FormalParameter(
                  Type(
                   int
                  ) [Type]
                 z
                  VarIsNotArray(
                  ) [VarIsNotArray]
                ) [FormalParameter]
              ) [SingleFormalParameter]
              FormalParameter(
                Type(
                 int
                ) [Type]
               d
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [FormalParameter]
            ) [MultipleFormalParameters]
          ) [FormalParametersList]
          EmptyVariablesDeclarationList(
          ) [EmptyVariablesDeclarationList]
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              ReturnStatement(
                HasReturnExpression(
                  Expr(
                    ExpressionAddop(
                      ExpressionClass(
                        ExpressionPositive(
                        ) [ExpressionPositive]
                        Terminal(
                          FactorDesignator(
                            DesignatorClass(
                             z
                            ) [DesignatorClass]
                          ) [FactorDesignator]
                        ) [Terminal]
                      ) [ExpressionClass]
                      AdditionOperation(
                      ) [AdditionOperation]
                      Terminal(
                        FactorDesignator(
                          DesignatorClass(
                           d
                          ) [DesignatorClass]
                        ) [FactorDesignator]
                      ) [Terminal]
                    ) [ExpressionAddop]
                    HasNotExprBinary(
                    ) [HasNotExprBinary]
                  ) [Expr]
                ) [HasReturnExpression]
              ) [ReturnStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
        ) [MethodDeclaration]
      ) [ProgramMethodsList]
      MethodDeclaration(
        MethodTypeNotVoid(
          Type(
           int
          ) [Type]
        ) [MethodTypeNotVoid]
        MethodName(
         inkrement
        ) [MethodName]
        FormalParametersListWithOptionalArguments(
          SingleFormalParameter(
            FormalParameter(
              Type(
               int
              ) [Type]
             a
              VarIsNotArray(
              ) [VarIsNotArray]
            ) [FormalParameter]
          ) [SingleFormalParameter]
          SingleOptionalArgument(
            OptionalArgument(
              Type(
               int
              ) [Type]
             inc
              NumConstClass(
                NumberConstant(
                 1
                ) [NumberConstant]
              ) [NumConstClass]
            ) [OptionalArgument]
          ) [SingleOptionalArgument]
        ) [FormalParametersListWithOptionalArguments]
        VariablesDeclarationList(
          EmptyVariablesDeclarationList(
          ) [EmptyVariablesDeclarationList]
          LocalVariables(
            Type(
             int
            ) [Type]
            SingleLocalVariableList(
              VariableDeclaration(
               pom
                VarIsNotArray(
                ) [VarIsNotArray]
              ) [VariableDeclaration]
            ) [SingleLocalVariableList]
          ) [LocalVariables]
        ) [VariablesDeclarationList]
        StatementListClass(
          StatementListClass(
            EmptyStatementList(
            ) [EmptyStatementList]
            SingleStatementClass(
              IfStatement(
                IfClause(
                  IfStart(
                  ) [IfStart]
                  IfConditionClass(
                    SingleCondition(
                      SingleConditionTerm(
                        ConditionFactRelop(
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorDesignator(
                                  DesignatorClass(
                                   inc
                                  ) [DesignatorClass]
                                ) [FactorDesignator]
                              ) [Terminal]
                            ) [ExpressionClass]
                            HasNotExprBinary(
                            ) [HasNotExprBinary]
                          ) [Expr]
                          RelationEquals(
                          ) [RelationEquals]
                          Expr(
                            ExpressionClass(
                              ExpressionPositive(
                              ) [ExpressionPositive]
                              Terminal(
                                FactorDesignator(
                                  DesignatorClass(
                                   jedan
                                  ) [DesignatorClass]
                                ) [FactorDesignator]
                              ) [Terminal]
                            ) [ExpressionClass]
                            HasNotExprBinary(
                            ) [HasNotExprBinary]
                          ) [Expr]
                        ) [ConditionFactRelop]
                      ) [SingleConditionTerm]
                    ) [SingleCondition]
                  ) [IfConditionClass]
                  SingleStatementClass(
                    SSDesignatorStatement(
                      DesignatorStatementClass(
                        DesignatorClass(
                         pom
                        ) [DesignatorClass]
                        DesignatorAssign(
                          DesignatorAssignOperation(
                            AssignOperation(
                            ) [AssignOperation]
                            Expr(
                              ExpressionClass(
                                ExpressionPositive(
                                ) [ExpressionPositive]
                                Terminal(
                                  FactorNumberConstant(
                                    NumberConstant(
                                     1
                                    ) [NumberConstant]
                                  ) [FactorNumberConstant]
                                ) [Terminal]
                              ) [ExpressionClass]
                              HasNotExprBinary(
                              ) [HasNotExprBinary]
                            ) [Expr]
                          ) [DesignatorAssignOperation]
                        ) [DesignatorAssign]
                      ) [DesignatorStatementClass]
                    ) [SSDesignatorStatement]
                  ) [SingleStatementClass]
                ) [IfClause]
                HasElseClause(
                  ElseStart(
                  ) [ElseStart]
                  SingleStatementClass(
                    IfStatement(
                      IfClause(
                        IfStart(
                        ) [IfStart]
                        IfConditionClass(
                          SingleCondition(
                            SingleConditionTerm(
                              ConditionFactRelop(
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorDesignator(
                                        DesignatorClass(
                                         inc
                                        ) [DesignatorClass]
                                      ) [FactorDesignator]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                  HasNotExprBinary(
                                  ) [HasNotExprBinary]
                                ) [Expr]
                                RelationEquals(
                                ) [RelationEquals]
                                Expr(
                                  ExpressionClass(
                                    ExpressionPositive(
                                    ) [ExpressionPositive]
                                    Terminal(
                                      FactorNumberConstant(
                                        NumberConstant(
                                         2
                                        ) [NumberConstant]
                                      ) [FactorNumberConstant]
                                    ) [Terminal]
                                  ) [ExpressionClass]
                                  HasNotExprBinary(
                                  ) [HasNotExprBinary]
                                ) [Expr]
                              ) [ConditionFactRelop]
                            ) [SingleConditionTerm]
                          ) [SingleCondition]
                        ) [IfConditionClass]
                        SingleStatementClass(
                          SSDesignatorStatement(
                            DesignatorStatementClass(
                              DesignatorClass(
                               pom
                              ) [DesignatorClass]
                              DesignatorAssign(
                                DesignatorAssignOperation(
                                  AssignOperation(
                                  ) [AssignOperation]
                                  Expr(
                                    ExpressionClass(
                                      ExpressionPositive(
                                      ) [ExpressionPositive]
                                      Terminal(
                                        FactorDesignator(
                                          DesignatorClass(
                                           a
                                          ) [DesignatorClass]
                                        ) [FactorDesignator]
                                      ) [Terminal]
                                    ) [ExpressionClass]
                                    HasNotExprBinary(
                                    ) [HasNotExprBinary]
                                  ) [Expr]
                                ) [DesignatorAssignOperation]
                              ) [DesignatorAssign]
                            ) [DesignatorStatementClass]
                          ) [SSDesignatorStatement]
                        ) [SingleStatementClass]
                      ) [IfClause]
                      HasNotElseClause(
                      ) [HasNotElseClause]
                    ) [IfStatement]
                  ) [SingleStatementClass]
                ) [HasElseClause]
              ) [IfStatement]
            ) [SingleStatementClass]
          ) [StatementListClass]
          SingleStatementClass(
            ReturnStatement(
              HasReturnExpression(
                Expr(
                  ExpressionClass(
                    ExpressionPositive(
                    ) [ExpressionPositive]
                    Terminal(
                      FactorFunctionCall(
                        DesignatorClass(
                         sum
                        ) [DesignatorClass]
                        FunctionCallHasArguments(
                          MultipleActualParameters(
                            SingleActualParameter(
                              Expr(
                                ExpressionClass(
                                  ExpressionPositive(
                                  ) [ExpressionPositive]
                                  Terminal(
                                    FactorDesignator(
                                      DesignatorClass(
                                       a
                                      ) [DesignatorClass]
                                    ) [FactorDesignator]
                                  ) [Terminal]
                                ) [ExpressionClass]
                                HasNotExprBinary(
                                ) [HasNotExprBinary]
                              ) [Expr]
                            ) [SingleActualParameter]
                            Expr(
                              ExpressionClass(
                                ExpressionPositive(
                                ) [ExpressionPositive]
                                Terminal(
                                  FactorDesignator(
                                    DesignatorClass(
                                     pom
                                    ) [DesignatorClass]
                                  ) [FactorDesignator]
                                ) [Terminal]
                              ) [ExpressionClass]
                              HasNotExprBinary(
                              ) [HasNotExprBinary]
                            ) [Expr]
                          ) [MultipleActualParameters]
                        ) [FunctionCallHasArguments]
                      ) [FactorFunctionCall]
                    ) [Terminal]
                  ) [ExpressionClass]
                  HasNotExprBinary(
                  ) [HasNotExprBinary]
                ) [Expr]
              ) [HasReturnExpression]
            ) [ReturnStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
      ) [MethodDeclaration]
    ) [ProgramMethodsList]
    MethodDeclaration(
      MethodTypeNotVoid(
        Type(
         bool
        ) [Type]
      ) [MethodTypeNotVoid]
      MethodName(
       verify
      ) [MethodName]
      EmptyFormalParametersList(
      ) [EmptyFormalParametersList]
      EmptyVariablesDeclarationList(
      ) [EmptyVariablesDeclarationList]
      StatementListClass(
        StatementListClass(
          EmptyStatementList(
          ) [EmptyStatementList]
          SingleStatementClass(
            PrintStatement(
              Expr(
                ExpressionClass(
                  ExpressionPositive(
                  ) [ExpressionPositive]
                  Terminal(
                    FactorCharacterConstant(
                      CharacterConstant(
                       v
                      ) [CharacterConstant]
                    ) [FactorCharacterConstant]
                  ) [Terminal]
                ) [ExpressionClass]
                HasNotExprBinary(
                ) [HasNotExprBinary]
              ) [Expr]
              HasNotPrintConstant(
              ) [HasNotPrintConstant]
            ) [PrintStatement]
          ) [SingleStatementClass]
        ) [StatementListClass]
        SingleStatementClass(
          ReturnStatement(
            HasReturnExpression(
              Expr(
                ExpressionClass(
                  ExpressionPositive(
                  ) [ExpressionPositive]
                  Terminal(
                    FactorBooleanConstant(
                      BooleanConstant(
                       false
                      ) [BooleanConstant]
                    ) [FactorBooleanConstant]
                  ) [Terminal]
                ) [ExpressionClass]
                HasNotExprBinary(
                ) [HasNotExprBinary]
              ) [Expr]
            ) [HasReturnExpression]
          ) [ReturnStatement]
        ) [SingleStatementClass]
      ) [StatementListClass]
    ) [MethodDeclaration]
  ) [ProgramMethodsList]
) [Program]
INFO  14:34:35,762 - =========================================
INFO  14:34:35,762 - Starting semantic analysis....
INFO  14:34:35,791 - Constant x declared  at line 2
INFO  14:34:35,791 - Global variable y declared at line 3
INFO  14:34:35,791 - Global variable z declared at line 3
INFO  14:34:35,792 - Global variable b declared at line 4
INFO  14:34:35,792 - Function function is being parsed  at line 6
INFO  14:34:35,798 - Local parameter param1 declared at line 6
INFO  14:34:35,798 - Local parameter param2[] declared at line 6
INFO  14:34:35,798 - Local parameter param3 declared at line 6
INFO  14:34:35,798 - Local variable local1 declared at line 6
INFO  14:34:35,799 - Local variable local2 declared at line 6
INFO  14:34:35,799 - Local variable local3 declared at line 6
INFO  14:34:35,799 - Local array array1[] declared at line 6
INFO  14:34:35,799 - Local variable local2 accessed at line 7
INFO  14:34:35,799 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,799 - Local variable local2 accessed at line 8
INFO  14:34:35,800 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,800 - Local variable local2 accessed at line 9
INFO  14:34:35,800 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,800 - Local variable local1 accessed at line 10
INFO  14:34:35,800 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,800 - Local variable local2 accessed at line 10
INFO  14:34:35,800 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,800 - Local variable local2 accessed at line 12
INFO  14:34:35,800 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,800 - Local variable local2 accessed at line 12
INFO  14:34:35,801 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,801 - Local variable local1 accessed at line 13
INFO  14:34:35,801 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,801 - Local variable local2 accessed at line 13
INFO  14:34:35,801 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,801 - Local variable local1 accessed at line 16
INFO  14:34:35,801 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,801 - Local variable local2 accessed at line 16
INFO  14:34:35,801 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,801 - Local variable local1 accessed at line 18
INFO  14:34:35,801 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,801 - Local variable local1 accessed at line 19
INFO  14:34:35,802 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,802 - Local variable local1 accessed at line 19
INFO  14:34:35,802 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,802 - Local variable local2 accessed at line 20
INFO  14:34:35,802 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,802 - Local variable array1 accessed at line 22
INFO  14:34:35,802 - 	[Var array1: Arr of int, 6, 1 ]
INFO  14:34:35,802 - Element in array array1[] accessed at line 22
INFO  14:34:35,802 - 	[array1: int, -1, -1 ]
INFO  14:34:35,802 - Local variable local1 accessed at line 23
INFO  14:34:35,802 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,802 - Error! Name function2 not declared at line 23
INFO  14:34:35,802 - Local variable array1 accessed at line 23
INFO  14:34:35,802 - 	[Var array1: Arr of int, 6, 1 ]
INFO  14:34:35,802 - Local variable local2 accessed at line 23
INFO  14:34:35,802 - 	[Var local2: int, 4, 1 ]
INFO  14:34:35,802 - Error! Name noObj is not a global function at line 23
INFO  14:34:35,802 - Error! Assignment operation can be done between compatibile types only at line 23
INFO  14:34:35,802 - Local variable local1 accessed at line 24
INFO  14:34:35,802 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,802 - Local variable local1 accessed at line 25
INFO  14:34:35,802 - 	[Var local1: int, 3, 1 ]
INFO  14:34:35,803 - Error! Type of return expression is not equivalent to method return type at line 2
INFO  14:34:35,803 - Function function2 is being parsed  at line 28
INFO  14:34:35,803 - Local parameter param1[] declared at line 28
INFO  14:34:35,803 - Local parameter param2 declared at line 28
INFO  14:34:35,803 - Local variable local1 declared at line 28
INFO  14:34:35,803 - Local array local2[] declared at line 28
INFO  14:34:35,803 - Error! Return value not found for function function2 at line 28
INFO  14:34:35,803 - Function sum is being parsed  at line 30
INFO  14:34:35,803 - Local parameter z declared at line 30
INFO  14:34:35,803 - Local parameter d declared at line 30
INFO  14:34:35,804 - Function parameter z accessed at line 31
INFO  14:34:35,804 - 	[Var z: int, 0, 1 ]
INFO  14:34:35,804 - Function parameter d accessed at line 31
INFO  14:34:35,804 - 	[Var d: int, 1, 1 ]
INFO  14:34:35,804 - Function inkrement is being parsed  at line 34
INFO  14:34:35,804 - Local parameter a declared at line 34
INFO  14:34:35,804 - Default parameter inc declared at line 34
INFO  14:34:35,804 - Local variable pom declared at line 35
INFO  14:34:35,804 - Function parameter inc accessed at line 37
INFO  14:34:35,804 - 	[Var inc: int, 1, 1 ]
INFO  14:34:35,804 - Error! Name jedan not declared at line 37
INFO  14:34:35,804 - Error! Name noObj is not declared at line 37
INFO  14:34:35,805 - Error! Types are not compatibile at line 4
INFO  14:34:35,805 - Local variable pom accessed at line 37
INFO  14:34:35,805 - 	[Var pom: int, 2, 1 ]
INFO  14:34:35,805 - Function parameter inc accessed at line 38
INFO  14:34:35,805 - 	[Var inc: int, 1, 1 ]
INFO  14:34:35,805 - Local variable pom accessed at line 38
INFO  14:34:35,805 - 	[Var pom: int, 2, 1 ]
INFO  14:34:35,805 - Function parameter a accessed at line 38
INFO  14:34:35,805 - 	[Var a: int, 0, 1 ]
INFO  14:34:35,805 - Error! Condition in IF statement must be BOOLEAN type at line 37
INFO  14:34:35,805 - Function parameter a accessed at line 40
INFO  14:34:35,805 - 	[Var a: int, 0, 1 ]
INFO  14:34:35,805 - Local variable pom accessed at line 40
INFO  14:34:35,805 - 	[Var pom: int, 2, 1 ]
INFO  14:34:35,805 - Error! Calling function sum with too many arguments at line 40
INFO  14:34:35,805 - Error! Type of return expression is not equivalent to method return type at line 2
INFO  14:34:35,805 - Function verify is being parsed  at line 43
INFO  14:34:35,806 - Error! Main is not declared in program!
ERROR 14:34:35,806 - An error occured in semantic analysis!
